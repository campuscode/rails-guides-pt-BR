var lunrDocuments = [{"id":0,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1 Noções Básicas de Linha de Comando","content":"existem alguns comandos essenciais cotidiano rails. ordem quanto você provavelmente utilizá-los são: você pode obter lista comandos rails disponíveis, geralmente depende diretório atual, escrevendo rails --help. cada comando possui descrição, deverá ajudá-lo encontrar precisa. vamos criar aplicação rails simples passando cada destes comandos."},{"id":1,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.1 rails new","content":"first thing we'll want create rails application running rails command after installing rails. rails will with what seems like huge amount stuff such tiny command! you've entire rails directory structure with code need simple application right box. wish skip some files components from being generated, append following arguments your rails command:"},{"id":2,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.2 bin/rails server","content":"bin/rails server command launches server named puma which comes bundled with rails. you'll this time want access your application through browser. with further work, bin/rails server will shiny rails app: with just three commands whipped rails server listening port your browser open http://localhost:3000, will basic rails running. server different port using option. default development environment changed using option binds rails specified default localhost. server daemon passing option."},{"id":3,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.3 bin/rails generate","content":"bin/rails generate command uses templates create whole things. running bin/rails generate itself gives list available generators: using generators will save large amount time writing boilerplate code, code that necessary work. let's make controller with controller generator. what command should use? let's generator: controller generator expecting parameters form generate controller controllername action1 action2. let's make greetings controller with action hello, which will something nice what this generate? made sure bunch directories were application, created controller file, view file, functional test file, helper view, javascript file, stylesheet file. check controller modify little app/controllers/greetings_controller.rb): then view, display message app/views/greetings/hello.html.erb): fire your server using bin/rails server. will http://localhost:3000/greetings/hello. rails comes with generator data models too. instead generating model directly (which we'll doing later), let's scaffold. scaffold rails full model, database migration that model, controller manipulate views view manipulate data, test suite each above. will simple resource called \"highscore\" that will keep track highest score video games play. generator checks that there exist directories models, controllers, helpers, layouts, functional unit tests, stylesheets, creates views, controller, model database migration highscore (creating high_scores table fields), takes care route resource, tests everything. migration requires that migrate, that some ruby code (living that 20130717151933_create_high_scores.rb) modify schema database. which database? sqlite3 database that rails will create when bin/rails db:migrate command. we'll talk more about that command below. let's interface rails created your browser open http://localhost:3000/high_scores, create high scores (55,160 space invaders!)"},{"id":4,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.4 bin/rails console","content":"console command lets interact with your rails application from command line. underside, bin/rails console uses irb, you've ever used you'll right home. this useful testing quick ideas with code changing data server-side without touching website. specify environment which console command should operate. wish test some code without changing data, that invoking bin/rails console --sandbox. inside bin/rails console have access helper instances. with method access named route helpers, well requests. with helper method possible access rails your application's helpers."},{"id":5,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.5 bin/rails dbconsole","content":"bin/rails dbconsole figures which database you're using drops into whichever command line interface would with (and figures command line parameters give too!). supports mysql (including mariadb), postgresql, sqlite3. using multiple databases, bin/rails dbconsole will connect primary database default. specify which database connect using --database --db:"},{"id":6,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.6 bin/rails runner","content":"runner runs ruby code context rails non-interactively. instance: specify environment which runner command should operate using switch. even execute ruby code written file with runner."},{"id":7,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.7 bin/rails destroy","content":"think destroy opposite generate. it'll figure what generate did, undo"},{"id":8,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.8 bin/rails about","content":"bin/rails about gives information about version numbers ruby, rubygems, rails, rails subcomponents, your application's folder, current rails environment name, your app's database adapter, schema version. useful when need help, check security patch might affect you, when need some stats existing rails installation."},{"id":9,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.9 bin/rails assets:","content":"precompile assets app/assets using bin/rails assets:precompile, remove older compiled assets using bin/rails assets:clean. assets:clean command allows rolling deploys that still linking asset while assets being built. want clear public/assets completely, bin/rails assets:clobber."},{"id":10,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.10 bin/rails db:","content":"most common commands rails namespace migrate create, will migration rails commands (up, down, redo, reset). bin/rails db:version useful when troubleshooting, telling current version database. more information about migrations found migrations guide."},{"id":11,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.11 bin/rails notes","content":"bin/rails notes searches through your code comments beginning with specific keyword. refer bin/rails notes --help information about usage. default, will search app, config, lib, test directories fixme, optimize, todo annotations files with extension .builder, .rb, .rake, .yml, .yaml, .ruby, .css, .js, .erb. pass specific annotations using --annotations argument. default, will search fixme, optimize, todo. note that annotations case sensitive. more default tags search using config.annotations.register_tags. receives list tags. more default directories search from using config.annotations.register_directories. receives list directory names. more default file extensions search from using config.annotations.register_extensions. receives list extensions with corresponding regex match"},{"id":12,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.12 bin/rails routes","content":"bin/rails routes will list your defined routes, which useful tracking down routing problems your app, giving good overview urls you're trying familiar with."},{"id":13,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.13 bin/rails test","content":"rails comes with test framework called minitest. rails owes stability tests. commands available test: namespace helps running different tests will hopefully write."},{"id":14,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.14 bin/rails tmp:","content":"rails.root/tmp directory like *nix /tmp directory, holding place temporary files like process files cached actions. tmp: namespaced commands will help clear create rails.root/tmp directory:"},{"id":15,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.15 Miscellaneous","content":""},{"id":16,"title":"Linhas de Comando do Rails","heading":"1 Noções Básicas de Linha de Comando","subheading":"1.16 Custom Rake Tasks","content":"custom rake tasks have .rake extension placed rails.root/lib/tasks. create these custom rake tasks with bin/rails generate task command. pass arguments your custom rake task: group tasks placing them namespaces: invocation tasks will look like: more advanced command line focused around finding useful (even surprising times) options utilities, fitting those your needs specific work flow. listed here some tricks rails' sleeve."},{"id":17,"title":"Linhas de Comando do Rails","heading":"2 The Rails Advanced Command Line","subheading":"2.1 Rails with Databases and SCM","content":"when creating rails application, have option specify what kind database what kind source code management system your application going use. this will save minutes, certainly many keystrokes. let's what --git option --database=postgresql option will create gitapp directory initialize empty repository before rails would files created repository. let's what database configuration: also generated some lines database.yml configuration corresponding choice postgresql database. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":18,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1 Visão geral dos helpers fornecidos pelo Action View","content":"wip: todos helpers estão listados aqui. lista completa, consulte documentação segue apenas breve resumo geral helpers disponíveis action view. recomendável você revise documentação api, cobre todos helpers forma mais detalhada, esse conteúdo deve servir como ponto partida."},{"id":19,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.1 AssetTagHelper","content":"este módulo fornece métodos gerar html vincula views assets, como imagens, arquivos javascript, folhas estilo feeds. padrão, rails disponibiliza esses assets host atual pasta public, você pode direcionar rails disponibilizar assets servidor assets dedicado definindo config.asset_host configuração aplicação, normalmente config/environment/production.rb. exemplo, digamos host assets seja assets.example.com: retorna link navegadores leitores feed podem usar detectar automaticamente feed rss, atom json. gera caminho imagem diretório app/assets/images. caminhos completos raiz documento interpretados como caminhos absolutos, ignorando configurações asset pipeline. usado internamente image_tag construir caminho imagem. fingerprint será adicionada nome arquivo config.assets.digest definido como verdadeiro. gera asset imagem diretório app/assets/images. isso chamará image_path internamente mesclará host atual host assets. retorna imagem html fonte. fonte pode caminho completo arquivo existe diretório app/assets/images. retorna script html cada fontes fornecidas. você pode passar nome arquivos javascript extensão opcional) existem diretório app/assets/javascripts inclusão página atual você pode passar caminho completo relativo raiz documento. gera caminho asset javascript diretório app/assets/javascripts. nome arquivo fonte tiver extensão, será anexado. caminhos completos raiz documento podem passados. usado internamente javascript_include_tag construir caminho script. gera asset javascript diretório app/assets/javascripts. isso chamará javascript_path internamente mesclará host atual host assets. retorna link folha estilo fontes especificadas como argumentos. você especificar extensão, .css será anexado automaticamente. gera caminho recurso stylesheet diretório app/assets/stylesheets. nome arquivo fonte tiver extensão, .css será anexado automaticamente. caminhos completos raiz documento podem passados. usado internamente stylesheet_link_tag construir caminho folha estilo. gera asset folha estilo diretório app/assets/stylesheets. isso chamará stylesheet_path internamente mesclará host atual host asset."},{"id":20,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.2 AtomFeedHelper","content":"este helper facilita construção feed atom. aqui está exemplo completo uso: config/routes.rb app/controllers/articles_controller.rb app/views/articles/index.atom.builder"},{"id":21,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.3 BenchmarkHelper","content":"permite medir tempo execução bloco template registra resultado log. tal, envolva este bloco torno operações custosas, possíveis gargalos, obter tempo leitura operação. isso adicionaria algo como \"process data files (0.34523)\" log, você pode usar comparar tempos otimizar código."},{"id":22,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.4 CacheHelper","content":"método armazenar cache fragmentos view, ação página inteira. essa técnica útil armazenar componentes como: menus, listas tópicos notícias, fragmentos html estáticos assim diante. este método pega bloco contém conteúdo você deseja armazenar cache. veja abstractcontroller::caching::fragments mais informações."},{"id":23,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.5 CaptureHelper","content":"método capture permite você extraia parte template variável. você pode então usar essa variável qualquer lugar templates layout. variável capturada pode então usada qualquer outro lugar. chamar content_for permite armazena bloco marcação identificador posterior. você pode fazer chamadas subsequentes conteúdo armazenado outros templates layout, passando identificador como argumento yield. exemplo, digamos temos layout padrão aplicação, também página especial requer determinado código javascript resto site precisa. podemos usar content_for incluir este código javascript nossa página especial inflar resto site. app/views/layouts/application.html.erb app/views/articles/special.html.erb"},{"id":24,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.6 DateHelper","content":"informa distância aproximada tempo entre dois objetos time, date integers como segundos. defina include_seconds como true você quiser aproximações mais detalhadas. como distance_of_time_in_words, onde to_time fixado time.now."},{"id":25,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.7 DebugHelper","content":"retorna objeto yaml. isso cria maneira muito legível inspecionar objeto."},{"id":26,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.8 FormHelper","content":"formhelper projetados tornar trabalho models muito mais fácil comparação apenas elementos html padrão, fornecendo conjunto métodos criação formulários base seus models. este auxiliar gera html formulários, fornecendo método cada tipo entrada (por exemplo, texto (text), senha (password), seleção (select), assim diante). quando formulário enviado seja, quando usuário clica botão envio, através form.submit chamado javascript), entradas formulário agrupadas dentro parâmetros objeto devolvidas controlador. você pode aprender mais sobre helpers formulário action view form helpers guide."},{"id":27,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.9 JavaScriptHelper","content":"fornece funcionalidades trabalhar javascript suas views. escapa retornos, aspas simples aspas duplas segmentos javascript. retorna javascript envolvendo código fornecido."},{"id":28,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.10 NumberHelper","content":"fornece métodos converter números strings formatadas. métodos fornecidos números telefone, moeda, porcentagem, precisão, notação posicional tamanhos arquivo. formata número string moeda (por exemplo, $13.65). imprime (formata aproxima) número seja mais legível pelos usuários; útil números podem ficar muito grandes. formata bytes tamanho representação mais compreensível; útil relatar tamanhos arquivo usuários. formata número como string porcentagem. formata número número telefone (formato padrão). formata número casas milhar usando delimitador. formata número nível especificado precision (precisão), cujo padrão"},{"id":29,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.11 SanitizeHelper","content":"módulo sanitizehelper fornece conjunto métodos limpar texto elementos html indesejados. este helper limpeza codificará html todas tags removerá todos atributos especificamente permitidos. opções :attributes (atributos) :tags passadas, apenas atributos tags mencionados permitidos nada mais. alterar padrões múltiplos usos, exemplo, adicionando tags tabela padrão: limpa bloco código css. remove todas tags link texto, deixando apenas texto link. retira todas tags html html, incluindo comentários. essa funcionalidade alimentada pela rails-html-sanitizer. nota: saída ainda pode conter caracteres '<', '>', escapadas confundir navegadores."},{"id":30,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.12 UrlHelper","content":"fornece métodos criar links obter urls dependem subsistema roteamento. retorna conjunto options fornecido. links derivada url_for bastidores. usado principalmente criar links recursos restful, que, este exemplo, resumem passar models link_to. exemplos você também pode usar bloco destino link couber parâmetro nome. exemplo erb: produziria: consulte documentação obter mais informações gera formulário submete passada. formulário botão envio valor name (nome). produziria aproximadamente algo como: consulte documentação obter mais informações"},{"id":31,"title":"Action View Helpers","heading":"1 Visão geral dos helpers fornecidos pelo Action View","subheading":"1.13 CsrfHelper","content":"retorna meta tags \"csrf-param\" \"csrf-token\" nome cross-site. solicita parâmetros proteção contra falsificação token, respectivamente. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":32,"title":"Ruby on Rails 6.0 Release Notes","heading":"1 Upgrading to Rails 6.0","subheading":"1 Upgrading to Rails 6.0","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting update rails 6.0. list things watch when upgrading available upgrading ruby rails guide."},{"id":33,"title":"Ruby on Rails 6.0 Release Notes","heading":"2 Major Features","subheading":"2.1 Action Mailbox","content":"pull request action mailbox allows route incoming emails controller-like mailboxes. read more about action mailbox action mailbox basics guide."},{"id":34,"title":"Ruby on Rails 6.0 Release Notes","heading":"2 Major Features","subheading":"2.2 Action Text","content":"pull request action text brings rich text content editing rails. includes trix editor that handles everything from formatting links quotes lists embedded images galleries. rich text content generated trix editor saved richtext model that's associated with existing active record model application. embedded images other attachments) automatically stored using active storage associated with included richtext model. read more about action text action text overview guide."},{"id":35,"title":"Ruby on Rails 6.0 Release Notes","heading":"2 Major Features","subheading":"2.3 Parallel Testing","content":"pull request parallel testing allows parallelize your test suite. while forking processes default method, threading supported well. running tests parallel reduces time takes your entire test suite run."},{"id":36,"title":"Ruby on Rails 6.0 Release Notes","heading":"2 Major Features","subheading":"2.4 Action Cable Testing","content":"pull request action cable testing tools allow test your action cable functionality level: connections, channels, broadcasts. please refer changelog detailed changes."},{"id":37,"title":"Ruby on Rails 6.0 Release Notes","heading":"3 Railties","subheading":"3.1 Removals","content":""},{"id":38,"title":"Ruby on Rails 6.0 Release Notes","heading":"3 Railties","subheading":"3.2 Deprecations","content":""},{"id":39,"title":"Ruby on Rails 6.0 Release Notes","heading":"3 Railties","subheading":"3.3 Notable changes","content":"please refer changelog detailed changes."},{"id":40,"title":"Ruby on Rails 6.0 Release Notes","heading":"4 Action Cable","subheading":"4.1 Removals","content":""},{"id":41,"title":"Ruby on Rails 6.0 Release Notes","heading":"4 Action Cable","subheading":"4.2 Deprecations","content":""},{"id":42,"title":"Ruby on Rails 6.0 Release Notes","heading":"4 Action Cable","subheading":"4.3 Notable changes","content":"please refer changelog detailed changes."},{"id":43,"title":"Ruby on Rails 6.0 Release Notes","heading":"5 Action Pack","subheading":"5.1 Removals","content":""},{"id":44,"title":"Ruby on Rails 6.0 Release Notes","heading":"5 Action Pack","subheading":"5.2 Deprecations","content":""},{"id":45,"title":"Ruby on Rails 6.0 Release Notes","heading":"5 Action Pack","subheading":"5.3 Notable changes","content":"please refer changelog detailed changes."},{"id":46,"title":"Ruby on Rails 6.0 Release Notes","heading":"6 Action View","subheading":"6.1 Removals","content":""},{"id":47,"title":"Ruby on Rails 6.0 Release Notes","heading":"6 Action View","subheading":"6.2 Deprecations","content":""},{"id":48,"title":"Ruby on Rails 6.0 Release Notes","heading":"6 Action View","subheading":"6.3 Notable changes","content":"please refer changelog detailed changes."},{"id":49,"title":"Ruby on Rails 6.0 Release Notes","heading":"7 Action Mailer","subheading":"7.1 Removals","content":""},{"id":50,"title":"Ruby on Rails 6.0 Release Notes","heading":"7 Action Mailer","subheading":"7.2 Deprecations","content":""},{"id":51,"title":"Ruby on Rails 6.0 Release Notes","heading":"7 Action Mailer","subheading":"7.3 Notable changes","content":"please refer changelog detailed changes."},{"id":52,"title":"Ruby on Rails 6.0 Release Notes","heading":"8 Active Record","subheading":"8.1 Removals","content":""},{"id":53,"title":"Ruby on Rails 6.0 Release Notes","heading":"8 Active Record","subheading":"8.2 Deprecations","content":""},{"id":54,"title":"Ruby on Rails 6.0 Release Notes","heading":"8 Active Record","subheading":"8.3 Notable changes","content":"please refer changelog detailed changes."},{"id":55,"title":"Ruby on Rails 6.0 Release Notes","heading":"9 Active Storage","subheading":"9.1 Removals","content":""},{"id":56,"title":"Ruby on Rails 6.0 Release Notes","heading":"9 Active Storage","subheading":"9.2 Deprecations","content":""},{"id":57,"title":"Ruby on Rails 6.0 Release Notes","heading":"9 Active Storage","subheading":"9.3 Notable changes","content":"please refer changelog detailed changes."},{"id":58,"title":"Ruby on Rails 6.0 Release Notes","heading":"10 Active Model","subheading":"10.1 Removals","content":""},{"id":59,"title":"Ruby on Rails 6.0 Release Notes","heading":"10 Active Model","subheading":"10.2 Deprecations","content":""},{"id":60,"title":"Ruby on Rails 6.0 Release Notes","heading":"10 Active Model","subheading":"10.3 Notable changes","content":"please refer changelog detailed changes."},{"id":61,"title":"Ruby on Rails 6.0 Release Notes","heading":"11 Active Support","subheading":"11.1 Removals","content":""},{"id":62,"title":"Ruby on Rails 6.0 Release Notes","heading":"11 Active Support","subheading":"11.2 Deprecations","content":""},{"id":63,"title":"Ruby on Rails 6.0 Release Notes","heading":"11 Active Support","subheading":"11.3 Notable changes","content":"please refer changelog detailed changes."},{"id":64,"title":"Ruby on Rails 6.0 Release Notes","heading":"12 Active Job","subheading":"12.1 Removals","content":""},{"id":65,"title":"Ruby on Rails 6.0 Release Notes","heading":"12 Active Job","subheading":"12.2 Deprecations","content":""},{"id":66,"title":"Ruby on Rails 6.0 Release Notes","heading":"12 Active Job","subheading":"12.3 Notable changes","content":"please refer changelog detailed changes."},{"id":67,"title":"Ruby on Rails 6.0 Release Notes","heading":"13 Ruby on Rails Guides","subheading":"13.1 Notable changes","content":"full list contributors rails many people spent many hours making rails, stable robust framework kudos them. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":68,"title":"Maintenance Policy for Ruby on Rails","heading":null,"subheading":null,"content":"rails follows shifted version semver: patch only fixes, changes, features. except necessary security fixes. minor features, contain changes (serve major versions semver). breaking changes paired with deprecation notices previous minor major release. major features, will likely contain changes. difference between rails' minor major releases magnitude breaking changes, usually reserved special occasions. features only added main branch will made available point releases. only latest release series will receive fixes. when enough bugs fixed deemed worthy release gem, this branch happens from. special situations, where someone from core team agrees support more series, they included list supported series. currently included series: 7.0.z. current release series next most recent will receive patches versions case security issue. these releases created taking last released version, applying security patches, releasing. those patches then applied x-y-stable branch. example, theoretical 1.2.2.1 security release would built from 1.2.2, then added 1-2-stable. this means that security releases easy upgrade you're running latest version rails. only direct security patches will included security releases. fixes non-security related bugs resulting from security patch published release's x-y-stable branch, will only released accordance with fixes policy. currently included series: 7.0.z, 6.1.z. severe security issues releases current major series, also last release previous major series will receive patches versions. classification security issue judged core team. currently included series: 7.0.z, 6.1.z, 6.0.z, 5.2.z. when release series longer supported, it's your responsibility deal with bugs security issues. provide backports fixes publish them git, however there will versions released. comfortable maintaining your versions, should upgrade supported version. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":69,"title":"Configurando Aplicações Rails","heading":"1 Locais para Código de Inicialização","subheading":"1 Locais para Código de Inicialização","content":"rails oferece quatro opções padrão adicionar código inicialização: raras situações aplicação necessita executar código antes próprio rails tenha sido carregado, coloque este código acima chamada require \"rails/all\" arquivo config/application.rb. geral, configurar rails significa configurar componentes rails, assim como configurar rails arquivo configuração config/application.rb arquivos configuração específicos ambiente (como arquivo config/environments/production.rb) permitem definir diversas configurações serão passadas todos componentes. exemplo, você pode adicionar configuração abaixo arquivo config/application.rb: essa configuração próprio rails. você deseja definir ajustes componentes rails, você pode fazê-lo através mesmo objeto config config/application.rb: rails usar essa configuração particular active record."},{"id":70,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.1 Configuração Geral do Rails","content":"métodos configuração seguir devem enviados objetos tipo rails::railtie, como subclasse rails::engine rails::application. recebe bloco será executado após inicialização aplicação rails. isso inclui inicialização framework engines todos initializers definidos config/initializers. perceba esse bloco será executado tarefas rake. essa opção útil configurações feitas outros initializers: define host assets. essa opção útil quando cdns usados hospedar assets, quando você deseja contornar restrições concorrência embutidas navegadores usando diferentes aliases domínios. essa versão encurtada config.action_controller.asset_host. aceita array caminhos onde rails deve carregar automaticamente constantes serão removidas requisição. essa configuração relevante config.cache_classes está definido como false, padrão modo desenvolvimento. outra forma, todo auto carregamento acontece somente vez. todos elementos desse array devem estar também autoload_paths. valor padrão array vazio. aceita array caminhos onde rails deve carregar automaticamente constantes. padrão array vazio. desde rails mais recomendado ajustar essa configuração. veja mais auto carregamento recarregando constantes determina caminhos auto carregamento devem adicionados $load_path. esta configuração true padrão, recomendado seja definida como false recém lançado modo :zeitwerk, config/application.rb. modo zeitwerk caminhos absolutos internamente aplicações executadas neste modo necessitam require_dependency, então models, controllers, jobs, precisam estar $load_path. definido como false, previne ruby verificar estes diretórios quando resolver chamadas require caminhos relativos reduz processamento consumo memória bootsnap, precisa construir índice eles. controla quando classes módulos aplicação devem recarregados caso mudanças. quando cache está ativado (true) recarregamento acontecer. padrão false modo desenvolvimento true modo produção. modo test, padrão false spring estiver instalado, caso contrário true. configura começo semana aplicação. valor deve symbol semana válido (por :monday). incluem symbols: :memory_store, :file_store, :mem_cache_store, :null_store, :redis_cache_store, objeto implementa cache. padrão :file_store. veja cache stores opções configuração store. determina quando utilizar códigos cores ansi registrar informações log. padrão true. quando true adiciona informações detalhadas debug erros resposta http, controller rails::info exibir contexto execução aplicação /rails/info/properties. true padrão ambientes desenvolvimento teste false padrão modo produção. controle mais refinado, defina como false implemente método show_detailed_exceptions? seus controllers especificar requisições devem prover informações debug erros. permite você defina qual classe deve usada quando executar bin/rails console. melhor seja executada dentre bloco console: controla console pode iniciado modo sandbox. esta configuração útil evitar sessões muito longas console modo sandbox, poderia levar servidor banco dados ficar memória. padrão false. quando true, todos namespaces definidos config.eager_load_namespaces carregados forma ativa (eager load). isto inclui aplicação, engines, frameworks rails qualquer outra namespace definida. define todas namespaces serão carregadas ativamente (eager load) quando config.eager_load estiver definido como true. todas namespaces lista devem responder método eager_load!. aceita array caminhos onde rails deve carregar ativamente durante inicialização cache classes está ativo. padrão todas pastas dentro diretório app. quando definido como true, habilita autocarregamento mesmo aplicação esteja carregada ativamente (eager load) config.cache_classes esteja definido como true. padrão false define encoding toda aplicação. padrão utf-8. define aplicação invocada pelo middleware showexception quando exceção acontece. padrão actiondispatch::publicexceptions.new(rails.public_path). define formato usado respostas quando errors acontecem modo desenvolvimento. padrão :api aplicações somente :default aplicações regulares. classe usada detectar atualizações arquivos quando config.reload_classes_only_on_change está definido como true. rails distribuído classe activesupport::fileupdatechecker, padrão, activesupport::eventedfileupdatechecker (que depende listen). classes customizadas devem respeitar activesupport::fileupdatechecker. usado filtrar parâmetros você deseja exibir logs, tais como senhas números cartões crédito. essa configuração também filtra valores sensíveis colunas bancos dados quando método #inspect enviado objeto active record. padrão rails filtra senhas adicionar rails.application.config.filter_parameters [:password] config/initializers/filter_parameter_logging.rb. filtro parâmetros funciona através equivalência parcial expressões regulares. impõe todas requisições sejam tratadas através https define \"https://\" como protocolo padrão gerar urls. execução https manipulada pelo middleware actiondispatch::ssl, pode configurado através config.ssl_options veja documentação mais detalhes. define caminho onde javascript aplicação reside relação diretório app. padrão javascript, usado pelo webpacker. javascript_path configurado aplicação será excluído autoload_paths. define formatador logger rails. valor padrão instância activesupport::logger::simpleformatter todos ambientes. você definir valor config.logger você deve enviar valor formatador manualmente, antes seja acondicionado instância activesupport::taggedlogging, rails fará isso você. define verbosidade logger rails. padrão dessa opção :debug todos ambientes exceto produção, onde padrão :info. níveis disponíveis :debug, :info, :warn, :error, :fatal, :unknown. aceita lista mmétodos objeto request responde, proc aceita objeto request, algo responda método to_s. isto torna fácil adicionar linhas informações sobre debug, como subdomínios requisições ambos muito úteis debugar aplicações multi-usuário produção. logger será usado pelo rails.logger qualquer outro relacionado rails, como activerecord::base.logger. padrão instância activesupport::taggedlogging envolve instância activesupport::logger, registra saída diretório log/. você pode informar logger personalizado obter compatibilidade total você deve seguir esses requisitos: suportar formatador, você deve atribuir manualmente formatador definido config.log_formatter logger. suportar logs etiquetaas (tags), instância deve envolvida activesupport::taggedlogging suportar silenciamento, logger deve incluir módulo activesupport::loggersilence. classe activesupport::logger inclui esse módulo. permite configurar middleware aplicação. esse tópico coberto detalhes configurando middleware. quandotrue, carrega antecipadamente aplicação executar tarefas rake. padrão false. habilita desabilita recarga classes somente quando arquivos monitorados modificados. padrão monitorados todos caminhos auto carregamento (autoload). config.cache_classes está definido como true essa opção ignorada. configura caminho busca credenciais criptografadas. configura caminho busca chaves criptografia. usado especificar chave permite sessões aplicação sejam verificadas contra chave segura conhecida prevenindo falsificações (tampering). aplicações recebem chave gerada aleatoriamente ambientes desenvolvimento teste, outros ambientes devem definir chave config/credentials.yml.enc. inicialize chave mestre (master key) tiver sido disponibilizada através env[\"rails_master_key\"] arquivo config/master.key. configura rails servir arquivos estáticos partir diretório public. padrão true, ambiente produção definido como false porque software servidor (como nginx apache) usado executar aplicação deve servir arquivos estáticos. você esta executando testando aplicação produção usando webrick (não recomendado usar webrick produção) defina opção como true. outra forma, você será capaz usar cacheamento páginas requisições arquivos existam diretório public. define classe usar armazenar sessão. valores possíveis :cookie_store, padrão, :mem_cache_store :disabled. último indica rails deve tratar sessões. padrão armazena cookies nome aplicação como chave sessão. armazenadores personalizados sessão também podem definidos: define fuso horário aplicação torna active record ciente deste fuso horário."},{"id":71,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.2 Configuring Assets","content":"flag that controls whether asset pipeline enabled. true default. defines compressor use. default sass-rails. unique alternative value moment :yui, which uses yui-compressor gem. defines javascript compressor use. possible values :terser, :closure, :uglifier :yui which require terser, closure-compiler, uglifier yui-compressor gems respectively. flag that enables creation gzipped version compiled assets, along with non-gzipped assets. true default. contains paths which used look assets. appending paths this configuration option will cause those paths used search assets. allows specify additional assets (other than application.css application.js) which precompiled when rake assets:precompile run. allows modify behavior asset pipeline when asset pipeline, sprockets-rails 3.2.0 newer. defaults false. defines prefix where assets served from. defaults /assets. defines full path used asset precompiler's manifest file. defaults file named manifest-<random>.json config.assets.prefix directory within public folder. enables sha256 fingerprints asset names. true default. disables concatenation compression assets. true default development.rb. option string that used sha256 hash generation. this changed force files recompiled. boolean that used turn live sprockets compilation production. accepts logger conforming interface log4r default ruby logger class. defaults same configured config.logger. setting config.assets.logger false will turn served assets logging. disables logging assets requests. true default development.rb."},{"id":72,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.3 Configuring Generators","content":"rails allows alter what generators used with config.generators method. this method takes block: full methods that used this block follows:"},{"id":73,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.4 Configuring Middleware","content":"every rails application comes with standard middleware which uses this order development environment: prevents against rebinding other host header attacks. included development environment default with following configuration: other environments rails.application.config.hosts empty host header checks will done. want guard against header attacks production, have manually permit allowed hosts with: host request checked against hosts entries with case operator (#===), which lets hosts support entries type regexp, proc ipaddr name few. here example with regexp. provided regexp will wrapped with both anchors must match entire hostname. /product.com/, example, once anchored, would fail match www.product.com. special case supported that allows permit sub-domains: exclude certain requests from host authorization checks setting config.host_configuration.exclude: when request comes unauthorized host, default rack application will respond with forbidden. this customized setting config.host_configuration.response_app. example: forces every request served using https. enabled config.force_ssl true. options passed this configured setting config.ssl_options. used serve static assets. disabled config.public_file_server.enabled false. config.public_file_server.index_name need serve static directory index file that named index. example, serve main.html instead index.html directory requests, config.public_file_server.index_name \"main\". allows thread safe code reloading. disabled config.allow_concurrency false, which causes rack::lock loaded. rack::lock wraps mutex only called single thread time. serves basic memory backed cache. this cache thread safe intended only serving temporary memory cache single thread. sets x-runtime header, containing time seconds) taken execute request. notifies logs that request begun. after request complete, flushes logs. rescues exception returned application renders nice exception pages request local config.consider_all_requests_local true. config.action_dispatch.show_exceptions false, exceptions will raised regardless. makes unique x-request-id header available response enables actiondispatch::request#uuid method. configurable with config.action_dispatch.request_id_header. checks spoofing attacks gets valid client_ip from request headers. configurable with config.action_dispatch.ip_spoofing_check, config.action_dispatch.trusted_proxies options. intercepts responses whose body being served from file replaces with server specific x-sendfile header. configurable with config.action_dispatch.x_sendfile_header. runs prepare callbacks before serving request. sets cookies request. responsible storing session cookies. alternate middleware used this changing config.action_controller.session_store alternate value. additionally, options passed this configured using config.action_controller.session_options. sets flash keys. only available config.action_controller.session_store value. allows method overridden params[:_method] set. this middleware which supports patch, put, delete http method types. converts head requests requests serves them besides these usual middleware, your using config.middleware.use method: this will magical::unicorns middleware stack. insert_before wish middleware before another. insert middleware exact position using indexes. example, want insert magical::unicorns middleware stack, like there's also insert_after which will insert middleware after another: middlewares also completely swapped replaced with others: middlewares moved from place another: this will move magical::unicorns middleware before actiondispatch::flash. also move after: they also removed from stack completely:"},{"id":74,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.5 Configuring i18n","content":"these configuration options delegated i18n library. defines permitted available locales app. defaults locale keys found locale files, usually only application. sets default locale application used i18n. defaults :en. ensures that locales passed through i18n must declared available_locales list, raising i18n::invalidlocale exception when setting unavailable locale. defaults true. recommended disable this option unless strongly required, since this works security measure against setting invalid locale from user input. sets path rails uses look locale files. defaults config/locales/**/*.{yml,rb}. determines whether error should raised missing translations controllers views. this defaults false. sets fallback behavior missing translations. here usage examples this option:"},{"id":75,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.6 Configuring Active Model","content":"boolean value which controls whether full_message error format overridden attribute model level locale files. this false default."},{"id":76,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.7 Configuring Active Record","content":"config.active_record includes variety configuration options: accepts logger conforming interface log4r default ruby logger class, which then passed database connections made. retrieve this logger calling logger either active record model class active record model instance. disable logging. lets adjust naming primary columns. default, rails assumes that primary columns named (and this configuration option doesn't need set). there other choices: lets global string prepended table names. this northwest_, then customer class will look northwest_customers table. default empty string. lets global string appended table names. this _northwest, then customer class will look customers_northwest table. default empty string. lets string used name schema migrations table. lets string used name internal metadata table. lets array names environments where destructive actions should prohibited. specifies whether rails will look singular plural table names database. true (the default), then customer class will customers table. false, then customer class will customer table. determines whether time.local :local) time.utc :utc) when pulling dates times from database. default :utc. controls format dumping database schema file. options :ruby (the default) database-independent version that depends migrations, :sql (potentially database-dependent) statements. specifies error should raised order query ignored during batch query. options true (raise error) false (warn). default false. controls whether migrations numbered with serial integers with timestamps. default true, timestamps, which preferred there multiple developers working same application. controls whether active record will optimistic locking true default. controls format timestamp value cache key. default :usec. boolean value which controls whether timestamping create update operations model occur. default value true. boolean value controls whether partial writes used when creating records (i.e. whether inserts only attributes that different from default). default value true. boolean value controls whether partial writes used when updating existing records (i.e. whether updates only attributes that dirty). note that when using partial updates, should also optimistic locking config.active_record.lock_optimistically since concurrent updates write attributes based possibly stale read state. default value true. boolean value which controls whether active record should keep your test database schema up-to-date with db/schema.rb db/structure.sql) when your tests. default true. flag which controls whether schema dump should happen (db/schema.rb db/structure.sql) when migrations. this false config/environments/production.rb which generated rails. default value true this configuration set. controls which database schemas will dumped when calling db:schema:dump. options :schema_search_path (the default) which dumps schemas listed schema_search_path, :all which always dumps schemas regardless schema_search_path, string comma separated schemas. boolean value controls whether record fails validation belongs_to association present. enables raising logging exception strict_loading association. default value :raise environments. changed :log send violations logger instead raising. boolean value that either enables disables strict_loading mode default. defaults false. allows setting warning threshold query result size. number records returned query exceeds threshold, warning logged. this used identify queries which might causing memory bloat. allows errors nested has_many relationships displayed with index well error. defaults false. enables users schema cache information from db/schema_cache.yml (generated bin/rails db:schema:cache:dump), instead having send query database this information. defaults true. indicates whether stable #cache_key method that accompanied changing version #cache_version method. enables same cache reused when object being cached type activerecord::relation changes moving volatile information (max updated count) relation's cache into cache version support recycling cache key. enables setting inverse record when traversing belongs_to has_many associations. enables automatically inferring inverse_of associations with scope. allows enable connection handling api. applications using multiple databases, this provides support granular connection swapping. allows specifying that will used destroy associated records background. defaults activerecord::destroyassociationasyncjob. allows specifying active queue destroy jobs. when this option nil, purge jobs sent default active queue (see config.active_job.default_queue_name). defaults nil. when true, will always include column names select statements, avoid wildcard select from queries. this avoids prepared statement cache errors when adding columns postgresql database example. defaults false. ensures foreign constraints valid after fixtures loaded tests. supported postgresql sqlite only. defaults false. specifies whether enable adapter-level query comments. defaults false. define array specifying key/value tags inserted comment. defaults :application predefined returning application name. specifies whether enable caching query tags. applications that have large number queries, caching query tags provide performance benefit when context does change during lifetime request execution. defaults false. define list table that should ignored when generating schema cache. accepts array strings, representing table names, regular expressions. specifies source locations methods that call database queries should logged below relevant queries. default, flag true development false other environments. controls whether active record mysql adapter will consider tinyint(1) columns booleans. defaults true. controls whether database tables created postgresql should \"unlogged\", which speed performance adds risk data loss database crashes. highly recommended that enable this production environment. defaults false environments. controls what native type active record postgresql adapter should when call datetime migration schema. takes symbol which must correspond configured native_database_types. default :timestamp, meaning t.datetime migration will create \"timestamp without time zone\" column. \"timestamp with time zone\", change this :timestamptz initializer. should bin/rails db:migrate rebuild your schema.rb change this. accepts array tables that should included generated schema file. allows setting different regular expression that will used decide whether foreign key's name should dumped db/schema.rb not. default, foreign names starting with fk_rails_ exported database schema dump. defaults /^fk_rails_[0-9a-f]{10}$/."},{"id":77,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.8 Configuring Action Controller","content":"config.action_controller includes number configuration settings: sets host assets. useful when cdns used hosting assets rather than application server itself. should only this have different configuration action mailer, otherwise config.asset_host. configures whether application should perform caching features provided action controller component not. false development environment, true production. it's specified, default will true. configures extension used cached pages. defaults .html. configures whether view helpers available everywhere scoped corresponding controller. false, usershelper methods only available views rendered part userscontroller. true, usershelper methods available everywhere. default configuration behavior (when this option explicitly true false) that view helpers available each controller. accepts logger conforming interface log4r default ruby logger class, which then used information from action controller. disable logging. sets token parameter name requestforgery. calling protect_from_forgery sets :authenticity_token default. enables disables csrf protection. default this false test environment true other environments. configures whether http origin header should checked against site's origin additional csrf defense. configures whether csrf tokens only valid method/action they were generated for. determines whether forgery protection added actioncontroller::base. configures whether generated csrf tokens url-safe. used tell rails that deploying subdirectory. default env['rails_relative_url_root']. sets parameters mass assignment permitted default. default value false. controls behavior when parameters that explicitly permitted found. default value :log test development environments, false otherwise. values sets list permitted parameters that permitted default. default values ['controller', 'action']. determines whether fragment cache reads writes verbose format follows: default false which results following output: raises argumenterror when unpermitted open redirect occurs. default value false. determines whether controller context query tags will automatically updated around_filter. default value true. configures paramswrapper wrap json request default. configures paramswrapper. this called level, individual controllers."},{"id":78,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.9 Configuring Action Dispatch","content":"sets name store session data. default :cookie_store; other valid options include :active_record_store, :mem_cache_store name your custom class. hash with http headers that default each response. default, this defined specifies default character renders. defaults nil. sets (top-level domain) length application. defaults used determine whether ignore accept headers from request. defaults false. specifies server specific x-sendfile header. this useful accelerated file sending from server. example 'x-sendfile' apache. sets http auth salt value. defaults 'http authentication'. sets signed cookies salt value. defaults 'signed cookie'. sets encrypted cookies salt value. defaults 'encrypted cookie'. sets signed encrypted cookies salt value. defaults 'signed encrypted cookie'. sets authenticated encrypted cookie salt. defaults 'authenticated encrypted cookie'. sets cipher used encrypted cookies. this defaults \"aes-256-gcm\". sets digest used signed cookies. this defaults \"sha1\". allows rotating secrets, ciphers, digests encrypted signed cookies. controls whether signed encrypted cookies aes-256-gcm cipher older aes-256-cbc cipher. defaults true. enables writing cookies with purpose metadata embedded. defaults true. configures whether deep_munge method should performed parameters. security guide more information. defaults true. configures what exceptions assigned http status. accepts hash specify pairs exception/status. default, this defined exceptions that configured will mapped internal server error. change return value actiondispatch::request#content_type content-type header without modification. configures default value samesite attribute when setting cookies. when nil, samesite attribute added. allow value samesite attribute configured dynamically based request, proc specified. example: configures default http status code used when redirecting non-get/head requests from http https actiondispatch::ssl middleware. defaults defined https://tools.ietf.org/html/rfc7538. enables logging those unhandled exceptions configured rescue_responses. defaults true. takes block code before request. takes block code after request."},{"id":79,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.10 Configuring Action View","content":"config.action_view includes small number configuration settings: controls whether templates should reloaded each request. defaults whatever config.cache_classes. provides html generator displaying errors that come from active model. block evaluated within context action view template. default tells rails which form builder default. default actionview::helpers::formbuilder. want your form builder class loaded after initialization it's reloaded each request development), pass string. accepts logger conforming interface log4r default ruby logger class, which then used information from action view. disable logging. gives trim mode used erb. defaults '-', which turns trimming tail spaces newline when using =%>. erubis documentation more information. compiles template with frozen_string_literal: true magic comment, making string literals frozen saving allocations. true enable views. allows default behavior authenticity_token forms with remote: true. default it's false, which means that remote forms will include authenticity_token, which helpful when you're fragment-caching form. remote forms authenticity from meta tag, embedding unnecessary unless support browsers without javascript. such case either pass authenticity_token: true form option this config setting true. determines whether partials looked from subdirectory templates rendered from namespaced controllers. example, consider controller named admin::articlescontroller which renders this template: default setting true, which uses partial /admin/articles/_article.erb. setting value false would render /articles/_article.erb, which same behavior rendering from non-namespaced controller such articlescontroller. determines whether submit_tag should automatically disable click, this defaults true. determines whether wrap missing translations <span> not. this defaults true. determines whether form_with generates remote forms not. determines whether form_with generates inputs. determines whether forms generated with hidden that forces older versions internet explorer submit forms encoded utf-8. this defaults false. specifies default value loading attribute <img> tags rendered image_tag helper. example, when \"lazy\", <img> tags rendered image_tag will include loading=\"lazy\", which instructs browser wait until image near viewport load (this value still overridden image passing e.g. loading: \"eager\" image_tag.) defaults nil. specifies default value decoding attribute <img> tags rendered image_tag helper. defaults nil. determines whether annotate rendered view with template file names. this defaults false. determines whether javascript_include_tag stylesheet_link_tag will generate link header that preload assets. determines whether button_to will render <button> element, regardless whether content passed first argument block. determines whether stylesheet_link_tag will render screen default value attribute media when it's provided."},{"id":80,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.11 Configuring Action Mailbox","content":"config.action_mailbox provides following configuration options: contains logger used action mailbox. accepts logger conforming interface log4r default ruby logger class. default rails.logger. accepts activesupport::duration indicating long after processing actionmailbox::inboundemail records should destroyed. defaults 30.days. accepts symbol indicating active queue incineration jobs. when this option nil, incineration jobs sent default active queue (see config.active_job.default_queue_name). accepts symbol indicating active queue routing jobs. when this option nil, routing jobs sent default active queue (see config.active_job.default_queue_name). accepts symbol indicating active storage service uploading emails. when this option nil, emails uploaded default active storage service (see config.active_storage.service)."},{"id":81,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.12 Configuring Action Mailer","content":"there number settings available config.action_mailer: sets host assets. useful when cdns used hosting assets rather than application server itself. should only this have different configuration action controller, otherwise config.asset_host. accepts logger conforming interface log4r default ruby logger class, which then used information from action mailer. disable logging. allows detailed configuration :smtp delivery method. accepts hash options, which include these options: additionally, possible pass configuration option mail::smtp respects. allows configure both :open_timeout :read_timeout values :smtp delivery method. allows detailed configuration sendmail delivery method. accepts hash options, which include these options: specifies whether raise error email delivery cannot completed. defaults true. defines delivery method defaults :smtp. configuration section action mailer guide more info. specifies whether mail will actually delivered true default. convenient false testing. configures action mailer defaults. options like from reply_to every mailer. these default assign hash additional options: registers observers which will notified when mail delivered. registers interceptors which will called before mail sent. registers interceptors which will called before mail previewed. specifies location mailer previews. enable disable mailer previews. default this true development. specifies active queue delivery jobs. when this option nil, delivery jobs sent default active queue (see config.active_job.default_queue_name). make sure that your active adapter also configured process specified queue, otherwise delivery jobs silently ignored. specifies whether mailer templates should perform fragment caching not. it's specified, default will true. specifies delivery mail."},{"id":82,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.13 Configuring Active Support","content":"there configuration options available active support: enables disables loading active_support/all when booting rails. defaults nil, which means active_support/all loaded. sets order which test cases executed. possible values :random :sorted. defaults :random. enables disables escaping html entities json serialization. defaults true. enables disables serializing dates format. defaults true. sets precision json encoded time values. defaults allows configuring digest class generate non-sensitive digests, such etag header. allows configuring digest class derive secrets from configured secret base, such encrypted cookies. specifies whether aes-256-gcm authenticated encryption default cipher encrypting messages instead aes-256-cbc. specifies which version cache serializer use. possible values 7.0. configures behavior deprecation warnings. options :raise, :stderr, :log, :notify, :silence. default :stderr. alternatively, activesupport::deprecation.behavior. configures behavior disallowed deprecation warnings. options :raise, :stderr, :log, :notify, :silence. default :raise. alternatively, activesupport::deprecation.disallowed_behavior. configures deprecation warnings that application considers disallowed. this allows, example, specific deprecations treated hard failures. alternatively, activesupport::deprecation.disallowed_warnings. allows disable deprecation warnings (including disallowed deprecations); makes activesupport::deprecation.warn no-op. this enabled default production. configures locality most rails internal state. fiber based server processor (e.g. falcon), should :fiber. otherwise best :thread locality. specifies whether generated namespaced uuids follow standard namespace provided string digest::uuid.uuid_v3 digest::uuid.uuid_v5 method calls. true: false: default value true apps. upgraded apps will have that value false backwards-compatibility. configure test suite call rails.application.executor.wrap around test cases. this makes test cases behave closer actual request job. several features that normally disabled test, such active record query cache asynchronous queries will then enabled. disables override #to_s methods some ruby core classes. this config applications that want take advantage early ruby optimization. this configuration needs config/application.rb inside application class, otherwise will take effect. false disable ability silence logging block. default true. specifies logger within cache store operations. configures activesupport::timezone.utc_to_local return time with offset instead time incorporating that offset."},{"id":83,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.14 Configuring Active Job","content":"config.active_job provides following configuration options: sets adapter queuing backend. default adapter :async. up-to-date list built-in adapters activejob::queueadapters documentation. used change default queue name. default this \"default\". allows optional, non-blank, queue name prefix jobs. default blank used. following configuration would queue given production_high_priority queue when production: default value '_'. queue_name_prefix set, then queue_name_delimiter joins prefix non-prefixed queue name. following configuration would queue provided video_server.low_priority queue: accepts logger conforming interface log4r default ruby logger class, which then used information from active job. retrieve this logger calling logger either active class active instance. disable logging. allows custom argument serializers. defaults controls arguments logged. defaults true. controls amount \"jitter\" (random variation) applied delay time calculated when retrying failed jobs. determines whether context query tags will automatically updated around_perform. default value true."},{"id":84,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.15 Configuring Action Cable","content":"accepts string where hosting your action cable server. would this option running action cable servers that separated from your main application. accepts string where mount action cable, part main server process. defaults /cable. this mount action cable part your normal rails server. find more detailed configuration options action cable overview."},{"id":85,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.16 Configuring Active Storage","content":"config.active_storage provides following configuration options: accepts symbol :mini_magick :vips, specifying whether variant transformations blob analysis will performed with minimagick ruby-vips. default :mini_magick. accepts array classes indicating analyzers available active storage blobs. default, this defined image analyzers extract width height image blob; video analyzer extract width, height, duration, angle, aspect ratio presence/absence video/audio channels video blob; audio analyzer extract duration rate audio blob. accepts array classes indicating image previewers available active storage blobs. default, this defined popplerpdfpreviewer mupdfpreviewer generate thumbnail from first page blob; videopreviewer from relevant frame video blob. accepts hash options indicating locations previewer/analyzer commands. default meaning commands will looked default path. include these options: accepts array strings indicating content types that active storage transform through imagemagick. default, this defined accepts array strings regarded image content types which variants processed without being converted fallback format. want webp avif variants your application image/webp image/avif this array. default, this defined accepts array strings indicating content types that active storage will always serve attachment, rather than inline. default, this defined accepts array strings indicating content types that active storage allows serve inline. default, this defined since rails active storage will warn invalid content type that incorrectly supported rails this config turn warning off. accepts symbol indicating active queue analysis jobs. when this option nil, analysis jobs sent default active queue (see config.active_job.default_queue_name). accepts symbol indicating active queue purge jobs. when this option nil, purge jobs sent default active queue (see config.active_job.default_queue_name). accepts symbol indicating active queue direct upload mirroring jobs. when this option nil, mirroring jobs sent default active queue (see config.active_job.default_queue_name). default nil. used logger used active storage. accepts logger conforming interface log4r default ruby logger class. determines default expiry urls generated default minutes. determines default expiry urls rails application generated active storage. default nil. used route prefix routes served active storage. accepts string that will prepended generated routes. default /rails/active_storage. determines whether assigning collection attachments declared with has_many_attached replaces existing attachments appends them. default true. determines whether variants recorded database. default true. used toggle active storage route generation. default true. used globally change active storage files delivered. allowed values are: default :rails_storage_redirect. used alter ffmpeg generates video preview images. default, this defined rails beyond, active storage has_many_attached relationships will default replacing current collection instead appending support submitting empty collection, render auxiliary hidden field similar action view form builder render checkbox elements."},{"id":86,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.17 Configuring Action Text","content":"accepts string html used wrap attachments. defaults \"action-text-attachment\"."},{"id":87,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.18 Results of config.load_defaults","content":"config.load_defaults sets defaults including version passed. such that passing, say, also gets defaults from every version before"},{"id":88,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.19 Configuring a Database","content":"just about every rails application will interact with database. connect database setting environment variable env['database_url'] using configuration file called config/database.yml. using config/database.yml file specify information needed access your database: this will connect database named blog_development using postgresql adapter. this same information stored provided environment variable like this: config/database.yml file contains sections three different environments which rails default: wish, manually specify inside your config/database.yml config/database.yml file contain tags anything tags will evaluated ruby code. this pull data from environment variable perform calculations generate needed connection information."},{"id":89,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.20 Connection Preference","content":"since there ways configure your connection (using config/database.yml using environment variable) important understand they interact. have empty config/database.yml file your env['database_url'] present, then rails will connect database your environment variable: have config/database.yml env['database_url'] then this file will used connect your database: have both config/database.yml env['database_url'] then rails will merge configuration together. better understand this must some examples. when duplicate connection information provided environment variable will take precedence: here adapter, host, database match information env['database_url']. non-duplicate information provided will unique values, environment variable still takes precedence cases conflicts. since pool env['database_url'] provided connection information information merged since adapter duplicate, env['database_url'] connection information wins. only explicitly connection information env['database_url'] specify explicit connection using \"url\" key: here connection information env['database_url'] ignored, note different adapter database name. since possible embed your config/database.yml best practice explicitly show using env['database_url'] connect your database. this especially useful production since should commit secrets like your database password into your source control (such git). behavior clear, that only using connection information env['database_url']. rails comes with built-in support sqlite3, which lightweight serverless database application. while busy production environment overload sqlite, works well development testing. rails defaults using sqlite database when creating project, always change later. here's section default configuration file (config/database.yml) with connection information development environment: choose mysql mariadb instead shipped sqlite3 database, your config/database.yml will look little different. here's development section: your development database root user with empty password, this configuration should work you. otherwise, change username password development section appropriate. advisory locks enabled default mysql used make database migrations concurrent safe. disable advisory locks setting advisory_locks false: choose postgresql, your config/database.yml will customized postgresql databases: default active record uses database features like prepared statements advisory locks. might need disable those features you're using external connection pooler like pgbouncer: enabled, active record will create prepared statements database connection default. modify this behavior statement_limit different value: more prepared statements use: more memory your database will require. your postgresql database hitting memory limits, lowering statement_limit disabling prepared statements. choose sqlite3 using jruby, your config/database.yml will look little different. here's development section: choose mysql mariadb using jruby, your config/database.yml will look little different. here's development section: choose postgresql using jruby, your config/database.yml will look little different. here's development section: change username password development section appropriate. default rails will store information about your rails environment schema internal table named ar_internal_metadata. turn this connection, use_metadata_table your database configuration. this useful when working with shared database and/or database user that cannot create tables."},{"id":90,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.21 Creating Rails Environments","content":"default rails ships with three environments: \"development\", \"test\", \"production\". while these sufficient most cases, there circumstances when want more environments. imagine have server which mirrors production environment only used testing. such server commonly called \"staging server\". define environment called \"staging\" this server, just create file called config/environments/staging.rb. please contents existing file config/environments starting point make necessary changes from there. that environment different than default ones, start server with bin/rails server staging, console with bin/rails console staging, rails.env.staging? works, etc."},{"id":91,"title":"Configurando Aplicações Rails","heading":"3 Configurando Componentes Rails","subheading":"3.22 Deploy to a Subdirectory (relative URL root)","content":"default rails expects that your application running root (e.g. this section explains your application inside directory. let's assume want deploy application \"/app1\". rails needs know this directory generate appropriate routes: alternatively rails_relative_url_root environment variable. rails will prepend \"/app1\" when generating links. passenger makes easy your application subdirectory. find relevant configuration passenger manual. deploying your application using reverse proxy definite advantages over traditional deploys. they allow have more control over your server layering components required your application. many modern servers used proxy server balance third-party elements such caching servers application servers. such application server unicorn behind reverse proxy. this case, would need configure proxy server (nginx, apache, etc) accept connections from your application server (unicorn). default unicorn will listen connections port 8080, change port configure sockets instead. find more information unicorn readme understand philosophy behind once you've configured application server, must proxy requests configuring your server appropriately. example your nginx config include: sure read nginx documentation most up-to-date information. some parts rails also configured externally supplying environment variables. following environment variables recognized various parts rails: after loading framework gems your application, rails turns loading initializers. initializer ruby file stored under config/initializers your application. initializers hold configuration settings that should made after frameworks gems loaded, such options configure settings these parts. files config/initializers (and subdirectories config/initializers) sorted loaded part load_config_initializers initializer. initializer code that relies code another initializer, combine them into single initializer instead. this makes dependencies more explicit, help surface concepts within your application. rails also supports numbering initializer file names, this lead file name churn. explicitly loading initializers with require recommended, since will cause initializer loaded twice. rails initialization events which hooked into (listed order that they run): define event these hooks, block syntax within rails::application, rails::railtie rails::engine subclass: alternatively, also through config method rails.application object:"},{"id":92,"title":"Configurando Aplicações Rails","heading":"6 Initialization events","subheading":"6.1 Rails::Railtie#initializer","content":"rails several initializers that startup that defined using initializer method from rails::railtie. here's example set_helpers_path initializer from action controller: initializer method takes three arguments with first being name initializer second being options hash (not shown here) third being block. :before options hash specified specify which initializer this initializer must before, :after will specify which initializer this initializer after. initializers defined using initializer method will order they defined with exception ones that :before :after methods. block argument initializer method instance application itself, access configuration using config method done example. because rails::application inherits from rails::railtie (indirectly), initializer method config/application.rb define initializers application."},{"id":93,"title":"Configurando Aplicações Rails","heading":"6 Initialization events","subheading":"6.2 Initializers","content":"below comprehensive list initializers found rails order that they defined (and therefore unless otherwise stated). active record database connections managed activerecord::connectionadapters::connectionpool which ensures that connection pool synchronizes amount thread access limited number database connections. this limit defaults configured database.yml. since connection pooling handled inside active record default, application servers (thin, puma, unicorn, etc.) should behave same. database connection pool initially empty. demand connections increases will create them until reaches connection pool limit. request will check connection first time requires access database. request will check connection back this means that additional connection slot will available again next request queue. more connections than available, active record will block wait connection from pool. cannot connection, timeout error similar that given below will thrown. above error, might want increase size connection pool incrementing pool option database.yml configure your code through rails configuration object with custom configuration under either config.x namespace, config directly. difference between these that should using config.x defining nested configuration (ex: config.x.nested.hi), just config single level configuration (ex: config.hello). these configuration points then available through configuration object: also rails::application.config_for load whole configuration files: rails::application.config_for supports shared configuration group common configurations. shared configuration will merged into environment configuration. sometimes, want prevent some pages your application visible search sites like google, bing, yahoo, duck duck robots that index these sites will first analyze http://your-site.com/robots.txt file know which pages allowed index. rails creates this file inside /public folder. default, allows search engines index pages your application. want block indexing pages your application, this: block just specific pages, it's necessary more complex syntax. learn official documentation. listen loaded rails uses evented file system monitor detect changes when config.cache_classes false: otherwise, every request rails walks application tree check anything changed. linux macos additional gems needed, some required *bsd windows. note that some setups unsupported. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":94,"title":"Auto Carregamento e Recarregamento de Constantes","heading":"1 Introdução","subheading":"1 Introdução","content":"programa ruby normal, dependências precisam carregadas forma manual. exemplo, controller seguir utiliza classes applicationcontroller post, normalmente você precisaria colocar alguns require utilizá-los: isso necessário aplicações rails, onde classes módulos aplicação estão disponíveis todo canto. comumente, aplicações rails utilizam require carregar coisas pasta lib, biblioteca padrão ruby, ruby gems, etc. seja, qualquer coisa esteja presente caminhos auto carregamento, explicado seguir. fornecer esse recurso, rails gerencia alguns carregadores zeitwerk nome. aplicação rails, nomes arquivos precisam corresponder constantes definem, diretórios agindo como namespaces. exemplo, arquivo app/helpers/users_helper.rb deve definir usershelper arquivo app/controllers/admin/payments_controller.rb deve definir admin::paymentscontroller. padrão rails configura zeitwerk inflexionar nomes arquivos string#camelize. exemplo, esperado app/controllers/users_controller.rb defina constante userscontroller pois seção customizando inflexões abaixo documenta maneiras sobrescrever esse comportamento padrão. favor, verifique documentação zeitwerk mais detalhes. referimo-nos lista diretórios aplicações cujos conteúdos devem carregados automaticamente (opcionalmente) recarregados como caminhos carregamento automático. exemplo, app/models. esses diretórios representam namespace raiz: object. dentro caminho carregamento automático, nomes arquivos devem corresponder constantes eles definem conforme documentado aqui. padrão, caminhos carregamento automático aplicação consistem todos subdiretórios existem quando aplicativo inicializado exceto assets, javascript views, mais caminhos carregamento automático engines podem. exemplo, usershelper implementado app/helpers/users_helper.rb, módulo auto carregado, você precisa deve escrever) chamada require ele: rails adiciona diretórios personalizados caminhos carregamento automático automaticamente. exemplo, aplicativo tiver app/presenters, você precisa configurar nada carregar automaticamente pasta, funciona imediatamente. array caminhos autoload padrão pode estendido configurando config.autoload_paths, config/application.rb config/environments/*.rb. exemplo: além disso, engines podem enviar corpo classe próprio config/environments/*.rb. caminhos carregamento automático gerenciados pelo autoloader rails.autoloaders.main. want able autoload classes modules without reloading them. autoload once paths store code that autoloaded, won't reloaded. default, this collection empty, extend pushing config.autoload_once_paths. config/application.rb config/environments/*.rb. example: also, engines push body engine class their config/environments/*.rb. this classes modules that cached places that survive reloads, like rails framework itself. example, active serializers stored inside active job: active itself reloaded when there's reload, only application engines code autoload paths making moneyserializer reloadable would confusing, because reloading edited version would have effect that class object stored active job. indeed, moneyserializer reloadable, starting with rails such initializer would raise nameerror. another case engines decorating framework classes: there, module object stored mydecoration time initializer runs becomes ancestor actioncontroller::base, reloading mydecoration pointless, won't affect that ancestor chain. classes modules from autoload once paths autoloaded config/initializers. with that configuration this works: autoload once paths managed rails.autoloaders.once. caminhos carregamento automático adicionados $load_path padrão. entanto, zeitwerk nomes arquivo absolutos internamente, aplicação deve emitir chamadas require arquivos carregáveis ​​automaticamente, então esses diretórios realmente necessários você pode cancelar este sinalizador: isso pode acelerar pouco chamadas require legítimas, menos pesquisas. além disso, aplicativo bootsnap, isso evita biblioteca crie índices desnecessários economiza necessária. rails automatically reloads classes modules application files change. more precisely, server running application files have been modified, rails unloads autoloaded constants just before next request processed. that way, application classes modules used during that request going autoloaded, thus picking their current implementation file system. reloading enabled disabled. setting that controls this behavior config.cache_classes, which false default development mode (reloading enabled), true default production mode (reloading disabled). rails uses evented file monitor detect files changes default. configured instead detect file changes walking autoload paths. this controlled config.file_watcher setting. rails console there file watcher active regardless value config.cache_classes. this because, normally, would confusing have code reloaded middle console session. similar individual request, generally want console session served consistent, non-changing application classes modules. however, force reload console executing reload!: see, class object stored user constant different after reloading."},{"id":95,"title":"Auto Carregamento e Recarregamento de Constantes","heading":"6 Reloading","subheading":"6.1 Reloading and Stale Objects","content":"very important understand that ruby does have truly reload classes modules memory, have that reflected everywhere they already used. technically, \"unloading\" user class means removing user constant object.send(:remove_const, \"user\"). example, check this rails console session: instance original user class. when there reload, user constant then evaluates different, reloaded class. alice instance newly loaded user, class stale. define again, start subsession, just launch console instead calling reload!. another situation which find this gotcha subclassing reloadable classes place that reloaded: user reloaded, since vipuser not, superclass vipuser original stale class object. bottom line: cache reloadable classes modules. while booting, applications autoload from autoload once paths, which managed once autoloader. please check section config.autoload_once_paths above. however, cannot autoload from autoload paths, which managed main autoloader. this applies code config/initializers well application engines initializers. why? initializers only once, when application boots. reboot server, they again process, reloading does reboot server, initializers don't again. let's main cases."},{"id":96,"title":"Auto Carregamento e Recarregamento de Constantes","heading":"7 Autoloading when the application boots","subheading":"7.1 Use case 1: During boot, load reloadable code","content":"let's imagine apigateway reloadable class from app/services managed main autoloader need configure endpoint while application boots: reloaded apigateway would have endpoint, because code above does again. still things during boot, need wrap them to_prepare block, which runs boot, after each reload:"},{"id":97,"title":"Auto Carregamento e Recarregamento de Constantes","heading":"7 Autoloading when the application boots","subheading":"7.2 Use case 2: During boot, load code that remains cached","content":"some configurations take class module object, they store place that reloaded. example middleware: when reload, middleware stack affected, whatever object stored myapp::middleware::foo boot time remains there stale. another example active serializers: whatever moneyserializer evaluates during initialization gets pushed custom serializers. that reloadable, initial object would still within active job, reflecting your changes. another example railties engines decorating framework classes including modules. instance, turbo-rails decorates activerecord::base this way: that adds module object ancestor chain activerecord::base. changes turbo::broadcastable would have effect reloaded, ancestor chain would still have original one. corollary: those classes modules cannot reloadable. easiest refer those classes modules during boot have them defined directory which does belong autoload paths. instance, idiomatic choice. does belong autoload paths default, does belong $load_path. just perform regular require load noted above, another option have directory that defines them autoload once paths autoload. please check section about config.autoload_once_paths details. production-like environments generally better load application code when application boots. eager loading puts everything memory ready serve requests right away, also cow-friendly. eager loading controlled flag config.eager_load, which enabled default production mode. order which files eager-loaded undefined. zeitwerk constant defined, rails invokes zeitwerk::loader.eager_load_all regardless application autoloading mode. that ensures dependencies managed zeitwerk eager-loaded. single table inheritance feature that doesn't play well with lazy loading. reason generally needs able enumerate hierarchy work correctly, whereas lazy loading defers loading classes until they referenced. can't enumerate what haven't referenced yet. sense, applications need eager load hierarchies regardless loading mode. course, application eager loads boot, that already accomplished. when does not, practice enough instantiate existing types database, which development test modes usually fine. that include preloading module your directory: then include root classes your project: default, rails uses string#camelize know which constant given file directory name should define. example, posts_controller.rb should define postscontroller because that what \"posts_controller\".camelize returns. could case that some particular file directory name does inflected want. instance, html_parser.rb expected define htmlparser default. what prefer class htmlparser? there ways customize this. easiest define acronyms config/initializers/inflections.rb: doing affects active support inflects globally. that fine some applications, also customize camelize individual basenames independently from active support passing collection overrides default inflectors: that technique still depends string#camelize, though, because that what default inflectors fallback. instead prefer depend active support inflections have absolute control over inflections, configure inflectors instances zeitwerk::inflector: there global configuration that affect said instances; they deterministic. even define custom inflector full flexibility. please check zeitwerk documentation further details. engines context parent application, their code autoloaded, reloaded, eager loaded parent application. application runs zeitwerk mode, engine code loaded zeitwerk mode. application runs classic mode, engine code loaded classic mode. when rails boots, engine directories added autoload paths, from point view autoloader, there's difference. autoloaders' main input autoload paths, whether they belong application source tree some engine source tree irrelevant. example, this application uses devise: engine controls autoloading mode parent application, engine written usual. however, engine supports rails rails does control parent applications, ready under either classic zeitwerk mode. things take into account:"},{"id":98,"title":"Auto Carregamento e Recarregamento de Constantes","heading":"12 Testing","subheading":"12.1 Manual Testing","content":"task zeitwerk:check checks project tree follows expected naming conventions handy manual checks. example, you're migrating from classic zeitwerk mode, you're fixing something: there additional output depending application configuration, last \"all good!\" what looking for."},{"id":99,"title":"Auto Carregamento e Recarregamento de Constantes","heading":"12 Testing","subheading":"12.2 Automated Testing","content":"good practice verify test suite that project eager loads correctly. that covers zeitwerk naming compliance other possible error conditions. please check section about testing eager loading testing rails applications guide. best follow what loaders doing inspect their activity. easiest that include config/application.rb after loading framework defaults. that will print traces standard output. prefer logging file, configure this instead: rails logger available when config/application.rb executes. prefer rails logger, configure this setting initializer instead: zeitwerk instances managing your application available predicate still available rails applications, returns true. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":100,"title":"Ruby on Rails 5.0 Release Notes","heading":"1 Upgrading to Rails 5.0","subheading":"1 Upgrading to Rails 5.0","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting update rails 5.0. list things watch when upgrading available upgrading ruby rails guide."},{"id":101,"title":"Ruby on Rails 5.0 Release Notes","heading":"2 Major Features","subheading":"2.1 Action Cable","content":"action cable framework rails seamlessly integrates websockets with rest your rails application. action cable allows real-time features written ruby same style form rest your rails application, while still being performant scalable. it's full-stack offering that provides both client-side javascript framework server-side ruby framework. have access your full domain model written with active record your choice. action cable overview guide more information."},{"id":102,"title":"Ruby on Rails 5.0 Release Notes","heading":"2 Major Features","subheading":"2.2 API Applications","content":"rails used create slimmed down only applications. this useful creating serving apis similar twitter github api, that used serve public-facing, well custom applications. generate rails using: this will three main things: application provides base apis, that then configured pull functionality suitable application's needs. using rails api-only applications guide more information."},{"id":103,"title":"Ruby on Rails 5.0 Release Notes","heading":"2 Major Features","subheading":"2.3 Active Record attributes API","content":"defines attribute with type model. will override type existing attributes needed. this allows control over values converted from when assigned model. also changes behavior values passed activerecord::base.where, which let's domain objects across much active record, without having rely implementation details monkey patching. some things that achieve with this: creating custom types: define your custom types, long they respond methods defined value type. method deserialize cast will called your type object, with input from database from your controllers. this useful, example, when doing custom conversion, like money data. querying: when activerecord::base.where called, will type defined model class convert value sql, calling serialize your type object. this gives objects ability specify, convert values when performing queries. dirty tracking: type attribute allowed change dirty tracking performed. documentation detailed write"},{"id":104,"title":"Ruby on Rails 5.0 Release Notes","heading":"2 Major Features","subheading":"2.4 Test Runner","content":"test runner been introduced enhance capabilities running tests from rails. this test runner simply type bin/rails test. test runner inspired rspec, minitest-reporters, maxitest others. includes some these notable advancements: please refer changelog detailed changes."},{"id":105,"title":"Ruby on Rails 5.0 Release Notes","heading":"3 Railties","subheading":"3.1 Removals","content":""},{"id":106,"title":"Ruby on Rails 5.0 Release Notes","heading":"3 Railties","subheading":"3.2 Deprecations","content":""},{"id":107,"title":"Ruby on Rails 5.0 Release Notes","heading":"3 Railties","subheading":"3.3 Notable changes","content":"please refer changelog detailed changes."},{"id":108,"title":"Ruby on Rails 5.0 Release Notes","heading":"4 Action Pack","subheading":"4.1 Removals","content":""},{"id":109,"title":"Ruby on Rails 5.0 Release Notes","heading":"4 Action Pack","subheading":"4.2 Deprecations","content":""},{"id":110,"title":"Ruby on Rails 5.0 Release Notes","heading":"4 Action Pack","subheading":"4.3 Notable changes","content":"please refer changelog detailed changes."},{"id":111,"title":"Ruby on Rails 5.0 Release Notes","heading":"5 Action View","subheading":"5.1 Removals","content":""},{"id":112,"title":"Ruby on Rails 5.0 Release Notes","heading":"5 Action View","subheading":"5.2 Notable Changes","content":"please refer changelog detailed changes."},{"id":113,"title":"Ruby on Rails 5.0 Release Notes","heading":"6 Action Mailer","subheading":"6.1 Removals","content":""},{"id":114,"title":"Ruby on Rails 5.0 Release Notes","heading":"6 Action Mailer","subheading":"6.2 Notable changes","content":"please refer changelog detailed changes."},{"id":115,"title":"Ruby on Rails 5.0 Release Notes","heading":"7 Active Record","subheading":"7.1 Removals","content":""},{"id":116,"title":"Ruby on Rails 5.0 Release Notes","heading":"7 Active Record","subheading":"7.2 Deprecations","content":""},{"id":117,"title":"Ruby on Rails 5.0 Release Notes","heading":"7 Active Record","subheading":"7.3 Notable changes","content":"please refer changelog detailed changes."},{"id":118,"title":"Ruby on Rails 5.0 Release Notes","heading":"8 Active Model","subheading":"8.1 Removals","content":""},{"id":119,"title":"Ruby on Rails 5.0 Release Notes","heading":"8 Active Model","subheading":"8.2 Deprecations","content":""},{"id":120,"title":"Ruby on Rails 5.0 Release Notes","heading":"8 Active Model","subheading":"8.3 Notable changes","content":"please refer changelog detailed changes."},{"id":121,"title":"Ruby on Rails 5.0 Release Notes","heading":"9 Active Job","subheading":"9.1 Notable changes","content":"please refer changelog detailed changes."},{"id":122,"title":"Ruby on Rails 5.0 Release Notes","heading":"10 Active Support","subheading":"10.1 Removals","content":""},{"id":123,"title":"Ruby on Rails 5.0 Release Notes","heading":"10 Active Support","subheading":"10.2 Deprecations","content":""},{"id":124,"title":"Ruby on Rails 5.0 Release Notes","heading":"10 Active Support","subheading":"10.3 Notable changes","content":"full list contributors rails many people spent many hours making rails, stable robust framework kudos them. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":125,"title":"Action Text Overview","heading":"1 What is Action Text?","subheading":"1 What is Action Text?","content":"action text brings rich text content editing rails. includes trix editor that handles everything from formatting links quotes lists embedded images galleries. rich text content generated trix editor saved richtext model that's associated with existing active record model application. embedded images other attachments) automatically stored using active storage associated with included richtext model. most wysiwyg editors wrappers around html’s contenteditable execcommand apis, designed microsoft support live editing pages internet explorer 5.5, eventually reverse-engineered copied other browsers. because these apis were never fully specified documented, because wysiwyg html editors enormous scope, each browser's implementation bugs quirks, javascript developers left resolve inconsistencies. trix sidesteps these inconsistencies treating contenteditable device: when input makes editor, trix converts that input into editing operation internal document model, then re-renders that document back into editor. this gives trix complete control over what happens after every keystroke, avoids need execcommand all. bin/rails action_text:install yarn package copy over necessary migration. also, need active storage embedded images other attachments. please refer active storage overview guide. after installation complete, rails should have following changes: rich text field existing model: rich text field while creating model using: note: don't need content field your messages table. then rich_text_area refer this field form model: finally, display sanitized rich text page: accept rich text content, have permit referenced attribute: action text will sanitize render rich content your behalf. default, action text editor content styled trix defaults. want change these defaults, remove require \"actiontext.scss\" line from your application.scss omit contents that file. default, action text will render rich text content into element that declares .trix-content class: you'd like change rich text's surrounding html with your layout, declare your app/views/layouts/action_text/contents/_content.html.erb template call yield place content. also style html used embedded images other attachments (known blobs). installation, action text will copy over partial app/views/active_storage/blobs/_blob.html.erb, which specialize."},{"id":126,"title":"Action Text Overview","heading":"5 Rendering Rich Text content","subheading":"5.1 Rendering attachments","content":"addition attachments uploaded through active storage, action text embed anything that resolved signed globalid. action text renders embedded <action-text-attachment> elements resolving their sgid attribute into instance. once resolved, that instance passed along render. resulting html embedded descendant <action-text-attachment> element. example, consider user model: next, consider some rich text content that embeds <action-text-attachment> element that references user instance's signed globalid: action text resolves uses \"bah7cekicg…\" string resolve user instance. next, consider application's users/user partial: resulting html rendered action text would look something like: render different partial, define user#to_attachable_partial_path: then declare that partial. user instance will available user partial-local variable: integrate with action text <action-text-attachment> element rendering, class must: default, activerecord::base descendants mix-in globalid::identification concern, therefore actiontext::attachable compatible. wish preload dependent actiontext::richtext model, assuming your rich text field named content, named scope: this based basecamp, still can't find what looking for, check this basecamp doc. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":127,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1 O que é Active Model?","content":"active model biblioteca contém vários módulos utilizados desenvolvimento classes precisam algumas funções (features) existentes active record. alguns desses módulos serão explicados abaixo."},{"id":128,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.1 API","content":"activemodel::api adiciona capacidade classe trabalhar action pack action view. quando incluir activemodel::api você obtém recursos como: também oferece capacidade inicializar objeto hash atributos, muito parecido qualquer objeto active record. qualquer classe inclua activemodel::api pode usada form_with, render quaisquer outros métodos auxiliares action view, assim como objetos usam active record."},{"id":129,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.2 Métodos de Atributo","content":"activemodel::attributemethods, módulo pode adicionar prefixos sufixos customizados metodos classe. isso feito pela definição prefixos sufixos quais métodos objeto utilizá-los."},{"id":130,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.3 Callbacks","content":"activemodel::callbacks trazem callbacks padrão active record. isso provê habilidade definir callback rodará tempo apropriado. após definir callbacks, você pode envolvê-los métodos customizados antes, depois durante."},{"id":131,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.4 Conversão","content":"classe define métodos persisted? então você pode incluir módulo activemodel::conversion naquela classe chamar métodos conversão rails objetos daquela classe."},{"id":132,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.5 Sujeira","content":"objeto torna sujo quando passa mais mudanças seus atributos isso salvo. activemodel::dirty concede habilidade checar quando objeto alterado não. também possui atributos baseados métodos acesso. vamos considerar classe person atributos first_name last_name: rastreia atributo específico alterado não. rastreia valor anterior atributo. rastreia valores anterior atributo alterado. retorna array alterado; caso contrário, retorna nil."},{"id":133,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.6 Validações","content":"módulo activemodel::validations adiciona habilidade validar objetos como active record."},{"id":134,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.7 Nomeação","content":"activemodel::naming adiciona vários métodos classe tornam nomeação roteamento mais fácil administrar. módulo define método classe model_name definirá vários acessadores usando alguns métodos activesupport::inflector."},{"id":135,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.8 Model","content":"activemodel::model permite implementar models semelhantes activerecord::base incluir activemodel::model você obtém todos recursos activemodel::api."},{"id":136,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.9 Serialização","content":"activemodel::serialization fornece serialização básica objeto. você precisa declarar hash atributos contém atributos deseja serializar. atributos devem cadeias, símbolos. agora você pode acessar hash serializado objeto usando método serializable_hash. active model também fornece módulo activemodel::serializers::json serialização desserialização json. este módulo inclui automaticamente módulo activemodel::serialization discutido anteriormente. usar activemodel::serializers::json, você precisa alterar módulo você está incluindo activemodel::serialization paraactivemodel::serializers::json. método as_json, semelhante aoserializable_hash, fornece hash representando modelo. você também pode definir atributos modelo partir sequência json. entanto, você precisa definir método attribute= classe: agora possível criar instância person definir atributos usando from_json."},{"id":137,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.10 Tradução","content":"activemodel::translation fornece integração entre objeto rails internacionalização (i18n). método human_attribute_name, você pode transformar nomes atributos formato mais legível humanos. formato legível humanos definido seus arquivos localidade."},{"id":138,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.11 Testes de Lint","content":"activemodel::lint::tests permite testar objeto compatível model ativo. necessário objeto implementar todas apis trabalhar action pack. este módulo fornecer orientação caso você queira todos recursos prontos uso."},{"id":139,"title":"Básico do Active Model","heading":"1 O que é Active Model?","subheading":"1.12 SecurePassword","content":"activemodel::securepassword fornece maneira armazenar segurança qualquer senha forma criptografada. quando você inclui este módulo, fornecido método classe has_secure_password define acessador senha certas validações padrão. activemodel::securepassword depende bcrypt, portanto, inclua esta gemfile usar oactivemodel::securepassword corretamente. fazer isso funcionar, model deve acessador chamado xxx_digest. onde nome atributo senha desejada. seguintes validações adicionadas automaticamente: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":140,"title":"Começando a usar Action Mailer","heading":"1 O que é o Action Mailer?","subheading":"1 O que é o Action Mailer?","content":"action mailer permite você envie emails direto aplicação usando classes mailer views"},{"id":141,"title":"Começando a usar Action Mailer","heading":"1 O que é o Action Mailer?","subheading":"1.1 Mailers são semelhantes a controllers","content":"eles herdam actionmailer::base encontram app/mailers. mailers também funcionam maneira muito semelhante controllers. alguns exemplos semelhanças mostrados abaixo. mailers tem: esta seção guiar processo criação mailer view."},{"id":142,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.1 Passo a Passo para Gerar um Mailer","content":"como pôde exemplo acima, você pode gerar mailers como outros tipos arquivos rails. você prefere usar generator, você pode criar esses arquivos dentro app/mailers/, esqueça adicionar herança actionmailer::base mailers: mailers métodos chamados actions usam views estruturar conteúdo. onde controller gera conteúdo como html enviar volta cliente, mailer cria mensagem entregue e-mail. app/mailers/user_mailer.rb contém mailer vazio: vamos adicionar método chamado welcome_email, enviará e-mail endereço e-mail registrado pelo usuário. breve explicação sobre itens apresentados método acima. lista completa todas opções disponíveis, favor, olhada mais abaixo seção: lista completa atributos configuração action mailer. crie arquivo nome welcome_email.html.erb app/views/user_mailer/. este será modelo usaremos nosso e-mail, formatado usando html: vamos criar também modelo usando somente texto este e-mail. todos programas e-mail leem html, então enviar dois formatos prática. isto criaremos arquivo nome welcome_email.text.erb app/views/user_mailer/: quando você chamar método mail, actionmailer detectará existem dois modelos esse e-mail html outro somente texto) automaticamente gerar multipart/alternative (opção indica programa e-mail essa mensagem versão html outra somente texto) e-mail. mailers somente outra maneira renderizar view. invés renderizar view envia-la usando protocolo http, mailer envia através protocolos e-mail. esse motivo, sentido, exemplo anterior, controller informe mailer enviar mensagem assim usuário complete cadastro sucesso. configurar isto muito simples. primeiro, criaremos scaffold (esqueleto) nosso model user: agora temos model nossos usuários, podemos começar criar funcionalidade. isso vamos editar arquivo app/controllers/users_controller.rb chamar usermailer enviar e-mail novo usuário registrado. vamos editar action create inserindo seguinte chamada: usermailer.with(user: @user).welcome_email logo após usuário sido salvo sucesso. vamos enfileirar email enviado usando deliver_later, apoiado pelo active job. dessa forma, action controller pode continuar aguardando conclusão envio. você deseja e-mail sejam enviados mesmo tempo chamar mailer, simplesmente chame deliver_now: qualquer chave-valor passado with torna parte hash params será usado action mailer. então with(user: @user, account: @user.account) cria params[:user] params[:account] disponíveis action mailer. como acontece controllers também params. método welcome_email como retorno objeto tipo actionmailer::messagedelivery você pode encadear métodos deliver_now deliver_later assim enviar como e-mail. objeto actionmailer::messagedelivery wrapper (embrulho) classe mail::message. você quiser inspecionar, alterar, fazer qualquer coisa objeto mail::message você pode acessa-lo através método message objeto actionmailer::messagedelivery."},{"id":143,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.2 Codificação automática","content":"action mailer gerencia automaticamente codificação caracteres multibytes (caracteres asiáticos, emojis etc) dentro cabeçalho corpo. exemplos mais complexos como definir lista alternativa caracteres codificar texto maneira diferente, essa biblioteca como referência: mail."},{"id":144,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.3 Lista Completa de Métodos do Action Mailer","content":"existem apenas três métodos você precisa enviar qualquer mensagem e-mail: action mailer muito fácil trabalhar anexos. quando método mail invocado, enviará e-mail modo multipart anexo, corretamente configurado, sendo anexo primeira parte como multipart/mixed mensagem sendo segunda multipart/alternative texto html e-mail. action mailer cria anexos dentro mensagem e-mail, algo antes versão envolvia algumas gambiarras, maneira muito simples trivia como sempre deveria sido. possível enviar e-mail mais destinatários usando mensagem e-mail (por exemplo: notificando administradores houve novo cadastro) bastando configurar lista e-mails parâmetro :to. essa lista e-mails pode array endereços e-mails string contendo todos e-mails separados vírgulas. mesmo formato pode usado enviar e-mails cópia (cc:) cópia oculta (cco: bcc: inglês), adicione :bcc enviar seguindo padrões descritos acima. alguns momentos você deseja exibir nome pessoa enviou mensagem invés mostrar somente e-mail. você pode usar email_address_with_name isso: mesma técnica funciona especificar nome remetente: nome string branco, retornará apenas endereço."},{"id":145,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.4 Views de Mailer","content":"views mailer ficam diretório app/views/nome_da_classe_do_mailer. view específica mailer reconhecida pela classe pois nome mesmo método. exemplo anterior, nossa view método welcome_email estará app/views/user_mailer/welcome_email.html.erb, versão html welcome_email.text.erb versão texto simples. mudar mailer view padrão action, preciso fazer algo como exemplo: nesse caso, templates serão buscados app/views/notifications, nome another. também possível especificar array caminhos, serão verificados ordem. quiser mais flexibilidade, você pode fornecer bloco renderizar templates específicos, mesmo renderizar texto conteúdo inline usar arquivo template: isso fará template 'another_template.html.erb' seja renderizado parte html, usará texto especificado parte textual. comando render mesmo usado action controller, então possível usar mesmas opções, como exemplo, :text, :inline, etc. deseja renderizar template está fora diretório padrão app/views/mailer_name/, você pode usar opção prepend_view_path, seguinte forma: considere também usar método append_view_path. possível criar cache fragmento views mailer mesma forma como fazemos views aplicação, usando método cache. usar essa funcionalidade, necessário configurar aplicação seguinte forma: também possível criar cache fragmentos emails multipart. leia mais sobre cache guia cache rails."},{"id":146,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.5 Layouts de Action Mailer","content":"similarmente como views controllers, possível também layouts mailers. nome layout deve mesmo mailer, como user_mailer.html.erb user_mailer.text.erb reconhecido automaticamente pelo mailer como layout. quiser usar arquivo diferente, chame layout mailer: assim como views controller, yield renderizar view dentro layout. você também pode passar layout: 'layout_name' dentro bloco formatação como opção chamada render especificar quais formatos usar layouts diferentes: renderizar parte html usando arquivo my_layout.html.erb parte texto arquivo usual user_mailer.text.erb existir."},{"id":147,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.6 Pré-visualizando Emails","content":"action mailer preview possibilita maneira pré-visualizar como email ficar, acessando especial renderiza. exemplo acima, classe pré-visualizar usermailer deve chamar usermailerpreview deve estar localizada test/mailers/previews/user_mailer_preview.rb. modelo welcome_email, implemente método mesmo nome chame usermailer.welcome_email: dessa maneira, modelo ficar disponível http://localhost:3000/rails/mailers/user_mailer/welcome_email. você mudar algo app/views/user_mailer/welcome_email.html.erb próprio mailer, será automaticamente recarregado renderizado, você veja mudanças instantaneamente. lista pré-visualizações também ficam disponíveis http://localhost:3000/rails/mailers. padrão, essas classes pré-visualizações ficam test/mailers/previews. isso pode configurado usando opção preview_path. exemplo, você quiser alterar lib/mailer_previews, você pode configurar isso config/application.rb:"},{"id":148,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.7 Gerando URLs no Action Mailer Views","content":"contrário controllers, instância mailer nenhum contexto sobre requisição recebida, então você precisará informar parâmetro :host. como :host normalmente mesmo toda aplicação, você pode configurá-lo globalmente arquivo config/application.rb: causa dessa característica, você pode usar nenhum helpers *_path dentro email. invés, você precisará usar *_url helper respectivo. exemplo, invés usar: você precisará usar: usando completa, seus links irão funcionar dentro seus emails. padrão, url_for gera completa templates. você configurar opção :host globalmente, esqueça passá-lo url_for. clientes email contexto portanto, caminhos base completar endereços web. assim, você deve sempre usar variant *_url helper rota nomeada. você configurar opção :host globalmente, esqueça passá-lo helper url."},{"id":149,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.8 Adicionando imagens no Action Mailer Views","content":"contrário controllers, instância mailer nenhum contexto sobre requisição recebida, então você precisará informar parâmetro :asset_host. como :asset_host normalmente mesmo toda aplicação, você pode configurá-lo globalmente arquivo config/application.rb: agora você pode exibir imagem dentro email."},{"id":150,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.9 Enviando Emails Multipart","content":"action mailer enviará automaticamente emails multipart você tiver templates diferentes mesma action. então, nosso exemplo usermailer, você tiver templates welcome_email.text.erb welcome_email.html.erb pasta app/views/user_mailer, action mailer automaticamente enviar email multipart versões html texto configuradas como partes diferentes. ordem partes sendo inseridas determinado pelo argumento :parts_order dentro método actionmailer::base.default."},{"id":151,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.10 Enviando Emails com Opções de Entrega Dinâmicas","content":"você deseja sobrescrever opções entrega padrões (ex: credenciais smtp) enquanto email está sendo enviado, você pode fazer isso usando delivery_method_options action mailer."},{"id":152,"title":"Começando a usar Action Mailer","heading":"2 Enviando E-mails","subheading":"2.11 Enviando Emails sem Renderizar um Template","content":"podem haver casos onde você quer pular etapa renderização template enviar corpo email como string. você pode fazer isso usando opção :body. nesses casos, esqueça adicionar também opção :content_type. caso contrário, rails usar text/plain como padrão. action mailer permite você especifique before_action, after_action around_action. action mailer agora herda abstractcontroller, você tenha acesso mesmos helpers genéricos action controller. existem também alguns métodos auxiliares específicos action mailer disponíveis actionmailer::mailhelper. exemplo, estes permitem acessar instância mailer partir view mailer, acessando mensagem usando message: seguintes opções configuração feitas melhor ambientes arquivos (environment.rb, production.rb, etc...) descrição completa configurações possíveis, consulte configuring action mailer dentro nosso guia configuração aplicativos rails."},{"id":153,"title":"Começando a usar Action Mailer","heading":"5 Configuração do Action Mailer","subheading":"5.1 Exemplo de configuração do Action Mailer","content":"exemplo seria adicionar seguinte arquivo config/environments/$rails_env.rb:"},{"id":154,"title":"Começando a usar Action Mailer","heading":"5 Configuração do Action Mailer","subheading":"5.2 Configuração do Action Mailer para Gmail","content":"action mailer agora mail, aceita configuração semelhante. adicione isso arquivo config/environments/$rails_env.rb enviar gmail: você encontrará instruções detalhadas como testar seus mailers guia teste. action mailer fornece ganchos métodos observador interceptor mail. eles permitem você registre classes chamadas durante ciclo vida entrega cada e-mail enviado."},{"id":155,"title":"Começando a usar Action Mailer","heading":"7 Interceptando e Observando Emails","subheading":"7.1 Interceptando Emails","content":"interceptores permitem você faça modificações emails antes eles sejam entregues agentes entrega. classe interceptor deve implementar método ::delivering_email(message) será chamado antes e-mail enviado. antes interceptor possa fazer trabalho, você precisa registrá-lo usando configuração interceptor. você pode fazer isso arquivo inicializador como config/initializers/mail_interceptors.rb:"},{"id":156,"title":"Começando a usar Action Mailer","heading":"7 Interceptando e Observando Emails","subheading":"7.2 Observando Emails","content":"observadores fornecem acesso mensagem e-mail após sido enviada. classe observador deve implementar método :delivered_email(message), será chamado após e-mail enviado. como interceptores, você precisa registrar observadores usando observers. você pode fazer isso arquivo inicializador como config/initializers/mail_observers.rb você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":157,"title":"The Basics of Creating Rails Plugins","heading":"1 Setup","subheading":"1 Setup","content":"currently, rails plugins built gems, gemified plugins. they shared across different rails applications using rubygems bundler desired."},{"id":158,"title":"The Basics of Creating Rails Plugins","heading":"1 Setup","subheading":"1.1 Generate a gemified plugin.","content":"rails ships with rails plugin command which creates skeleton developing kind rails extension with ability integration tests using dummy rails application. create your plugin with command: usage options asking help: navigate directory that contains plugin, bundle install command generated test using bin/test command. should see: this will tell that everything generated properly, ready start adding functionality. this section will explain method string that will available anywhere your rails application. this example will method string named to_squawk. begin, create test file with assertions: bin/test test. this test should fail because haven't implemented to_squawk method: great ready start development. lib/yaffle.rb, require \"yaffle/core_ext\": finally, create core_ext.rb file to_squawk method: test that your method does what says does, unit tests with bin/test from your plugin directory. this action, change test/dummy directory, start bin/rails console, commence squawking: common pattern plugins method called acts_as_something models. this case, want write method called acts_as_yaffle that adds squawk method your active record models. begin, your files that have:"},{"id":159,"title":"The Basics of Creating Rails Plugins","heading":"4 Add an \"acts_as\" Method to Active Record","subheading":"4.1 Add a Class Method","content":"this plugin will expect that you've added method your model named last_squawk. however, plugin users might have already defined method their model named last_squawk that they something else. this plugin will allow name changed adding class method called yaffle_text_field. start out, write failing test that shows behavior you'd like: when bin/test, should following: this tells that don't have necessary models (hickwall wickwall) that trying test. easily generate these models \"dummy\" rails application running following commands from test/dummy directory: create necessary database tables your testing database navigating your dummy migrating database. first, run: while here, change hickwall wickwall models that they know that they supposed like yaffles. will also code define acts_as_yaffle method. then return root directory ../..) your plugin rerun tests using bin/test. getting closer... will implement code acts_as_yaffle method make tests pass. when bin/test, should tests pass:"},{"id":160,"title":"The Basics of Creating Rails Plugins","heading":"4 Add an \"acts_as\" Method to Active Record","subheading":"4.2 Add an Instance Method","content":"this plugin will method named 'squawk' active record object that calls acts_as_yaffle. 'squawk' method will simply value fields database. start out, write failing test that shows behavior you'd like: test make sure last tests fail with error that contains \"nomethoderror: undefined method `squawk'\", then update acts_as_yaffle.rb look like this: bin/test final time, should see: generators included your simply creating them lib/generators directory your plugin. more information about creation generators found generators guide. plugins currently development easily shared from repository. share yaffle with others, simply commit code repository (like github) line gemfile application question: after running bundle install, your functionality will available application. when ready shared formal release, published rubygems. alternatively, benefit from bundler's rake tasks. full list with following: more information about publishing gems rubygems, see: publishing your gem. once your plugin stable, ready deploy, everyone else favor document luckily, writing documentation your plugin easy. first step update readme file with detailed information about your plugin. things include are: once your readme solid, through rdoc comments methods that developers will use. it's also customary :nodoc: comments those parts code that included public api. once your comments good navigate your plugin directory run:"},{"id":161,"title":"The Basics of Creating Rails Plugins","heading":"7 RDoc Documentation","subheading":"7.1 References","content":"você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":162,"title":"Testando Applicações Rails","heading":"1 Por que escrever testes para a sua aplicação Rails?","subheading":"1 Por que escrever testes para a sua aplicação Rails?","content":"rails torna super fácil escrever seus testes. começa produzindo esqueleto código teste enquanto você cria seus models controllers. rodar seus testes rails você pode garantir código continua funcionalidade desejada mesmo após algumas grandes refatorações código. testes rails podem simular requisições browser isso, você pode testar resposta aplicação testar utilizando fato browser. suporte testes implantado rails desde primórdios. epifania tipo: \"vamos adicionar suporte testes porque eles novos legais!\""},{"id":163,"title":"Testando Applicações Rails","heading":"2 Introdução a testes","subheading":"2.1 Configurações para testes em aplicações Rails","content":"rails cria diretório test você logo você cria projeto rails usando comando rails nome_da_aplicacao. você listar conteúdo deste diretório, você verá: diretórios helpers, mailers models destinados realizar testes view helpers, mailers models, respectivamente. diretório channel destinado realizar testes conexão canais actioncable. diretório controllers destina realizar testes controllers, rotas views. diretório integration destina realizar testes interação entre controllers. diretório system destinado realizar testes sistema, usados testes completos aplicação browser. testes sistema permitem você testar aplicação jeito usuário experiência ajuda você testar javascript também. testes sistemas herdam capybara executados testes browser aplicação fixtures jeito organizar dados testes; ficam diretório fixtures diretório jobs também será criado quando teste associado gerado. arquivo test_helper.rb responsável realizar configurações padrão seus testes. arquivo application_system_test_case.rb responsável realizar configurações padrão seus testes sistema."},{"id":164,"title":"Testando Applicações Rails","heading":"2 Introdução a testes","subheading":"2.2 O Ambiente de Teste","content":"padrão, toda aplicação rails três ambientes: desenvolvimento, teste produção. configuração cada ambiente pode modificada forma semelhante. neste caso, podemos modificar nosso ambiente teste alterando opções encontradas config/environments/test.rb."},{"id":165,"title":"Testando Applicações Rails","heading":"2 Introdução a testes","subheading":"2.3 Rails conhece Minitest","content":"você lembra, usamos comando bin/rails generate model guia começando rails. criamos nosso primeiro model entre outras coisas, criado stub testes diretório test: stub teste padrão test/models/article_test.rb parece assim: inspeção linha linha desse arquivo ajudará você orientar terminologia código testes rails. fazer require arquivo test_helper.rb, configurações padrões executar nossos testes carregadas. vamos incluir isso todos testes escrevermos, então qualquer método adicionado este arquivo estar disponível todos nossos testes. classe articletest define test case porque herda activesupport::testcase. articletest portanto todos métodos disponíveis activesupport::testcase. mais frente nesse guia, vamos adicionar alguns métodos dados. qualquer método definido classe herdada minitest::test (que superclasse activesupport::testcase) começa test_ simplesmente chamada teste. então, métodos definidos como test_password test_valid_password nomes testes legais serão executados automaticamente quando caso teste (test_case) executado. rails também adiciona método test leva nome test bloco. isso gera teste normal minitest::unit nomes métodos prefixados test_. então você precisa preocupar nomear métodos, você pode escrever algo assim: aproximadamente mesmo escrever isto: apesar você ainda poder usar definições comuns métodos, usando prefixo test permite você teste mais legível. seguir, vamos olhar nossa primeira asserção: asserção linha código pode tornar objeto expressão) resultados esperados. exemplo, asserção pode checar todo teste pode conter mais asserções, restrições quantas asserções permitidas. apenas quando todas asserções serem bem-sucedidas teste passar. como falha teste reportada, você pode adicionar teste falha caso teste arquivo article_test.rb. vamos executar teste esse caso teste adicionado (onde número linha onde teste definido). saída teste, significa falha. você pode trace correspondente mostrado abaixo failure junto nome teste está falhando. próximas linhas contém origens erro seguido mensagem menciona valor atual valor esperado pela asserção. mensagem asserção padrão provê informação suficiente ajudar localizar erro. fazer asserção mais legível, toda asserção parâmetro mensagem opcional, como mostrado aqui: execução desse teste exibe mensagem asserção mais amigável: agora fazer esse teste passar podemos adicionar validação nível model campo title. agora teste deveria passar. vamos verificar executando teste novamente: agora, você notou, escrevemos teste falha funcionalidade desejada, então escrevemos código básico adiciona funcionalidade finalmente tivemos certeza nosso testes passam. essa abordagem desenvolvimento software referida como test-driven development (tdd). como erro reportado, aqui está teste contendo erro: agora você pode mais saída console rodar testes: observe saída. isso significa teste erro. quando teste falha você apresentado backtrace correspondente. padrão rails filtra backtrace mostrará apenas linhas relevantes aplicação. isso elimina qualquer reclamação framework isso ajuda focar código. entanto existem situações você quer backtrace completo. coloque argumento --backtrace) habilitar esse comportamento: queremos este teste passe devemos modificar isto usar assert_raises assim: este teste agora deveria passar."},{"id":166,"title":"Testando Applicações Rails","heading":"2 Introdução a testes","subheading":"2.4 Asserções disponíveis","content":"agora você pouco algumas asserções estão disponíveis. asserções obreiras testes. elas únicas verdade performam checar coisas estão indo conforme planejado. aqui está resumo asserções você pode usar minitest, biblioteca padrão usada pelo rails. parâmetro [msg] mensagem opcional tipo string você pode especificar fazer falhas teste mais claras. asserções acima subconjunto asserções minitest suporta. lista mais atualizada, favor cheque minitest documentation, especificamente minitest::assertions. conta natureza modular framework testes, possível criar suas próprias asserções. fato, isso exatamente rails faz. isso inclui algumas asserções especializadas deixar vida mais fácil."},{"id":167,"title":"Testando Applicações Rails","heading":"2 Introdução a testes","subheading":"2.5 Asserções Específicas do Rails","content":"rails adiciona algumas asserções customizadas framework minitest: agora você verá alguns usos algumas dessas asserções próximo capítulo."},{"id":168,"title":"Testando Applicações Rails","heading":"2 Introdução a testes","subheading":"2.6 Uma breve nota sobre os Casos de Testes","content":"todas asserções tais como assert_equal definidas minitest::assertions também disponíveis classes usamos nossos próprios casos teste. fato, rails provê seguintes classes você pode herdar cada dessas asserções inclui minitest::assertions, permitindo usar todas asserções básicas nossos testes."},{"id":169,"title":"Testando Applicações Rails","heading":"2 Introdução a testes","subheading":"2.7 O Teste Runner do Rails","content":"podemos executar todos nossos testes usando comando bin/rails test. podemos executar único arquivo teste passando comando bin/rails test arquivo contendo casos testes. isso executar todos métodos caso teste. você também pode executar método particular caso teste provendo opção --name nome método teste. você pode também executar linha específica teste colocando número linha. você também pode executar diretório inteiro testes colocando caminho diretório. teste runner provê muitas feature como failing fast, adiando saída teste execução teste assim diante. cheque documentação test runner seguinte forma: testes paralelo permitem paralelização suíte testes. passo fazer fork processos método padrão, também suportado threads. rodar testes paralelo reduz tempo leva rodar suíte testes inteira."},{"id":170,"title":"Testando Applicações Rails","heading":"3 Testes em Paralelo","subheading":"3.1 Testes em Paralelo com Processos","content":"método padrão paralelização fazer fork processos utilizando sistema ruby. número processos utilizados depende número workers fornecidos. número padrão quantidade núcleos computador, pode mudado quantidade passada método parallelize. habilitar paralelização adicione seguinte arquivo test_helper.rb: número workers informado número vezes processo sofrerá fork. voce pode querer paralelizar suíte testes local maneira diferente isso variável ambiente está disponível seja possível mudar facilmente número workers execução testes deve usar: quando testes paralelizados, active record automaticamente lida criação bancos dados carregamento esquema (schema) banco dados cada processo. bancos dados criados serão sufixados acordo numeração worker. exemplo, workers, testes criarão bancos test-database-0 test-database-1 respectivamente. número workers passado menos, processos sofrerão fork testes serão paralelizados. além disso, banco original test-database será usado. dois hooks disponibilizados, roda quando processo sofre fork outro quando fork encerrado. isso pode útil aplicação múltiplos bancos dados executa outras atividades dependem quantidade workers. método parallelize_setup chamado logo após fork processo. método parallelize_teardown chamado momento antes processo finalizado. esses métodos necessários estão indisponíveis quando testes paralelos threads utilizados."},{"id":171,"title":"Testando Applicações Rails","heading":"3 Testes em Paralelo","subheading":"3.2 Testes em Paralelo com Threads","content":"você preferir utilizar threads está utilizando jruby, opção paralelizar threads está disponível. paralelizador threads utiliza baixo panos classe parallel::executor minitest. mudar método paralelização utilizar threads invés forks, escreva seguinte test_helper.rb: aplicações rails geradas jruby truffleruby irão incluir automaticamente opção with: :threads. número workers passado parallelize determina número threads testes irão utilizar. voce pode querer paralelizar suíte testes maneira diferente isso variável ambiente está disponível seja possível mudar facilmente número workers execução testes deve usar:"},{"id":172,"title":"Testando Applicações Rails","heading":"3 Testes em Paralelo","subheading":"3.3 Testando Transações em Paralelo","content":"rails automaticamente envolve todo caso teste transação banco dados, desfeita depois teste concluído. isso casos teste sejam independentes outros mudanças banco dados sejam visíveis somente dentro daquele teste. quando você testa código roda transações paralelas threads, transações podem bloquear umas outras, pois eles estão aninhadas transação caso teste. você pode desabilitar transações classe caso teste, através configuração self.use_transactional_tests false:"},{"id":173,"title":"Testando Applicações Rails","heading":"3 Testes em Paralelo","subheading":"3.4 Limite para paralelizar testes","content":"execução testes paralelo adiciona sobrecarga termos configuração banco dados carregamento fixtures. isso, rails paralelizar execuções envolvem menos testes. você pode configurar este limite test.rb: também configurar paralelização nível caso teste: quase tudo aplicação rails interage fortemente banco dados como resultado, seus testes também precisarão interagir banco dados. escrever testes eficientes, você precisará entender como configurar como popular esse banco dados dados exemplo. padrão, toda aplicação rails ambientes (environments): development, test production. banco dados cada ambiente configurado config/database.yml. banco dados dedicado testes permite configuração interação dados teste separadamente. dessa forma, seus testes podem manipular dados teste confiança, preocupar bancos desenvolvimento produção."},{"id":174,"title":"Testando Applicações Rails","heading":"4 O Banco de Dados de Teste","subheading":"4.1 Mantendo o esquema do banco de dados de teste","content":"rodar testes, banco dados precisará estrutura atual. classe test helper checa banco teste alguma migração pendente. tentar carregar db/schema.rb db/structure.sql dentro banco teste. alguma migração ainda estiver faltando, erro levantado. isso indica esquema (schema) ainda totalmente migrado. rodar migrações banco desenvolvimento (bin/rails db:migrate) atualizar esquema última versão."},{"id":175,"title":"Testando Applicações Rails","heading":"4 O Banco de Dados de Teste","subheading":"4.2 O Essencial sobre Fixtures","content":"fazer bons testes, você precisará pensar bastante como preparar seus dados teste. rails, você pode lidar isso definindo customizando fixtures. você pode encontrar documentação completa documentação fixtures. fixtures apenas palavra bonita dados teste. fixtures permitem você popular banco teste dados predefinidos antes testes rodarem. fixtures funcionam independentemente banco dados escritas yaml. arquivo model. você encontrará fixtures dentro pasta test/fixtures. quando roda bin/rails generate model criar model, rails automaticamente cria esqueleto fixture nessa pasta. fixtures escritas yaml jeito amigável humanos escrever seus dados teste. esse tipo fixture extensão .yml (como users.yml). segue exemplo fixture arquivo yaml: cada fixture recebe nome, seguido lista indentada chaves/valores separados dois pontos. registros separados outros linha branco. você pode colocar comentários arquivo fixture usando caractere primeira coluna texto. você está trabalhando associações, você pode definir referências entre duas fixtures diferentes. aqui está exemplo associação belongs_to/has_many: veja chave category artigo (article) first encontrado fixtures/articles.yml valor about, chave record entrada first_content encontrada fixtures/action_text/rich_texts.yml valor first (article). isso sugere active record carregue categoria (category) about encontrada fixtures/categories.yml primeiro, action text carregar artigo first encontrado fixtures/articles.yml último. como outros models suporte active record, registros anexo active storage herdam instâncias activerecord::base podem, portanto, preenchidos fixtures. considere model article tenha imagem associada como thumbnail, juntamente dados arquivo fixture yaml: supondo haja arquivo codificado image/png test/fixtures/files/first.png, seguintes entradas fixtures yaml serão gerar registros relacionamento activestorage::blob activestorage::attachment: linguagem permite você coloque código ruby dentro templates. fixtures formato yaml pré-processadas antes rails carregar fixtures. isso você possa usar ruby ajudar gerar dados teste. exemplo, código seguir gerar usuários: rails automaticamente carrega todas fixtures dentro diretório test/fixtures padrão. carregamento envolve três passos: fixtures instâncias active record. como mencionado ponto acima, você pode acessar objeto diretamente, está automaticamente acessível como método cujo escopo local cada teste. exemplo: acessar várias fixtures vez, você pode passar lista nomes fixtures. exemplo: testes model usados testar vários models aplicação. testes model rails estão localizados test/models. rails disponibiliza gerador (generator) criar esqueletos testes model. testes model possuem superclasse como actionmailer::testcase. invés disso, eles herdam activesupport::testcase. testes sistema permitem testar interações usuário aplicação, rodando testes navegador real headless. testes sistema usam capybara debaixo panos. criar testes sistema rails, utilize caminho test/system aplicação. rails também disponibiliza generator criar esqueletos testes sistema você. aqui está como teste sistema recém gerado parece: padrão, testes sistema utilizam driver selenium, executando navegador chrome, tela tamanho 1400x1400. próxima seção explica como mudar configurações padrão."},{"id":176,"title":"Testando Applicações Rails","heading":"6 Fazendo Testes de Sistema","subheading":"6.1 Mudando as Configurações Padrão","content":"rails mudar configurações padrão testes sistema seja muito simples. toda preparação (setup) abstraída, logo você pode focar mais escrever testes. quando nova aplicação scaffold gerados, arquivo application_system_test_case.rb criado pasta testes. nele todas configurações seus testes sistema devem estão. você quiser mudar configurações padrão, você pode mudar quem \"dirige\" (driver) testes sistema. digamos você quer mudar selenium cuprite. primeiro adicione cuprite gemfile. depois, application_system_test_case.rb, faça seguinte: nome driver argumento obrigatório driven_by. argumentos opcionais podem passados driven_by :using navegador (opção usada somente pelo driver selenium), :screen_size mudar tamanho tela capturas tela :options serve configurações específicas cada driver. você quiser usar navegador headless, você pode usar chrome headless firefox headless passando headless_chrome headless_firefox argumento :using. configuração capybara requer mais customização fornecidas pelo rails, opções adicionais podem adicionadas arquivo application_system_test_case.rb. consulte documentação capybara configurações adicionais."},{"id":177,"title":"Testando Applicações Rails","heading":"6 Fazendo Testes de Sistema","subheading":"6.2 Helper de capturas de tela","content":"módulo screenshothelper helper feito fazer capturas tela (\"prints\") seus testes. isso pode útil navegador momento teste falha debug. dois métodos disponibilizados: take_screenshot take_failed_screenshot. rails, método take_failed_screenshot automaticamente incluído before_teardown. helper take_screenshot pode chamado qualquer lugar seus testes fazer captura tela navegador."},{"id":178,"title":"Testando Applicações Rails","heading":"6 Fazendo Testes de Sistema","subheading":"6.3 Implementando um Teste de Sistema","content":"agora vamos adicionar teste sistema nossa aplicação blog. vamos demonstrar como escrever testes sistema, através visita página inicial aplicação escrita novo artigo blog. você tive usado generator scaffold, então esqueleto teste sistema automaticamente criado você. você utilizou generator scaffold, comece criando esqueleto teste sistema. isso deveria criar arquivo teste. você utilizou comando anterior, você deveria seguinte saída: agora vamos abrir arquivo escrever nossa primeira asserção: teste deveria localizar elemento página inicial (index) articles passar. rode testes sistema. agora vamos testar fluxo criação novo artigo nosso blog. primeiro passo chamar visit articles_path. isso teste acesse página inicial (index) articles. depois instrução click_on \"new article\" achar botão \"new article\" página inicial (index). isso redirecionar navegador /articles/new. após isso, teste preencher título (title) corpo (body) artigo texto especificado. campos estão preenchidos, clica-se \"create article\", mandar requisição post criar artigo banco dados. finalmente, vamos redirecionados volta página inicial (index) vamos assertar texto título nosso novo artigo está presente página inicial. você quiser testar telas tamanho mobile além tamanho desktop, você pode criar outra classe herda systemtestcase usar suite testes. nesse exemplo, arquivo chamado mobile_system_test_case.rb criado caminho /test seguinte configuração: usar essa configuração, crie teste dentro test/system herda mobilesystemtestcase. agora você pode testar diferentes configurações tela. beleza testes sistema que, parecido testes integração, eles também testam interação usuário controller, model view. porém, teste sistema muito mais robusto testa aplicação como pessoa verdade estivesse usando. indo além, você pode testar qualquer coisa próprios usuários fariam aplicação, como comentar, deletar artigos, publicar rascunhos etc. integration tests used test various parts application interact. they generally used test important workflows within application. creating rails integration tests, test/integration directory application. rails provides generator create integration test skeleton here's what freshly generated integration test looks like: here test inheriting from actiondispatch::integrationtest. this makes some additional helpers available integration tests."},{"id":179,"title":"Testando Applicações Rails","heading":"7 Integration Testing","subheading":"7.1 Helpers Available for Integration Tests","content":"addition standard testing helpers, inheriting from actiondispatch::integrationtest comes with some additional helpers available when writing integration tests. let's briefly introduced three categories helpers choose from. dealing with integration test runner, actiondispatch::integration::runner. when performing requests, will have actiondispatch::integration::requesthelpers available use. need modify session, state integration test, take look actiondispatch::integration::session help."},{"id":180,"title":"Testando Applicações Rails","heading":"7 Integration Testing","subheading":"7.2 Implementing an integration test","content":"let's integration test blog application. we'll start with basic workflow creating blog article, verify that everything working properly. we'll start generating integration test skeleton: should have created test file placeholder with output previous command should see: let's open that file write first assertion: will take look assert_select query resulting html request \"testing views\" section below. used testing response request asserting presence html elements their content. when visit root path, should welcome/index.html.erb rendered view. this assertion should pass. about testing ability create article blog resulting article. let's break this test down understand start calling :new action articles controller. this response should successful. after this make post request :create action articles controller: lines following request handle redirect setup when creating article. finally assert that response successful article readable page. were able successfully test very small workflow visiting blog creating article. wanted take this further could tests commenting, removing articles, editing comments. integration tests great place experiment with kinds cases applications. rails, testing various actions controller form writing functional tests. remember your controllers handle incoming requests your application eventually respond with rendered view. when writing functional tests, testing your actions handle requests expected result response, some cases html view."},{"id":181,"title":"Testando Applicações Rails","heading":"8 Functional Tests for Your Controllers","subheading":"8.1 What to include in your Functional Tests","content":"should test things such easiest functional tests action generate controller using scaffold generator: this will generate controller code tests article resource. take look file articles_controller_test.rb test/controllers directory. already have controller just want generate test scaffold code each seven default actions, following command: let's take look such test, test_should_get_index from file articles_controller_test.rb. test_should_get_index test, rails simulates request action called index, making sure request successful also ensuring that right response body been generated. method kicks request populates results into @response. accept arguments: these keyword arguments optional. example: calling :show action first article, passing http_referer header: another example: calling :update action last article, passing text title params, ajax request: more example: calling :create action create article, passing text title params, json request: modify test_should_create_article test articles_controller_test.rb that test pass: running tests they should pass."},{"id":182,"title":"Testando Applicações Rails","heading":"8 Functional Tests for Your Controllers","subheading":"8.2 Available Request Types for Functional Tests","content":"you're familiar with http protocol, you'll know that type request. there request types supported rails functional tests: request types have equivalent methods that use. typical c.r.u.d. application you'll using get, post, put, delete more often."},{"id":183,"title":"Testando Applicações Rails","heading":"8 Functional Tests for Your Controllers","subheading":"8.3 Testing XHR (AJAX) requests","content":"test ajax requests, specify xhr: true option get, post, patch, put, delete methods. example:"},{"id":184,"title":"Testando Applicações Rails","heading":"8 Functional Tests for Your Controllers","subheading":"8.4 The Three Hashes of the Apocalypse","content":"after request been made processed, will have hash objects ready use: case with normal hash objects, access values referencing keys string. also reference them symbol name. example:"},{"id":185,"title":"Testando Applicações Rails","heading":"8 Functional Tests for Your Controllers","subheading":"8.5 Instance Variables Available","content":"also have access three instance variables your functional tests, after request made:"},{"id":186,"title":"Testando Applicações Rails","heading":"8 Functional Tests for Your Controllers","subheading":"8.6 Setting Headers and CGI variables","content":"http headers variables passed headers:"},{"id":187,"title":"Testando Applicações Rails","heading":"8 Functional Tests for Your Controllers","subheading":"8.7 Testing flash notices","content":"remember from earlier, three hashes apocalypse flash. want flash message blog application whenever someone successfully creates article. let's start adding this assertion test_should_create_article test: test now, should failure: let's implement flash message controller. :create action should look like this: tests, should pass:"},{"id":188,"title":"Testando Applicações Rails","heading":"8 Functional Tests for Your Controllers","subheading":"8.8 Putting it together","content":"this point articles controller tests :index well :new :create actions. what about dealing with existing data? let's write test :show action: remember from discussion earlier fixtures, articles() method will give access articles fixtures. about deleting existing article? also test updating existing article. notice we're starting some duplication these three tests, they both access same article fixture data. d.r.y. this using setup teardown methods provided activesupport::callbacks. test should look something what follows. disregard other tests now, we're leaving them brevity. similar other callbacks rails, setup teardown methods also used passing block, lambda, method name symbol call."},{"id":189,"title":"Testando Applicações Rails","heading":"8 Functional Tests for Your Controllers","subheading":"8.9 Test helpers","content":"avoid code duplication, your test helpers. sign helper good example: find your helpers cluttering test_helper.rb, extract them into separate files. good place store them test/lib test/test_helpers. these helpers then explicitly required needed included needed they continue included directly into relevant parent classes find convenient eagerly require helpers test_helper.rb your test files have implicit access them. this accomplished using globbing, follows this downside increasing boot-up time, opposed manually requiring only necessary files your individual tests. assim como tudo aplicação rails, você também pode testar suas rotas. testes rotas encontrados pasta test/controllers/ podem fazer parte seus testes controller. mais informações sobre asserções rotas disponíveis rails, veja documentação actiondispatch::assertions::routingassertions. testar resposta requisição através presença elementos html chave conteúdo forma comum testar views aplicação. assim como testes rota, testes view ficam test/controllers/ parte seus testes controller. método assert_select permite você faça consultas elementos html resposta, através sintaxe simples, poderosa. duas formas assert_select: assinatura assert_select(selector, [equality], [message]) garante condição igualdade (equality) atendida elementos selecionados através seletor (selector). argumento selector pode seletor (string) expressão valores substituição (como nesses testes). assert_select(element, selector, [equality], [message]) garante condição igualdade (equality) atendida elementos selecionados através seletor, começando elemento element (instância nokogiri::xml::node nokogiri::xml::nodeset) seus descendentes. exemplo, você poderia verificar conteúdo elemento title resposta com: você também pode usar blocos aninhados assert_select investigação mais profunda. exemplo seguir, assert_select mais interno li.menu_item executa coleção elementos selecionados pelo bloco mais externo: coleção elementos pode iterada assert_select possa chamado individualmente cada elemento. exemplo, resposta contiver duas listas ordenadas, cada quatro elementos, então testes seguir irão passar. essa asserção bastante poderosa. usos mais avançados, veja documentação."},{"id":190,"title":"Testando Applicações Rails","heading":"10 Testando Views","subheading":"10.1 Asserções Adicionais para Views","content":"existem mais asserções usadas primariamente testes views: aqui está exemplo assert_selected_email: helper apenas simples módulo onde você pode definir métodos estarão disponíveis suas views. testar helpers, tudo você precisa fazer verificar saída método helper fato saída esperada. testes relacionados helpers estão localizados dentro pasta test/helpers. dado seguinte helper: podemos testar saída desse método seguinte maneira: além disso, classe teste estende actionview::testcase, você acesso métodos auxiliares rails como link_to oupluralize. testing mailer classes requires some specific tools thorough job."},{"id":191,"title":"Testando Applicações Rails","heading":"12 Testing Your Mailers","subheading":"12.1 Keeping the Postman in Check","content":"your mailer classes like every other part your rails application should tested ensure that they working expected. goals testing your mailer classes ensure that: there aspects testing your mailer, unit tests functional tests. unit tests, mailer isolation with tightly controlled inputs compare output known value fixture). functional tests don't much test minute details produced mailer; instead, test that controllers models using mailer right way. test prove that right email sent right time."},{"id":192,"title":"Testando Applicações Rails","heading":"12 Testing Your Mailers","subheading":"12.2 Unit Testing","content":"order test that your mailer working expected, unit tests compare actual results mailer with pre-written examples what should produced. purposes unit testing mailer, fixtures used provide example output should look. because these example emails, active record data like other fixtures, they kept their subdirectory apart from other fixtures. name directory within test/fixtures directly corresponds name mailer. mailer named usermailer, fixtures should reside test/fixtures/user_mailer directory. generated your mailer, generator does create stub fixtures mailers actions. you'll have create those files yourself described above. here's unit test test mailer named usermailer whose action invite used send invitation friend. adapted version base test created generator invite action. test create email store returned object email variable. then ensure that sent (the first assert), then, second batch assertions, ensure that email does indeed contain what expect. helper read_fixture used read content from this file. here's content invite fixture: this right time understand little more about writing tests your mailers. line actionmailer::base.delivery_method :test config/environments/test.rb sets delivery method test mode that email will actually delivered (useful avoid spamming your users while testing) instead will appended array (actionmailer::base.deliveries)."},{"id":193,"title":"Testando Applicações Rails","heading":"12 Testing Your Mailers","subheading":"12.3 Functional and System Testing","content":"unit testing allows test attributes email while functional system testing allows test whether user interactions appropriately trigger email delivered. example, check that invite friend operation sending email appropriately: seus jobs podem enfileirados diferentes camadas dentro aplicação, será necessário testar tanto jobs propriamente ditos (seu comportamento, estiverem enfileirados), quanto entidades fazem enfileiramento destes."},{"id":194,"title":"Testando Applicações Rails","heading":"13 Testando os Jobs","subheading":"13.1 Um Caso de Teste Básico","content":"padrão, quando você gera job, também será gerado teste dentro diretório test/jobs. aqui está exemplo teste cobrança (billing): esse teste simples somente asserção trabalho como esperado. padrão, activejob::testcase definir adaptador fila :test dessa maneira seus jobs irão executados forma linear. isso também garantir todos jobs realizados anteriormente estiverem enfileirados serão limpos antes qualquer execução teste você possa assumir segurança nenhum outro tenha sido executado âmbito cada teste."},{"id":195,"title":"Testando Applicações Rails","heading":"13 Testando os Jobs","subheading":"13.2 Asserções Personalizadas e Testando Jobs dentro de Outros Componentes","content":"active monte asserções customizadas podem usadas diminuir verbosidade testes. lsita completa asserções disponíveis, visite documenta activejob::testhelper. prática assegurar seus jobs serão enfileirados executados onde quer você invoque (exemplo: dentro seus controllers). este local onde asserções personalizadas fornecidas pelo active muito úteis. exemplo, dentro model: since action cable used different levels inside your application, you'll need test both channels, connection classes themselves, that other entities broadcast correct messages."},{"id":196,"title":"Testando Applicações Rails","heading":"14 Testing Action Cable","subheading":"14.1 Connection Test Case","content":"default, when generate rails application with action cable, test base connection class (applicationcable::connection) generated well under test/channels/application_cable directory. connection tests check whether connection's identifiers assigned properly that improper connection requests rejected. here example: also specify request cookies same integration tests: documentation actioncable::connection::testcase more information."},{"id":197,"title":"Testando Applicações Rails","heading":"14 Testing Action Cable","subheading":"14.2 Channel Test Case","content":"default, when generate channel, associated test will generated well under test/channels directory. here's example test with chat channel: this test pretty simple only asserts that channel subscribes connection particular stream. also specify underlying connection identifiers. here's example test with notifications channel: documentation actioncable::channel::testcase more information."},{"id":198,"title":"Testando Applicações Rails","heading":"14 Testing Action Cable","subheading":"14.3 Custom Assertions And Testing Broadcasts Inside Other Components","content":"action cable ships with bunch custom assertions that used lessen verbosity tests. full list available assertions, documentation actioncable::testhelper. it's good practice ensure that correct message been broadcasted inside other components (e.g. inside your controllers). this precisely where custom assertions provided action cable pretty useful. instance, within model: want test broadcasting made with channel.broadcast_to, should channel.broadcasting_for generate underlying stream name:"},{"id":199,"title":"Testando Applicações Rails","heading":"15 Recursos Adicionais para Testes","subheading":"15.1 Testando Código Dependente de Data/Horário","content":"rails fornece métodos helpers integrados permitem você verifique código dependente data hora funcione conforme esperado. aqui está exemplo utilizando helper travel_to: favor consulte documentação activesupport::testing::timehelpers obter informações detalhadas sobre helpers tempo disponíveis. normally, applications eager load development test environments speed things they production environment. some file project cannot loaded whatever reason, better detect before deploying production, right?"},{"id":200,"title":"Testando Applicações Rails","heading":"16 Testing Eager Loading","subheading":"16.1 Continuous Integration","content":"your project place, eager loading easy ensure application eager loads. typically some environment variable indicate test suite running there. example, could starting with rails newly generated applications configured that default."},{"id":201,"title":"Testando Applicações Rails","heading":"16 Testing Eager Loading","subheading":"16.2 Bare Test Suites","content":"your project does have continuous integration, still eager load test suite calling rails.application.eager_load!:"},{"id":202,"title":"Testando Applicações Rails","heading":"17 Additional Testing Resources","subheading":"17.1 Testing Time-Dependent Code","content":"rails provides built-in helper methods that enable assert that your time-sensitive code works expected. here example using travel_to helper: please activesupport::testing::timehelpers documentation in-depth information about available time helpers. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":203,"title":"Ruby on Rails 3.1 Release Notes","heading":"1 Upgrading to Rails 3.1","subheading":"1 Upgrading to Rails 3.1","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting update rails 3.1. then take heed following changes:"},{"id":204,"title":"Ruby on Rails 3.1 Release Notes","heading":"1 Upgrading to Rails 3.1","subheading":"1.1 Rails 3.1 requires at least Ruby 1.8.7","content":"rails requires ruby 1.8.7 higher. support previous ruby versions been dropped officially should upgrade early possible. rails also compatible with ruby 1.9.2."},{"id":205,"title":"Ruby on Rails 3.1 Release Notes","heading":"1 Upgrading to Rails 3.1","subheading":"1.2 What to update in your apps","content":"following changes meant upgrading your application rails 3.1.3, latest 3.1.x version rails. make following changes your gemfile."},{"id":206,"title":"Ruby on Rails 3.1 Release Notes","heading":"2 Creating a Rails 3.1 application","subheading":"2.1 Vendoring Gems","content":"rails uses gemfile application root determine gems require your application start. this gemfile processed bundler gem, which then installs your dependencies. even install dependencies locally your application that doesn't depend system gems. more information: bundler homepage"},{"id":207,"title":"Ruby on Rails 3.1 Release Notes","heading":"2 Creating a Rails 3.1 application","subheading":"2.2 Living on the Edge","content":"bundler gemfile makes freezing your rails application easy with dedicated bundle command. want bundle straight from repository, pass --edge flag: have local checkout rails repository want generate application using that, pass --dev flag:"},{"id":208,"title":"Ruby on Rails 3.1 Release Notes","heading":"3 Rails Architectural Changes","subheading":"3.1 Assets Pipeline","content":"major change rails assets pipeline. makes javascript first-class code citizens enables proper organization, including plugins engines. assets pipeline powered sprockets covered asset pipeline guide."},{"id":209,"title":"Ruby on Rails 3.1 Release Notes","heading":"3 Rails Architectural Changes","subheading":"3.2 HTTP Streaming","content":"http streaming another change that rails 3.1. this lets browser download your stylesheets javascript files while server still generating response. this requires ruby 1.9.2, opt-in requires support from server well, popular combo nginx unicorn ready take advantage"},{"id":210,"title":"Ruby on Rails 3.1 Release Notes","heading":"3 Rails Architectural Changes","subheading":"3.3 Default JS library is now jQuery","content":"jquery default javascript library that ships with rails 3.1. prototype, it's simple switch."},{"id":211,"title":"Ruby on Rails 3.1 Release Notes","heading":"3 Rails Architectural Changes","subheading":"3.4 Identity Map","content":"active record identity rails 3.1. identity keeps previously instantiated records returns object associated with record accessed again. identity created per-request basis flushed request completion. rails comes with identity turned default."},{"id":212,"title":"Ruby on Rails 3.1 Release Notes","heading":"5 Action Pack","subheading":"5.1 Action Controller","content":""},{"id":213,"title":"Ruby on Rails 3.1 Release Notes","heading":"5 Action Pack","subheading":"5.2 Action Dispatch","content":""},{"id":214,"title":"Ruby on Rails 3.1 Release Notes","heading":"5 Action Pack","subheading":"5.3 Action View","content":"keys dasherized. values json-encoded, except strings symbols. deprecations: full list contributors rails many people spent many hours making rails, stable robust framework kudos them. rails release notes were compiled vijay você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":215,"title":"Using Rails for API-only Applications","heading":"1 O que é uma Aplicação API?","subheading":"1 O que é uma Aplicação API?","content":"tradicionalmente, quando pessoas dizem usam rails como \"api\", elas querem dizer fornecem acessível junto suas aplicações web. exemplo, github fornece você pode usar suas próprias aplicações personalizadas. advento frameworks client-side, mais desenvolvedores estão usando rails construir back-end compartilhado entre suas aplicações outros aplicativos nativos. exemplo, twitter pública aplicação web, site estático consome recursos json. usar rails gerar html comunica servidor através formulários links, muitos desenvolvedores estão tratando suas aplicações apenas como api, separadamente html javascript apenas consome json. esse guia aborda construção aplicativo rails fornece dados json cliente, incluindo frameworks client-side. primeira questão muitas pessoas quando estão pensando construir json utilizando rails \"utilizar rails retornar alguns json exagero? deveríamos usar algo como sinatra?\" apis muito simples, isso pode verdade. porém, mesmo aplicações muito html, parte lógica aplicação está fora camada visualização. razão maioria pessoas usar rails fornece conjunto padrões permitem desenvolvedores criarem rodarem rápido, fazer muitas decisões triviais. vamos olhada algumas coisas rails fornece \"direto caixa\" aplicáveis aplicações api. manipulado camada middleware: enquanto você poderia obviamente construir isto termos existir middleware rack, esta lista demonstra padrão pilha middleware rails fornece muito valor, mesmo quando você está \"gerando json\". controlado camada action pack: claro, processo boot rails também junta todos componentes registrados. exemplo, processo boot rails arquivo config/database.yml quando está configurando active record. versão resumida você pode pensado quais partes rails continuam aplicáveis mesmo você remover camada view, resposta maioria delas continua. você estiver construindo aplicação rails será api, você pode começar subconjunto mais limitado rails adicionar recursos, conforme necessário."},{"id":216,"title":"Using Rails for API-only Applications","heading":"3 Configuração básica","subheading":"3.1 Criando uma nova aplicação","content":"você pode gerar nova rails: esse comando fará três coisas principais você:"},{"id":217,"title":"Using Rails for API-only Applications","heading":"3 Configuração básica","subheading":"3.2 Alterando uma aplicação existente","content":"você deseja usar aplicação existe transformá-la api, siga passos seguir. config/application.rb adicione seguinte linha começo classe application: config/environments/development.rb, defina config.debug_exception_response_format configurar formato usado respostas quando ocorrer erro modo desenvolvimento. renderizar página html informações debugging, valor :default. renderizar informações debugging preservando formato resposta, valor :api. padrão, config.debug_exception_response_format está definido :api, quando config.api_only está valor true. finalmente, arquivo app/controllers/application_controller.rb, invés troque por: aplicação seguintes middlewares padrão: olhe sessão middleware interno guia rack mais informações. outros plugins, incluindo active record, podem adicionar middlewares adicionais. geral, esses middlewares agnósticos tipo aplicação você está construindo, isso sentido aplicação rails. você pode recuperar lista todos middlewares aplicação via:"},{"id":218,"title":"Using Rails for API-only Applications","heading":"4 Escolhendo o Middleware","subheading":"4.1 Usando o Middleware de Cache","content":"padrão, rails adicionar middleware fornece armazenamento cache baseado configuração aplicação (memcache padrão). isso significa cache embutido http pode confiar nisso. exemplo, usando metodo stale?: chamada stale? comparar cabeçalho if-modified-since requisição @post.updated_at. cabeçalho mais novo ultima modificação, esta ação retornar resposta \"304 modified\". contrário, renderizar resposta incluir cabeçalho last-modified nele. normalmente, este mecanismo usado base cliente. cache middleware permite compartilhar este mecanismo cache através clientes. podemos ativar cache cross-client chamada stale?: isto significa cache middleware guardar valor last-modified cache rails, adiciona cabeçalho if-modified-since qualquer requisição entrada mesma url. pense nisso como cache página usando semântica http."},{"id":219,"title":"Using Rails for API-only Applications","heading":"4 Escolhendo o Middleware","subheading":"4.2 Usando Rack::Sendfile","content":"quando você método send_file dentro controller rails, define cabeçalho x-sendfile. rack::sendfile responsável efetivamente enviar arquivo. servidor front-end suportar envio arquivos acelerado, rack::sendfile descarregar arquivo real enviando trabalho servidor front-end. você pode configurar nome cabeçalho servidor front-end este propósito usando config.action_dispatch.x_sendfile_header arquivo configuração ambiente apropriado. você pode aprender mais sobre como usar rack::sendfile front-ends populares documentação rack::sendfile. aqui estão alguns valores este cabeçalho alguns servidores populares, quando estes servidores configurados suportar envio arquivo acelerado. certifique configurar servidor suportar estas opções seguindo instruções documentação rack::sendfile."},{"id":220,"title":"Using Rails for API-only Applications","heading":"4 Escolhendo o Middleware","subheading":"4.3 Usando ActionDispatch::Request","content":"actiondispatch::request#params pegar parâmetros cliente formato json deixa-los disponiveis controller dentro params. usar isto, cliente precisar fazer requisição parâmetros json-encoded especificar content-type como application/json. aqui exemplo jquery: actiondispatch::request verá content-type seus parâmetros serão:"},{"id":221,"title":"Using Rails for API-only Applications","heading":"4 Escolhendo o Middleware","subheading":"4.4 Usando Middlewares de Sessão (Session)","content":"middlewares seguir, usados gerenciamento sessão, excluídos aplicações api, pois normalmente precisam sessões. seus clientes forem navegador, convém adicionar deles novamente truque adicioná-los volta que, padrão, eles passados session_options quando adicionado (incluindo chave sessão), então você pode simplesmente adicionar inicializador session_store.rb, adicione actiondispatch::session::cookiestore tenha sessões funcionando normalmente. (para claro: sessões pode funcionar, suas opções sessão serão ignoradas seja, chave sessão será padronizada _session_id) inicializador, você terá definir opções relevantes algum lugar antes middleware seja construído (como config/application.rb) passá-los middleware preferido, assim:"},{"id":222,"title":"Using Rails for API-only Applications","heading":"4 Escolhendo o Middleware","subheading":"4.5 Outros Middleware","content":"rails vários outros middlewares você pode querer usar aplicação api, especialmente seus clientes navegador: qualquer desses middlewares pode adicionado via:"},{"id":223,"title":"Using Rails for API-only Applications","heading":"4 Escolhendo o Middleware","subheading":"4.6 Removendo Middleware","content":"você quer usar middleware está incluído padrão conjunto middlewares api-only, você pode remove-lo com: tenha mente removendo estes middlewares remover suporte alguns recursos action controller. aplicação (utilizando actioncontroller::api) seguintes módulos controller padrão: outros plugins podem adicionar mais módulos. você pode obter lista todos módulos incluídos actioncontroller::api console rails:"},{"id":224,"title":"Using Rails for API-only Applications","heading":"5 Escolhendo os módulos do controller","subheading":"5.1 Adicionando Outros Módulos","content":"todos módulos action controller conhecem seus módulos dependentes. assim, você pode incluir qualquer módulo seus controllers, todas dependências serão incluídas configuradas também. alguns módulos comuns você pode querer adicionar: rails essa configuração automaticamente melhor lugar adicionar módulo applicationcontroller, você também pode adicionar módulos controllers individuais. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":225,"title":"Rotas do Rails de Fora pra Dentro","heading":"1 O Propósito do Roteador do Rails","subheading":"1 O Propósito do Roteador do Rails","content":"roteador rails organiza urls direcionam ação controller aplicativo rack. também pode gerar caminhos urls, evitando necessidade codificar sequências caracteres suas visualizações."},{"id":226,"title":"Rotas do Rails de Fora pra Dentro","heading":"1 O Propósito do Roteador do Rails","subheading":"1.1 Conectando URLs ao código","content":"quando aplicação rails recebe requisição para: solicita roteador corresponda ação controller. primeira rota correspondente for: requisição direcionada controller patients ação show '17' params."},{"id":227,"title":"Rotas do Rails de Fora pra Dentro","heading":"1 O Propósito do Roteador do Rails","subheading":"1.2 Gerando Caminhos e URLs a partir do código","content":"você também pode gerar caminhos urls. rota acima modificada ser: aplicação contém esse código controller: isso view correspondente: então roteador gerar caminho /patients/17. isso reduz fragilidade view código mais simples entender. observe precisa especificado helper rota."},{"id":228,"title":"Rotas do Rails de Fora pra Dentro","heading":"1 O Propósito do Roteador do Rails","subheading":"1.3 Configurando o Roteador do Rails","content":"rotas aplicação engine estão dentro arquivo config/routes.rb tipicamente parecem isso: como isso arquivo padrão ruby você pode utilizar todos seus recursos ajudar definir suas rotas, porém tenha cautela nomes variáveis pode conflitar métodos roteador. roteamento resources permite você rapidamente declare todas rotas comuns controller. chamada única resources pode declarar todas rotas necessárias actions index, show, new, edit, create, update destroy."},{"id":229,"title":"Rotas do Rails de Fora pra Dentro","heading":"2 Roteando Resources (Recursos): O padrão do Rails","subheading":"2.1 Resources na Web","content":"navegadores solicitam páginas rails através usando método http específico, como get,post, patch,put delete. cada método solicitação executar operação resource. rota resource mapeia série solicitações relacionadas actions único controller. quando aplicação rails recebe requisição para: pede roteador enviar esta requisição action respectivo controller. primeira rota encontrada for: rails enviará esta requisição action destroy controller photos params"},{"id":230,"title":"Rotas do Rails de Fora pra Dentro","heading":"2 Roteando Resources (Recursos): O padrão do Rails","subheading":"2.2 CRUD, Verbos, e Actions","content":"rails, rota resources fornece mapeamento entre verbos http urls actions controller. convenção, cada ação também mapeada operação específica crud banco dados. única entrada arquivo roteamento, como: cria sete rotas diferentes rotas aplicação, todas mapeando controller photos:"},{"id":231,"title":"Rotas do Rails de Fora pra Dentro","heading":"2 Roteando Resources (Recursos): O padrão do Rails","subheading":"2.3 Helpers Path e URL","content":"criando rota resource expor número helpers controllers aplicação. caso resources :photos: cada desses helpers helper _url (assim como photos_url) retorna mesmo path prefixado host atual, porta prefixo path."},{"id":232,"title":"Rotas do Rails de Fora pra Dentro","heading":"2 Roteando Resources (Recursos): O padrão do Rails","subheading":"2.4 Definindo Múltiplos Resources ao Mesmo tempo","content":"você precisa criar rotas mais resource, você pode salvar pouco digitação definindo todos eles única chamada resources: isto funciona exatamente igual"},{"id":233,"title":"Rotas do Rails de Fora pra Dentro","heading":"2 Roteando Resources (Recursos): O padrão do Rails","subheading":"2.5 Resources no Singular","content":"algumas vezes você resource clientes sempre veem referenciar exemplo, você gostaria /profile sempre mostre perfil usuário esta autenticado. neste caso, você pode usar resource singular mapear /profile /profile/:id) action show: passando string esperar formato controller#action. quando usamos symbol, opção deveria trocada action:. quando usamos string opção deveria trocada controller:: esta rota resourceful: cria seis rotas diferentes aplicação, todas mapeando controller geocoders: rota resourceful singular gera estes helpers: assim como resources plural, mesmos helpers terminam _url tambem incluir host, porta, prefixo path."},{"id":234,"title":"Rotas do Rails de Fora pra Dentro","heading":"2 Roteando Resources (Recursos): O padrão do Rails","subheading":"2.6 Controller Namespaces e Routing","content":"você pode querer organizar grupos controllers namespace. mais comumente, você pode querer agrupar controllers administrativos namespace admin::, colocar esses controllers diretório app/controllers/admin. você pode agrupar routes como grupo usando bloco namespace: isto criará número rotas cada controller articles comments. admin::articlescontroller, rails criar: invés você quiser rotear /articles (sem prefixo /admin) admin::articlescontroller, você poderia especificar module bloco scope: isso também pode feito única rota: invés você quiser rotear /admin/articles articlescontroller (sem prefixo modulo admin::), você poderia especificar caminho usando bloco scope: isso também pode feito única rota: cada desses casos, rota nomeada continua mesma, como você tivesse usado scope. último exemplo, paths seguintes mapeiam articlescontroller:"},{"id":235,"title":"Rotas do Rails de Fora pra Dentro","heading":"2 Roteando Resources (Recursos): O padrão do Rails","subheading":"2.7 Nested Resources (Recursos Aninhados)","content":"comum encontrarmos resources \"filhos\" outros. exemplo, supondo aplicação esses models: nested routes (rotas aninhadas) permitem você capture este relacionamento roteamento. neste caso, você poderia incluir esta declaração rota: adição rotas magazines, esta declaração também adicionará rotas adscontriller. urls precisar magazine: isto também criar routing helpers como magazine_ads_url edit_magazine_ad_path. esses helpers pegam instância magazine como primeiro parâmetro (magazine_ads_url(@magazine)). você pode aninhar resources entre outros resources aninhados você desejar. exemplo: resources profundamente aninhados ficam confusos. neste caso, exemplo, aplicação iria reconhecer paths como: helper correspondente essa rota seria publisher_magazine_photo_url, sendo necessário especificar objetos todos três níveis. fato, esta situação confusa bastante artigo escrito jamis buck propõe regra ouro design rails: maneira evitar aninhamento profundo (como recomendado acima) gerar coleção actions scoped abaixo pai, assim sensação hierarquia, aninhar actions membro. outras palavras. apenas construir routes mínimo informação identificar unicamente recurso, como isto: essa ideia encontra equilíbrio entre rotas descritivas aninhamento profundo. existe sintaxe abreviada conseguir exatamente isso, opção :shallow: isso gerar mesmas rotas primeiro exemplo, você pode também especificar opção :shallow resource pai, cada caso todos resources aninhados serão rasos: resources artigos aqui terá seguintes rotas geradas ele: método shallow cria scope todos aninhamentos rasos. isso gera mesmas rotas exemplo anterior: existem duas opções scope customizar shallow routes. :shallow_path prefixa seus paths membros parâmetro especificado: resource comments aqui terá gerado seguintes rotas opção :shallow_prefix adiciona parâmetro especificado helpers rota nomeada: resource comments aqui terá gerado seguintes rotas"},{"id":236,"title":"Rotas do Rails de Fora pra Dentro","heading":"2 Roteando Resources (Recursos): O padrão do Rails","subheading":"2.8 Roteamento com método Concerns","content":"roteamento método concerns permitem você declarar rotas comuns podem reutilizadas dentro outros resources rotas. definir concern, bloco concern: estes concerns podem usados resources evitar duplicação códigos compartilhar mesmo comportamento entre rotas: exemplo acima equivalente além disso você pode usá-los qualquer lugar você quiser chamando concerns. exemplo, bloco scope namespace:"},{"id":237,"title":"Rotas do Rails de Fora pra Dentro","heading":"2 Roteando Resources (Recursos): O padrão do Rails","subheading":"2.9 Criando Paths e URLs de Objetos","content":"além usarmos helpers roteamento, rails pode também criar paths urls array parâmetros. exemplo, imagine você este grupo rotas: enquanto estiver usando magazine_ad_path, você pode passar instâncias magazine contrapartida numéricos: você pode também usar url_for grupo objetos, rails automaticamente determinar qual rota você quer: neste caso, rails verá @magazine magazine portanto usar helper magazine_ad_path. helpers como link_to, você pode especificar apenas objeto lugar chamada url_for inteira: você queria apenas link magazine: outras actions, você apenas precisa inserir nome desta action como primeiro elemento deste array: isto permite você tratar instâncias seus models como urls, vantagem chave usar estilo resourceful."},{"id":238,"title":"Rotas do Rails de Fora pra Dentro","heading":"2 Roteando Resources (Recursos): O padrão do Rails","subheading":"2.10 Adicionando mais RESTful Actions","content":"você esta limitado sete rotas restful routing cria padrão. você quiser, pode criar rotas adicionais aplicam coleção membros individuais coleção. adicionar rota membro, apenas adicione bloco member bloco resource: isso reconhecer /photos/1/preview get, rotear action preview photoscontroller, valor resource passado params[:id]. isso tambem criar helpers preview_photo_url preview_photo_path. dentro bloco rotas membros, cada nome rota especifica verbo http reconhecido. você pode usar get, patch, put, post delete aqui. você tiver múltiplas rotas membros, você pode também passar rota, eliminando bloco: você pode deixar fora opção :on, isso criar mesmo member route exceto valor resource estará disponível params[:photo_id] invés params[:id]. helpers rota tambem serão renomeados preview_photo_url photo_preview_url photo_preview_path. adicionar rota coleção, bloco collection: isto permitir rails reconheça paths como /photos/search get, rota action search photoscontroller. isto também criará helpers search_photos_url search_photos_path. assim como member routes, você pode passar rota: adicionar action alternativa nova usando atalho :on: isto permitir rails reconheça paths como /comments/new/preview get, rotear action preview commentescontroller. isto também criar helpers preview_new_comment_url preview_new_comment_path. além roteamento resources, rails possui suporte poderoso rotear urls arbitrárias actions. aqui, você obtém grupos rotas gerados automaticamente pelo roteamento resources. disso, você configura cada rota separadamente aplicação. embora você geralmente deva usar roteamento resources, ainda existem muitos lugares roteamento mais simples mais apropriado. necessário tentar encaixar todas partes aplicativo estrutura resources isso ajuste. particular, roteamento simples facilita mapeamento urls herdados novas actions rails."},{"id":239,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.1 Parâmetros Vinculados","content":"configurar rota regular, você fornece série symbols rails mapeia partes requisição http chegando aplicação. exemplo, considere esta rota: requisição /photos/1 processada esta rota (porque corresponde nenhuma rota anterior arquivo), resultado será invocar action display photoscontroller, tornar parâmetro final disponível como params[:id]. esta rota também encaminhará requisição recebida /photos photoscontroller#display, pois parâmetro opcional, indicado parênteses."},{"id":240,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.2 Segmentos Dinâmicos","content":"você pode configurar quantos segmentos dinâmicos rota regular desejar. qualquer segmento estará disponível action como parte params. você configurar esta rota: requisição endereço /photos/1/2 será enviada action show photoscontroller. params[:id] será params[:user_id] será \"2\"."},{"id":241,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.3 Segmentos Estáticos","content":"você pode especificar segmentos estáticos criar rota somente acrescentando dois pontos segmento: esta rota responderia caminhos como /photos/1/with_user/2. nesse caso, params seria controller: 'photos', action: 'show', '1', user_id:"},{"id":242,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.4 Usando Query String","content":"params também incluirão quaisquer parâmetros query string. exemplo, esta rota: requisição caminho /photos/1?user_id=2 será enviada action show controller photos. params será controller: 'photos', action: 'show', '1', user_id:"},{"id":243,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.5 Definindo Padrões","content":"você pode definir padrões rota fornecendo hash opção :defaults. isso também aplica parâmetros você especifica como segmentos dinâmicos. exemplo: rails corresponderia photos/12 action show photoscontroller definiria params[:format] como \"jpg\". você também pode usar defaults formato bloco definir padrões múltiplos itens:"},{"id":244,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.6 Nomeando Rotas","content":"você pode especificar nome qualquer rota usando opção :as: isso criará logout_path logout_url como helpers rota aplicação. chamar logout_path retornará /exit. você também pode usar isso substituir métodos roteamento definidos pelos resources usando rotas customizadas antes resource definido, seguinte forma: isso definirá método user_path estará disponível controllers, helpers views irão rota como /bob. dentro action show userscontroller, params[:username] conterá nome usuário. altere :username definição rota você quiser nome parâmetro seja :username."},{"id":245,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.7 Restringindo Verbos HTTP","content":"geral, você deve usar métodos get, post, put, patch delete restringir rota verbo específico. você pode usar método match opção :via combinar vários verbos mesmo tempo: você pode combinar todos verbos rota específica usando via: :all:"},{"id":246,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.8 Restrições de Segmento","content":"você pode usar opção :constraints impor formato segmento dinâmico: essa rota corresponderia caminhos como /photos/a12345, /photos/893. você pode expressar forma mais sucinta mesma rota desta maneira: constraints usam expressões regulares restrição âncoras regexp podem usadas. exemplo, seguinte rota funcionará: entanto, note você precisa usar âncoras porque todas rotas estão ancoradas início fim. exemplo, rotas seguir permitiriam articles valores to_param como 1-hello-world sempre começam número users valores to_param como david nunca começam número compartilhem mesmo namespace raiz:"},{"id":247,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.9 Restrições Baseadas em Requisições","content":"você também pode restringir rota base qualquer método objeto request retorna string. você especifica restrição baseada requisições mesma maneira especifica restrição segmento: você também pode especificar restrições usando blocos constraints:"},{"id":248,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.10 Restrições Avançadas","content":"você tiver restrição mais avançada, poderá fornecer objeto responda matches? rails deve usar. digamos você queira rotear todos usuários lista restrita restrictedlistcontroller. você poderia fazer: você também pode especificar restrições como lambda: tanto método matches? quanto lambda usam objeto request como argumento. você pode especificar restrições forma bloco. isso útil quando você precisa aplicar mesma regra várias rotas. exemplo: você também pode usar lambda:"},{"id":249,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.11 Rotas Englobadas (Glob) e Segmentos Curinga","content":"englobamento rota maneira especificar parâmetro particular deve corresponder todas partes restantes rota. exemplo: esta rota corresponder photos/12 /photos/long/path/to/12, definindo params[:other] como \"12\" \"long/path/to/12\". segmentos prefixados asterisco chamados \"segmentos curinga\". segmentos curinga podem ocorrer qualquer lugar rota. exemplo: corresponderia books/some/section/last-words-a-memoir params[:section] igual 'some/section' params[:title] igual 'last-words-a-memoir'. tecnicamente, rota pode ainda mais segmento curinga. matcher rotas atribui segmentos parâmetros maneira intuitiva. exemplo: corresponderia zoo/woo/foo/bar/baz params[:a] igual 'zoo/woo', params[:b] igual 'bar/baz'."},{"id":250,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.12 Redirecionamento","content":"você pode redirecionar qualquer rota outra usando auxiliar redirect roteador: você também pode reutilizar segmentos dinâmicos corresponder rotas redirecionar para: você também pode fornecer bloco redirecionar, recebe parâmetros caminho simbolizado objeto request: observe redirecionamento padrão redirecionamento \"moved permanently\". lembre-se alguns navegadores servidores proxy armazenam cache esse tipo redirecionamento, tornando página antiga inacessível. você pode usar opção :status alterar status resposta: todos esses casos, você fornecer host principal (http://www.example.com), rails obterá esses detalhes requisição atual."},{"id":251,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.13 Roteamento para Aplicações Rack","content":"string como 'articles#index', corresponde action index articlescontroller, você pode especificar qualquer aplicação rack como endpoint: desde myrackapp responda método call retorne [status, headers, body], roteador saberá diferença entre aplicação rack action. este apropriado via: :all, pois você deseja permitir aplicação rack manipule todos verbos conforme considerar apropriado. você especificar aplicação rack como endpoint, lembre-se rota será alterada aplicação recebimento. seguinte rota aplicação rack deve esperar rota seja /admin: você preferir aplicação rack receba requisições root path disso, mount:"},{"id":252,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.14 Usando root","content":"você pode especificar onde rails deve rotear método root: você deve colocar rota root topo arquivo, porque rota mais popular deve correspondida primeiro. você também pode usar root dentro namespaces scopes. exemplo:"},{"id":253,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.15 Rotas com Caracteres Unicode","content":"você pode especificar rotas caracteres unicode diretamente. exemplo:"},{"id":254,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.16 Rotas Diretas","content":"você pode criar helpers personalizados diretamente chamando direct. exemplo: valor retorno bloco deve argumento válido método url_for. portanto, você pode transmitir como string válida, hash, array, instância active model classe active model."},{"id":255,"title":"Rotas do Rails de Fora pra Dentro","heading":"3 Rotas sem uso de Resources","subheading":"3.17 Usando resolve","content":"método resolve permite personalizar mapeamento polimórfico models. exemplo: isso gerar singular /basket ​​em habitual /baskets/:id. enquanto rotas padrões helpers gerados resources normalmente atendem maior parte casos uso, você pode querer customizá-los alguma forma. rails permite customizar virtualmente qualquer parte genérica helpers recursos."},{"id":256,"title":"Rotas do Rails de Fora pra Dentro","heading":"4 Customizando Rotas com Recursos","subheading":"4.1 Especificando um Controller para Usar","content":"opção :controller permite você especifique controller forma explícita usar recurso. exemplo: reconhecer caminhos requisitados iniciando /photos rotear controller images: você pode usar notação diretório controllers namespaces associados. exemplo: isso direcionar chamada rota controller admin::userpermissions."},{"id":257,"title":"Rotas do Rails de Fora pra Dentro","heading":"4 Customizando Rotas com Recursos","subheading":"4.2 Especificando Restrições","content":"você pode usar opção :constraints especificar formato exigido implícito. exemplo: essa declaração restringe parâmetro forma seja igual especificação expressão regular. então, nesse caso, roteador iria mais aceitar /photos/1 essa rota. outro lado, requisição /photos/rr27 seria aceita. você pode especificar única restrição aplicar mais rota usando forma bloco:"},{"id":258,"title":"Rotas do Rails de Fora pra Dentro","heading":"4 Customizando Rotas com Recursos","subheading":"4.3 Sobrescrevendo Helpers de Nome de Rota","content":"opção permite você sobrescreva convenção nomes helpers nome rota. exemplo: reconhecer chamadas chegarem iniciando /photos direcionar requisições photoscontroller, usar valor especificado opção nomear helpers."},{"id":259,"title":"Rotas do Rails de Fora pra Dentro","heading":"4 Customizando Rotas com Recursos","subheading":"4.4 Sobrescrevendo os Segmentos new e edit","content":"opção :path_names permite você sobrescreva segmentos edit gerados automaticamente caminhos: isso roteamento reconhecer caminhos como:"},{"id":260,"title":"Rotas do Rails de Fora pra Dentro","heading":"4 Customizando Rotas com Recursos","subheading":"4.5 Prefixando os Helpers de Nome de Rota","content":"você pode usar opção prefixar helpers nome rota rails gera. esta opção evitar colisões nomes entre rotas usando escopo caminho. exemplo: isto fornecerá helpers rota como admin_photos_path, new_admin_photo_path, etc. prefixar grupo helpers rota, utilize scope: isto gerar rotas como admin_photos_path admin_accounts_path mapeadas /admin/photos /admin/accounts respectivamente. você pode prefixar rotas named parameter também: isto deixar urls como /bob/articles/-1 também permitirá referir parte username caminho como params[:username] controllers, helpers, views."},{"id":261,"title":"Rotas do Rails de Fora pra Dentro","heading":"4 Customizando Rotas com Recursos","subheading":"4.6 Restringindo as Rotas Criadas","content":"rails cria rotas sete ações diferentes (index, show, new, create, edit, update, destroy) padrão cada rota restful aplicação. opção :only rails criar apenas rotas especificadas: agora, requisição /photos daria certo, requisição post /photos (que padrão iria ação create) falhará. opção :except específica rota lista rotas rails deve criar: nesse caso, rails criar todas rotas normais exceto rota destroy (uma requisição delete /photos/:id)."},{"id":262,"title":"Rotas do Rails de Fora pra Dentro","heading":"4 Customizando Rotas com Recursos","subheading":"4.7 Traduzindo Caminhos","content":"podemos alterar nomes caminho gerados resources usando scope: rails agora cria rotas categoriescontroller."},{"id":263,"title":"Rotas do Rails de Fora pra Dentro","heading":"4 Customizando Rotas com Recursos","subheading":"4.8 Sobrescrevendo a Forma Singular","content":"você quer sobrescrever forma singular recurso, você deve colocar regras adicionais inflector inflections:"},{"id":264,"title":"Rotas do Rails de Fora pra Dentro","heading":"4 Customizando Rotas com Recursos","subheading":"4.9 Usando :as em Recursos Aninhados","content":"opção sobrescreve nome gerado automaticamente recurso helpers rota aninhados. exemplo: isto criará helpers rota como magazine_periodical_ads_url edit_magazine_periodical_ad_path."},{"id":265,"title":"Rotas do Rails de Fora pra Dentro","heading":"4 Customizando Rotas com Recursos","subheading":"4.10 Sobrescrevendo Parâmetros de Nome de Rota","content":"opção :param sobrescreve identificador padrão recurso (nome segmento dinâmico usado gerar rotas). você pode acessar segmento controller usando params[<:param>]. você pode sobrescrever activerecord::base#to_param model associado construir url: você trabalha aplicação grande milhares rotas, único arquivo config/routes.rb pode tornar complicado difícil ler. rails oferece forma quebrar esse único gigante routes.rb vários arquivos pequenos usando macro draw. você pode rota admin.rb contém todas rotas área administração, outro arquivo api.rb recursos relacionados api, etc. chamar draw(:admin) dentro próprio bloco rails.application.routes.draw tentará carregar arquivo rotas mesmo nome argumento passado (admin.rb neste exemplo). isso arquivo precisa estar localizado dentro pasta config/routes algum subdiretório (ex: config/routes/admin.rb config/routes/external/admin.rb) você pode usar roteamento normal dentro arquivo rotas admin.rb, porém, você deve cercá-lo bloco rails.application.routes.draw como arquivo principal config/routes.rb."},{"id":266,"title":"Rotas do Rails de Fora pra Dentro","heading":"5 Separando arquivos de rotas gigantes em vários arquivos menores:","subheading":"5.1 Não use este recurso a menos que você realmente precise dele","content":"vários arquivos roteamento dificulta descoberta compreensão. maioria aplicações mesmo aqueles algumas centenas rotas mais fácil pessoas desenvolvedoras terem único arquivo roteamento. roteamento rails oferece forma quebrar rotas forma organizada namespace scope. rails oferece recursos inspecionar testar suas rotas."},{"id":267,"title":"Rotas do Rails de Fora pra Dentro","heading":"6 Inspecionando e Testando Rotas","subheading":"6.1 Listando Rotas Existentes","content":"obter lista completa rotas disponíveis aplicação, visite http://localhost:3000/rails/info/routes browser quando servidor estiver rodando ambiente desenvolvimento. você pode também executar comando bin/rails routes terminal reproduzir mesmo resultado. ambos métodos irão listas todas suas rotas, mesma ordem aparece config/routes.rb. cada rota, você ver: exemplo, segue pequena parte resposta bin/rails routes rota restful: você pode também utilizar opção --expanded ativar modo formatação tabela expandida. você pode procurar rotas utilizando opção grep: isso resulta qualquer rota corresponda parcialmente nome método url, verbo http, url. você quiser somente rotas mapeiam controller especifico, existe opção"},{"id":268,"title":"Rotas do Rails de Fora pra Dentro","heading":"6 Inspecionando e Testando Rotas","subheading":"6.2 Testando Rotas","content":"rotas deveriam incluidas estratégia testes (assim como resto aplicação). rails oferece três validações nativas desenvolvidas fazer testes rotas mais simples: assert_generates valida conjunto opções particular gera caminho equivalente pode usar rota padrão rota customizada. exemplo: assert_recognizes inverso assert_generates. valida dado caminho reconhecido roteia-o lugar determinado aplicação. exemplo: você pode passar argumento :method especificar verbo http: validação assert_routing testa rota dois jeitos: testa caminho gera opções, opções gera caminho. logo, combina validações assert_generates assert_recognizes: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":269,"title":"Rails Application Templates","heading":"1 Usage","subheading":"1 Usage","content":"apply template, need provide rails generator with location template wish apply using option. this either path file url. app:template rails command apply templates existing rails application. location template needs passed location environment variable. again, this either path file url. rails templates easy understand. here's example typical rails template: following sections outline primary methods provided api:"},{"id":270,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.1 gem(*args)","content":"adds entry supplied generated application's gemfile. example, your application depends gems nokogiri: please note that this will install gems will have bundle install that."},{"id":271,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.2 gem_group(*names, &block)","content":"wraps entries inside group. example, want load rspec-rails only development test groups:"},{"id":272,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.3 add_source(source, options={}, &block)","content":"adds given source generated application's gemfile. example, need source from \"http://gems.github.com\": block given, entries block wrapped into source group."},{"id":273,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.4 environment/application(data=nil, options={}, &block)","content":"adds line inside application class config/application.rb. options[:env] specified, line appended corresponding file config/environments. block used place data argument."},{"id":274,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.5 vendor/lib/file/initializer(filename, data = nil, &block)","content":"adds initializer generated application's config/initializers directory. let's like using object#not_nil? object#not_blank?: similarly, lib() creates file lib/ directory vendor() creates file vendor/ directory. there even file(), which accepts relative path from rails.root creates directories/files needed: that'll create app/components directory foo.rb there."},{"id":275,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.6 rakefile(filename, data = nil, &block)","content":"creates rake file under lib/tasks with supplied tasks: above creates lib/tasks/bootstrap.rake with boot:strap rake task."},{"id":276,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.7 generate(what, *args)","content":"runs supplied rails generator with given arguments."},{"id":277,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.8 run(command)","content":"executes arbitrary command. just like backticks. let's want remove readme.rdoc file:"},{"id":278,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.9 rails_command(command, options = {})","content":"runs supplied command rails application. let's want migrate database: also commands with different rails environment: also commands super-user: also commands that should abort application generation they fail:"},{"id":279,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.10 route(routing_code)","content":"adds routing entry config/routes.rb file. steps above, generated person scaffold also removed readme.rdoc. now, make peoplecontroller#index default page application:"},{"id":280,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.11 inside(dir)","content":"enables command from given directory. example, have copy edge rails that wish symlink from your apps, this:"},{"id":281,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.12 ask(question)","content":"ask() gives chance some feedback from user your templates. let's want your user name shiny library you're adding:"},{"id":282,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.13 yes?(question) or no?(question)","content":"these methods questions from templates decide flow based user's answer. let's want prompt user migrations:"},{"id":283,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.14 git(:command)","content":"rails templates command:"},{"id":284,"title":"Rails Application Templates","heading":"2 Template API","subheading":"2.15 after_bundle(&block)","content":"registers callback executed after gems bundled binstubs generated. useful generated files version control: callbacks gets executed even --skip-bundle been passed. application template evaluated context rails::generators::appgenerator instance. uses apply action provided thor. this means extend change instance match your needs. example overwriting source_paths method contain location your template. methods like copy_file will accept relative paths your template's location. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":285,"title":"Active Record Migrations","heading":"1 Visão Geral de Migration","subheading":"1 Visão Geral de Migration","content":"migrations forma conveniente alterar nosso esquema banco dados tempo forma fácil consistente. elas usam ruby você precise escrever puro, permitindo esquema alterações sejam independentes banco dados utilizado. você pode pensar cada migration como sendo nova 'versão' banco dados. esquema vazio início, após cada migration modificado adicionar remover tabelas, colunas, entradas dados. active record sabe como atualizar esquema nessa linha tempo, trazendo-o qualquer ponto esteja histórico, última versão. active record também atualizará arquivo db/schema.rb igualar estrutura mais atualizada banco dados. aqui temos exemplo migration: essa migration adiciona tabela chamada products coluna tipo string chamada name coluna tipo text chamada description. coluna tipo chave primária chamada também será adicionada implicitamente, pois chave primária padrão todos models active record. macro timestamps adiciona duas colunas, created_at updated_at. essas colunas especiais automaticamente gerenciadas pelo active record, existirem. note definimos mudanças queremos aconteçam futuro. antes desta migration executada, sequer tabela. depois, tabela será criada. active record também sabe como reverter essa migration: desfizermos, removerá tabela. bancos dados suportem transações declarações alterem esquema, migrations incluídas transação. banco dados suportar esses tipos declarações, então, quando migration falhar, partes dela tiveram sucesso serão desfeitas. você terá desfazer mudanças manualmente. você quiser migration faça algo active record sabe como reverter, pode usar reversible: alternativamente, você pode usar down invés change:"},{"id":286,"title":"Active Record Migrations","heading":"2 Criando uma Migration","subheading":"2.1 Criando uma Migration Independente","content":"migrations armazenadas arquivos diretório db/migrate, cada classe migration. nome arquivo seguinte formato yyyymmddhhmmss_create_products.rb, isto timestamp (marcação data/hora) identificando migration seguida underline seguido pelo nome migration. nome classe migration camelcase) deve corresponder última parte nome arquivo. exemplo 20080906120000_create_products.rb deve definir classe createproducts 20080906120001_add_details_to_products.rb deve definir adddetailstoproducts. rails esse registro data hora determinar qual migration deve executada ordem, portanto, você estiver copiando migration outra aplicação gerar arquivo você mesmo, esteja ciente posição ordem. obviamente, calcular timestamps divertido, portanto, active record fornece gerador fazer isso você: isso criará migration vazia nomeada devidamente: esse gerador pode fazer muito mais acrescentar timestamp nome arquivo. base convenções nomenclatura argumentos (opcionais) adicionais, pode também começar concretizar migration. nome migração estiver formato \"addcolumntotable\" \"removecolumnfromtable\" seguido lista nomes colunas tipos dados, então migration contendo intruções add_column remove_column serão criadas apropriadamente. gerar você deseja adicionar índice nova coluna, você também pode fazer isso. gerar add_column apropriado add_index mesma forma, você pode gerar migration remover coluna linha comando: gera você limitação apenas coluna gerada magicamente. exemplo: gera nome migração estiver formato \"createxxx\" seguido lista nomes tipos colunas, seguida, migration criando tabela colunas listadas será gerado. exemplo: gera como sempre, gerado você apenas ponto partida. você pode adicionar remover conteúdo como achar melhor, editando arquivo db/migrate/yyyymmddhhmmss_add_details_to_products.rb. além disso, gerador aceita tipo coluna references (também disponível como belongs_to). exemplo: gera seguinte chamada [add_references][]: essa migração criará coluna user_id, references abreviação criar colunas, índices, chaves estrangeiras mesmo colunas polimórficas associação. também existe gerador produzirá join tables jointable fizer parte nome: produzirá seguinte migração:"},{"id":287,"title":"Active Record Migrations","heading":"2 Criando uma Migration","subheading":"2.2 Model Generators","content":"geradores model, resource scaffold criarão migrações apropriadas adicionar novo model. essa migração conter instruções criar tabela. você disser rails quais colunas você deseja, instruções adicionar essas colunas também serão criadas. exemplo, executando: criará migração parece isso você pode utilizar quantos pares nome/tipo coluna desejar."},{"id":288,"title":"Active Record Migrations","heading":"2 Criando uma Migration","subheading":"2.3 Usando Modificadores","content":"alguns modificadores tipo podem utilizados diretamente linha comando. eles delimitados chaves após tipo campo: exemplo, executando: produzirá migração parece isso depois criar migration usando geradores, hora começar trabalhos!"},{"id":289,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.1 Criando uma Tabela","content":"método create_table mais fundamentais, maioria vezes, será criado você usando gerador model, resource scaffold. típico seria: cria tabela products coluna chamada name. padrão, create_table criará chave primária chamada você pode mudar nome chave primária opção :primary_key (não esqueça atualizar model correspondente) você quer chave primária, você pode passar opção false. você precisa passar opções específicas banco dados você pode colocar fragmento opção :option. exemplo: acrescentará engine=blackhole instrução usada criar tabela. índice pode criado colunas criadas dentro bloco create_table passando true hash opção :index: você também pode passar opção :comment qualquer descrição tabela serão armazenados próprio bando dados poderão visualizados ferramentas administração banco dados, como mysql workbench pgadmin iii. altamente recomendável especificar comentários migrations aplicações grandes bancos dados, pois ajudam pessoas entender modelo dados gerar documentação. atualmente, apenas adaptadores mysql postgresql suportam comentários."},{"id":290,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.2 Criando uma Tabela de Junção (Join Table)","content":"método migration create_join_table cria tabela join habtm (tem pertence muitos). comum seria: cria tabela categories_products duas colunas chamadas category_id product_id. essas colunas opção :null definida como false padrão. isso pode substituído, especificando opção :column_options: padrão, nome tabela join união dois primeiros argumentos fornecidos create_join_table ordem alfabética. customizar nome tabela, forneça opção :table_name: cria tabela categorization. create_join_table também aceita bloco, você pode usar adicionar índices (que criados padrão) colunas adicionais:"},{"id":291,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.3 Mudando Tabelas","content":"primo próximo create_table change_table, usado mudar tabelas existentes. usado maneira semelhante create_table objeto produzido bloco conhece mais truques. exemplo: remove colunas description name, cria coluna string part_number adiciona índice nela. finalmente renomeia coluna upccode."},{"id":292,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.4 Mudando Colunas","content":"assim como remove_column add_column, rails fornece método migration change_column. isso muda coluna part_number tabela produtos campo :text. note comando change_column irreversível. além change_column, métodos change_column_null change_column_default usados especificamente alterar restrição nulo valores padrão coluna. isso define campo :name produtos coluna null valor padrão campo :approved true false."},{"id":293,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.5 Modificadores de Coluna","content":"modificadores coluna podem aplicados criar alterar coluna: alguns adaptadores podem suportar opções adicionais; consulte documentação adaptador específico maiores informações."},{"id":294,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.6 References","content":"método add_reference permite criação coluna apropriadamente nomeada. essa migração criará coluna role_id tabela usuários. cria index esta coluna também, menos explicitamente informado opção index: false: método add_belongs_to alias add_reference. opção polimórfica criará duas colunas tabela tags podem usado associações polimórficas: taggable_type taggable_id. chave estrangeira pode criada opção foreign_key. obter mais opções add_reference, visite documentação api. referências também podem removidas:"},{"id":295,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.7 Foreign Keys (Chaves Estrangeiras)","content":"embora seja necessário, você pode adicionar restrições foreign (chave estrangeira) garantir integridade referencial. isso adiciona nova foreign (chave estrangeira) coluna author_id tabela articles. chave referencia coluna tabela authors. nomes coluna puderem derivados nomes tabelas, você poderá usar opções :column :primary_key. rails gerar nome cada foreign (chave estrangeira) começando fk_rails_ seguido caracteres gerados especificamente partir from_table column. existe opção :name especificar nome diferente necessário. foreign (chave estrangeira) também podem removidas:"},{"id":296,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.8 Quando os Helpers não são Suficientes","content":"helpers fornecidos pelo active record forem suficientes, você poderá usar método execute executar arbitrário: mais detalhes exemplos métodos individuais, consulte documentação api. particular, documentação activerecord::connectionadapters::schemastatements (que fornece métodos disponíveis métodos change, down), activerecord::connectionadapters::tabledefinition (que fornece métodos disponíveis objeto gerado create_table) activerecord::connectionadapters::table (que fornece métodos disponíveis objeto gerado change_table)."},{"id":297,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.9 Usando o Método change","content":"método change principal maneira escrever migrations. funciona maioria casos, onde active record sabe como reverter migration automaticamente. atualmente, método change suporta apenas estas definições migrations: change_table também reversível, desde bloco chame change, change_default remove. remove_column reversível você fornecer tipo coluna como terceiro argumento. forneça também opções coluna original, caso contrário, rails poderá recriar coluna exatamente reverter: você precisar usar outros métodos, você deve usar reversible escrever métodos down usar médoto change."},{"id":298,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.10 Usando reversible","content":"migrations complexas podem exigir processamento active record sabe como reverter. você pode usar reversible especificar fazer executar migration mais fazer revertê-la. exemplo: reversible garantirá instruções também sejam executadas ordem certa. exemplo anterior migration revertido, bloco down será executado depois coluna home_page_url removida logo antes tabela distributors apagada. vezes migration fará algo simplesmente irreversível; exemplo, pode destruir alguns dados. alguns casos, você pode levantar activerecord::irreversiblemigration bloco down. alguém tentar reverter migration, mensagem erro será exibida dizendo isso pode feito."},{"id":299,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.11 Usando os métodos up/down","content":"você também pode usar estilo antigo migration usando métodos down método change. método deve descrever transformação você deseja fazer schema, método down migration deve reverter transformações feitas pelo método outras palavas, schema banco dados deve permanecer inalterado você fizer seguido down. exemplo, você criar tabela método você deve apagá-la método down. aconselhável realizar transformações precisamente ordem inversa foram feitas método exemplo seção reversible equivalente migration irreversível, você deve raise activerecord::irreversiblemigration método down. alguém tentar reveter migration, mensagem erro será exibida dizendo isso pode feito."},{"id":300,"title":"Active Record Migrations","heading":"3 Escrevendo uma Migration","subheading":"3.12 Revertendo Migrations Anteriores","content":"você pode usar capacidade active record reverter migrations usando método revert: método revert também aceita bloco instruções reverter. isso pode útil reverter partes selecionadas migrations anteriores. exemplo, vamos imaginar examplemigration seja executado mais tarde decidimos seria melhor usar validações active record, lugar constraint (restrição) check, verificar cep. mesma migration também poderia sido escrita revert isso envolveria mais algumas etapas: reverter ordem create_table reversible, substituindo create_table drop_table, finalmente mudando down vice-versa. tudo isso resolvido revert. rails fornece série comandos executar certos conjuntos migrations. primeiro comando rails relacionado migration (migração) você utilizará, provavelmente será bin/rails db:migrate. basicamente, executa método change todas migrations ainda foram executadas momento. houver nenhuma dessas migrations, nada executado. comando executará migrations base ordem data migration. observe executar comando db:migrate também chamado comando db:schema:dump, atualizará arquivo db/schema.rb corresponder estrutura banco dados. você especificar versão alvo, active record executará migrations necessárias (change, down) atingir versão especificada. versão prefixo numérico nome arquivo migration. exemplo, migrar versão execute: versão maior versão atual seja, está migrando cima), será executado método change todas migrations (incluindo execução) será executada nenhuma migration posterior. estiver migrando baixo, será executado método down todas migrations 20080906120000, incluindo execução."},{"id":301,"title":"Active Record Migrations","heading":"4 Executando as Migrations","subheading":"4.1 Revertendo a Migration","content":"tarefa comum reverter última migration. exemplo, você cometeu erro deseja corrigí-lo. invés rastrear número versão associada migration anterior, você pode executar: isso reverterá migration mais recente, seja revertendo método change executando método down. precisar desfazer várias migrations, você pode passar parâmetro step: reverter últimas migrations. comando db:migrate:redo atalho fazer rollback então refazer migration volta. assim como comando db:rollback, você pode utilizar parâmetro step precisar voltar mais versão, exemplo: nenhum desses comandos rails fazem nada você pudesse fazer db:migrate. eles apenas mais convenientes, você precisa especificar explicitamente versão qual migrar."},{"id":302,"title":"Active Record Migrations","heading":"4 Executando as Migrations","subheading":"4.2 Setup do Banco de Dados","content":"comando bin/rails db:setup criar banco dados, carregar schema inicializar dados iniciais."},{"id":303,"title":"Active Record Migrations","heading":"4 Executando as Migrations","subheading":"4.3 Reinicializando o Banco de Dados","content":"comando bin/rails db:reset eliminar banco dados configurá-lo novamente. isso funcionalmente equivalente comando bin/rails db:drop db:setup."},{"id":304,"title":"Active Record Migrations","heading":"4 Executando as Migrations","subheading":"4.4 Executando Migrations Específicas","content":"você precisar executar migration específica cima baixo, comandos db:migrate:up db:migration:down farão isso. basta especificar versão correta migration correspondente terá método change, down chamado, exemplo: executar migration executando método change método up). este comando verificará primeiro migration realizada fará nada active record entender executada."},{"id":305,"title":"Active Record Migrations","heading":"4 Executando as Migrations","subheading":"4.5 Executando Migrations em Ambientes Diferentes","content":"padrão, rodar bin/rails db:migrate será executado ambiente development (desenvolvimento). executar migrations outro ambiente, você pode especificá-lo usando variável ambiente rails_env enquanto executa comando. exemplo, executar *migrations*no ambiente test (teste), você pode executar:"},{"id":306,"title":"Active Record Migrations","heading":"4 Executando as Migrations","subheading":"4.6 Alterando o Output (Saída) de Migrations em Execução","content":"padrão, migrations informam exatamente estão fazendo quanto tempo levou. migration criando tabela adicionando índice pode produzir output como esse: vários métodos fornecidos migrations permitem você controle tudo isso: exemplo, esta migration gera seguinte output você deseja active record produza nada, execute bin/rails db:migrate verbose=false isso suprimir todos outputs ocasionalmente, você cometerá erro escrever migration. você executou migration, você pode editá-la rodá-la novamente: rails assume você rodou migration, então fazer nada quando você executar comando bin/rails db:migrate. você deve reverter migration (por exemplo bin/rails db:rollback), editar migration, então rodar comando bin/rails db:migrate versão correta seja executada. geral, edição migrations existentes ideia. você criará trabalho extra mesmo seus colegas trabalho causará dores cabeça maiores versão existente migration tiver sido executada máquinas produção. como alternativa, você deveria escrever nova migration execute mudanças necessárias. editar migration recentemente gerada ainda feito commit source control (ou, forma geral, propagada além máquina desenvolvimento) relativamente inofensivo. método revert pode ajudar escrever nova migration desfazer migrations anteriores todo partes (veja revertendo migrations anteriores acima)."},{"id":307,"title":"Active Record Migrations","heading":"6 Schema Dumping e Você","subheading":"6.1 Para que servem arquivos de Schema?","content":"migrations, poderosas como podem ser, fonte oficial schema banco dados. banco dados permanece sendo fonte oficial. padrão, rails gera arquivo db/schema.rb schema dump), tenta capturar estado atual schema banco dados. costuma mais rápido menos suscetível erros criar nova instância banco dados aplicação caregando arquivo schema meio comando bin/rails db:schema:load invés reexecutar todo histórico migrations. migrations antigas podem falhar execução estas migrations usam dependências externas estejam constante mudança dependem código aplicação evolui separadamente suas migrations. arquivos schema também úteis você deseja verificar rapidamente quais atributos objeto tipo active record possui. essa informação está código model frequentemente espalhada diversas migrations, informação facilmente acessível arquivo schema."},{"id":308,"title":"Active Record Migrations","heading":"6 Schema Dumping e Você","subheading":"6.2 Tipos de Schema Dumps","content":"formato arquivos schema gerados pelo rails controlado pela configuração config.active_record.schema_format config/application.rb. padrão, formato :ruby, pode também alterado :sql. :ruby está selecionado, então arquivo schema salvo db/schema.rb. você analisar este arquivo perceberá parece muito migration gigante. muitas maneiras exatamente isso. este arquivo criado inspecionar banco dados, expressando estrutura através comandos create_table, add_index, vai. arquivo db/schema.rb consegue expressar tudo banco dados suporta como triggers, sequences, stored procedures, etc. enquanto outras migrations podem utilizar comando execute criar estruturas banco dados suportadas pela migrations ruby, estas estruturas podem possíveis serem reconstituídas gerar novo schema padrão. você estiver utilizando estes tipos funcionalidades, você deve então alterar formato schema :sql conseguir obter arquivo schema mais preciso possa utilizado criar novas instâncias banco dados. quando formato schema definido como :sql, estrutura banco dados será reproduzida utilizando ferramenta específica banco dados sendo usado arquivo db/structure.sql. exemplo, postgresql, ferramenta pg_dump utilizada. mysql mariadb, este arquivo conter saída show create table tabelas banco. carregar schema db/structure.sql, execute bin/rails db:schema:load. carregamento deste arquivo realizado executando comandos contém. definição, isso criar cópia perfeita estrutura banco dados."},{"id":309,"title":"Active Record Migrations","heading":"6 Schema Dumping e Você","subheading":"6.3 Schema Dumps e o Controle de Versão","content":"como arquivos schema comumente utilizados criar novos bancos dados, fortemente recomendado você adicione arquivo schema controle versão. conflitos merge podem acontecer arquivo schema quando duas branches modificam. resolver estes conflitos execute bin/rails db:migrate gerar novamente arquivo schema. maneira active record trabalhar presume inteligência pertence seus models, banco dados. desta forma, funcionalidades como triggers constraints, enviam pouco desta inteligência volta banco dados, usadas frequência. validações como validates :foreign_key, uniqueness: true maneira pela qual models podem impor integridade dados. opção :dependent associações permite models destruir automaticamente objetos filhos quando objeto destruído. como qualquer coisa opera nível aplicação, estas validações podem garantir integridade referencial assim algumas pessoas aprimoram vínculos chaves estrangeiras banco dados. embora active record forneça todas ferramentas trabalhar diretamente estas funcionalidades, método execute pode usado executar arbitrário. propósito principal funcionalidade migração rails enviar comandos modificam schema usando processo consistente. migrações também podem usadas inserir modificar dados. isto útil banco dados existente pode destruído criado novo, como exemplo banco dados produção. inserir dados depois banco dados criado, rails funcionalidade padrão seeds torna processo rápido. isto especialmente útil recarregar banco dados frequência ambientes teste desenvolvimento. começar usar estafuncionalidade, preencha arquivo db/seeds.rb código ruby, execute bin/rails db:seed: isto geralmente, maneira mais limpa preparar banco dados aplicação branco. arquivos db/schema.rb db/structure.sql refletem estado atual banco dados fonte oficial reconstruí-lo. isto torna possível excluir arquivos antigos migration. quando você exclui arquivos migration diretório db/migrate, qualquer ambiente qual bin/rails db:migrate executado quando estes arquivos ainda existiam manter referência suas timestamps específicas dentro tabela interna rails chamada schema_migrations. esta tabela usada manter acompanhamento quais migrations foram executadas ambiente específico. você executar comando bin/rails db:migrate:status, mostra estado down) cada migration, você verá texto ********** file ********** próximo cada arquivo migration excluído anteriormente executado ambiente específico encontra mais diretório db/migrate/. porém, advertência. tarefas rake instalar migrations engines idempotentes. migrations presentes aplicação principal vindas instalação anterior ignoradas faltam copiadas novo carimbo data/hora (timestamp). você excluiu migrations engines antigas executou tarefa instalação novamente, você obteria novos arquivos novos carimbos data/hora comando migrate tentaria executá-las novamente. portanto, geralmente você deseja preservar migrations provenientes engines. elas comentário especial como este: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":310,"title":"Ruby on Rails 4.1 Release Notes","heading":"1 Upgrading to Rails 4.1","subheading":"1 Upgrading to Rails 4.1","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting update rails 4.1. list things watch when upgrading available upgrading ruby rails guide."},{"id":311,"title":"Ruby on Rails 4.1 Release Notes","heading":"2 Major Features","subheading":"2.1 Spring Application Preloader","content":"spring rails application preloader. speeds development keeping your application running background don't need boot every time test, rake task migration. rails applications will ship with \"springified\" binstubs. this means that bin/rails bin/rake will automatically take advantage preloaded spring environments. running rake tasks: running rails command: spring introspection: have look spring readme available features. upgrading ruby rails guide migrate existing applications this feature."},{"id":312,"title":"Ruby on Rails 4.1 Release Notes","heading":"2 Major Features","subheading":"2.2 config/secrets.yml","content":"rails generates secrets.yml file config folder. default, this file contains application's secret_key_base, could also used store other secrets such access keys external apis. secrets added this file accessible rails.application.secrets. example, with following config/secrets.yml: rails.application.secrets.some_api_key returns somekey development environment. upgrading ruby rails guide migrate existing applications this feature."},{"id":313,"title":"Ruby on Rails 4.1 Release Notes","heading":"2 Major Features","subheading":"2.3 Action Pack Variants","content":"often want render different html/json/xml templates phones, tablets, desktop browsers. variants make easy. request variant specialization request format, like :tablet, :phone, :desktop. variant before_action: respond variants action just like respond formats: provide separate templates each format variant: also simplify variants definition using inline syntax:"},{"id":314,"title":"Ruby on Rails 4.1 Release Notes","heading":"2 Major Features","subheading":"2.4 Action Mailer Previews","content":"action mailer previews provide emails look visiting special that renders them. implement preview class whose methods return mail object you'd like check: preview available http://localhost:3000/rails/mailers/notifier/welcome, list them http://localhost:3000/rails/mailers. default, these preview classes live test/mailers/previews. this configured using preview_path option. documentation detailed write"},{"id":315,"title":"Ruby on Rails 4.1 Release Notes","heading":"2 Major Features","subheading":"2.5 Active Record enums","content":"declare enum attribute where values integers database, queried name. documentation detailed write"},{"id":316,"title":"Ruby on Rails 4.1 Release Notes","heading":"2 Major Features","subheading":"2.6 Message Verifiers","content":"message verifiers used generate verify signed messages. this useful safely transport sensitive data like remember-me tokens friends. method rails.application.message_verifier returns message verifier that signs messages with derived from secret_key_base given message verifier name:"},{"id":317,"title":"Ruby on Rails 4.1 Release Notes","heading":"2 Major Features","subheading":"2.7 Module#concerning","content":"natural, low-ceremony separate responsibilities within class: this example equivalent defining eventtracking module inline, extending with activesupport::concern, then mixing todo class. documentation detailed write intended cases."},{"id":318,"title":"Ruby on Rails 4.1 Release Notes","heading":"2 Major Features","subheading":"2.8 CSRF protection from remote <script> tags","content":"cross-site request forgery (csrf) protection covers requests with javascript responses, too. that prevents third-party site from referencing your javascript attempting extract sensitive data. this means your tests that urls will fail csrf protection unless they xhr. upgrade your tests explicit about expecting xmlhttprequests. instead post :create, format: :js, switch explicit :post, :create, format: :js. please refer changelog detailed changes."},{"id":319,"title":"Ruby on Rails 4.1 Release Notes","heading":"3 Railties","subheading":"3.1 Removals","content":""},{"id":320,"title":"Ruby on Rails 4.1 Release Notes","heading":"3 Railties","subheading":"3.2 Notable changes","content":"please refer changelog detailed changes."},{"id":321,"title":"Ruby on Rails 4.1 Release Notes","heading":"4 Action Pack","subheading":"4.1 Removals","content":""},{"id":322,"title":"Ruby on Rails 4.1 Release Notes","heading":"4 Action Pack","subheading":"4.2 Notable changes","content":"please refer changelog detailed changes."},{"id":323,"title":"Ruby on Rails 4.1 Release Notes","heading":"5 Action Mailer","subheading":"5.1 Notable changes","content":"please refer changelog detailed changes."},{"id":324,"title":"Ruby on Rails 4.1 Release Notes","heading":"6 Active Record","subheading":"6.1 Removals","content":""},{"id":325,"title":"Ruby on Rails 4.1 Release Notes","heading":"6 Active Record","subheading":"6.2 Deprecations","content":""},{"id":326,"title":"Ruby on Rails 4.1 Release Notes","heading":"6 Active Record","subheading":"6.3 Notable changes","content":"before this change when defined default_scope model overridden chained conditions same field. merged like other scope. more details. please refer changelog detailed changes."},{"id":327,"title":"Ruby on Rails 4.1 Release Notes","heading":"7 Active Model","subheading":"7.1 Deprecations","content":""},{"id":328,"title":"Ruby on Rails 4.1 Release Notes","heading":"7 Active Model","subheading":"7.2 Notable changes","content":"please refer changelog detailed changes."},{"id":329,"title":"Ruby on Rails 4.1 Release Notes","heading":"8 Active Support","subheading":"8.1 Removals","content":""},{"id":330,"title":"Ruby on Rails 4.1 Release Notes","heading":"8 Active Support","subheading":"8.2 Deprecations","content":""},{"id":331,"title":"Ruby on Rails 4.1 Release Notes","heading":"8 Active Support","subheading":"8.3 Notable changes","content":"full list contributors rails many people spent many hours making rails, stable robust framework kudos them. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":332,"title":"Ruby on Rails 6.1 Release Notes","heading":"1 Upgrading to Rails 6.1","subheading":"1 Upgrading to Rails 6.1","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting update rails 6.1. list things watch when upgrading available upgrading ruby rails guide."},{"id":333,"title":"Ruby on Rails 6.1 Release Notes","heading":"2 Major Features","subheading":"2.1 Per-database Connection Switching","content":"rails provides with ability switch connections per-database. switched reading role then database connections also switched reading role. legacy_connection_handling false your configuration, rails will allow switch connections single database calling connected_to corresponding abstract class."},{"id":334,"title":"Ruby on Rails 6.1 Release Notes","heading":"2 Major Features","subheading":"2.2 Horizontal Sharding","content":"rails provided ability functionally partition (multiple partitions, different schemas) your database wasn't able support horizontal sharding (same schema, multiple partitions). rails wasn't able support horizontal sharding because models active record could only have connection per-role per-class. this fixed horizontal sharding with rails available."},{"id":335,"title":"Ruby on Rails 6.1 Release Notes","heading":"2 Major Features","subheading":"2.3 Strict Loading Associations","content":"strict loading associations allows ensure that your associations loaded eagerly stop n+1's before they happen."},{"id":336,"title":"Ruby on Rails 6.1 Release Notes","heading":"2 Major Features","subheading":"2.4 Delegated Types","content":"delegated types alternative single-table inheritance. this helps represent class hierarchies allowing superclass concrete class that represented table. each subclass table additional attributes."},{"id":337,"title":"Ruby on Rails 6.1 Release Notes","heading":"2 Major Features","subheading":"2.5 Destroy Associations Async","content":"destroy associations async adds ability applications destroy associations background job. this help avoid timeouts other performance issues your application when destroying data. please refer changelog detailed changes."},{"id":338,"title":"Ruby on Rails 6.1 Release Notes","heading":"3 Railties","subheading":"3.1 Removals","content":""},{"id":339,"title":"Ruby on Rails 6.1 Release Notes","heading":"3 Railties","subheading":"3.2 Deprecations","content":""},{"id":340,"title":"Ruby on Rails 6.1 Release Notes","heading":"3 Railties","subheading":"3.3 Notable changes","content":"please refer changelog detailed changes."},{"id":341,"title":"Ruby on Rails 6.1 Release Notes","heading":"4 Action Cable","subheading":"4.1 Removals","content":""},{"id":342,"title":"Ruby on Rails 6.1 Release Notes","heading":"4 Action Cable","subheading":"4.2 Deprecations","content":""},{"id":343,"title":"Ruby on Rails 6.1 Release Notes","heading":"4 Action Cable","subheading":"4.3 Notable changes","content":"please refer changelog detailed changes."},{"id":344,"title":"Ruby on Rails 6.1 Release Notes","heading":"5 Action Pack","subheading":"5.1 Removals","content":""},{"id":345,"title":"Ruby on Rails 6.1 Release Notes","heading":"5 Action Pack","subheading":"5.2 Deprecations","content":""},{"id":346,"title":"Ruby on Rails 6.1 Release Notes","heading":"5 Action Pack","subheading":"5.3 Notable changes","content":"please refer changelog detailed changes."},{"id":347,"title":"Ruby on Rails 6.1 Release Notes","heading":"6 Action View","subheading":"6.1 Removals","content":""},{"id":348,"title":"Ruby on Rails 6.1 Release Notes","heading":"6 Action View","subheading":"6.2 Deprecations","content":""},{"id":349,"title":"Ruby on Rails 6.1 Release Notes","heading":"6 Action View","subheading":"6.3 Notable changes","content":"please refer changelog detailed changes."},{"id":350,"title":"Ruby on Rails 6.1 Release Notes","heading":"7 Action Mailer","subheading":"7.1 Removals","content":""},{"id":351,"title":"Ruby on Rails 6.1 Release Notes","heading":"7 Action Mailer","subheading":"7.2 Deprecations","content":""},{"id":352,"title":"Ruby on Rails 6.1 Release Notes","heading":"7 Action Mailer","subheading":"7.3 Notable changes","content":"please refer changelog detailed changes."},{"id":353,"title":"Ruby on Rails 6.1 Release Notes","heading":"8 Active Record","subheading":"8.1 Removals","content":""},{"id":354,"title":"Ruby on Rails 6.1 Release Notes","heading":"8 Active Record","subheading":"8.2 Deprecations","content":""},{"id":355,"title":"Ruby on Rails 6.1 Release Notes","heading":"8 Active Record","subheading":"8.3 Notable changes","content":"please refer changelog detailed changes."},{"id":356,"title":"Ruby on Rails 6.1 Release Notes","heading":"9 Active Storage","subheading":"9.1 Removals","content":""},{"id":357,"title":"Ruby on Rails 6.1 Release Notes","heading":"9 Active Storage","subheading":"9.2 Deprecations","content":""},{"id":358,"title":"Ruby on Rails 6.1 Release Notes","heading":"9 Active Storage","subheading":"9.3 Notable changes","content":"please refer changelog detailed changes."},{"id":359,"title":"Ruby on Rails 6.1 Release Notes","heading":"10 Active Model","subheading":"10.1 Removals","content":""},{"id":360,"title":"Ruby on Rails 6.1 Release Notes","heading":"10 Active Model","subheading":"10.2 Deprecations","content":""},{"id":361,"title":"Ruby on Rails 6.1 Release Notes","heading":"10 Active Model","subheading":"10.3 Notable changes","content":"please refer changelog detailed changes."},{"id":362,"title":"Ruby on Rails 6.1 Release Notes","heading":"11 Active Support","subheading":"11.1 Removals","content":""},{"id":363,"title":"Ruby on Rails 6.1 Release Notes","heading":"11 Active Support","subheading":"11.2 Deprecations","content":""},{"id":364,"title":"Ruby on Rails 6.1 Release Notes","heading":"11 Active Support","subheading":"11.3 Notable changes","content":"please refer changelog detailed changes."},{"id":365,"title":"Ruby on Rails 6.1 Release Notes","heading":"12 Active Job","subheading":"12.1 Removals","content":""},{"id":366,"title":"Ruby on Rails 6.1 Release Notes","heading":"12 Active Job","subheading":"12.2 Deprecations","content":""},{"id":367,"title":"Ruby on Rails 6.1 Release Notes","heading":"12 Active Job","subheading":"12.3 Notable changes","content":"please refer changelog detailed changes."},{"id":368,"title":"Ruby on Rails 6.1 Release Notes","heading":"13 Action Text","subheading":"13.1 Removals","content":""},{"id":369,"title":"Ruby on Rails 6.1 Release Notes","heading":"13 Action Text","subheading":"13.2 Deprecations","content":""},{"id":370,"title":"Ruby on Rails 6.1 Release Notes","heading":"13 Action Text","subheading":"13.3 Notable changes","content":"please refer changelog detailed changes."},{"id":371,"title":"Ruby on Rails 6.1 Release Notes","heading":"14 Action Mailbox","subheading":"14.1 Removals","content":""},{"id":372,"title":"Ruby on Rails 6.1 Release Notes","heading":"14 Action Mailbox","subheading":"14.2 Deprecations","content":""},{"id":373,"title":"Ruby on Rails 6.1 Release Notes","heading":"14 Action Mailbox","subheading":"14.3 Notable changes","content":"please refer changelog detailed changes."},{"id":374,"title":"Ruby on Rails 6.1 Release Notes","heading":"15 Ruby on Rails Guides","subheading":"15.1 Notable changes","content":"full list contributors rails many people spent many hours making rails, stable robust framework kudos them. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":375,"title":"Validações do Active Record","heading":"1 Resumo das Validações","subheading":"1 Resumo das Validações","content":"este exemplo validação simples: como você pode ver, nossa validação deixa saber nossa person válida atributo name. segunda person existirá banco dados. antes entrarmos maiores detalhes, vamos falar sobre como validações funcionam nossa aplicação."},{"id":376,"title":"Validações do Active Record","heading":"1 Resumo das Validações","subheading":"1.1 Por que usar validações?","content":"validações usadas garantir dados válidos sejam salvos banco dados. exemplo, pode importante aplicação garantir todo usuário forneça endereço e-mail endereço correspondência válidos. validações model melhor maneira garantir dados válidos sejam salvos banco dados. eles bancos dados agnósticos, podem contornados usuários, fáceis manter testar. rails fornece ajudantes build-in necessidades comuns, também permite você crie seus próprios métodos validação. exitem outros modos validar dados antes deles serem salvos banco dados, incluindo restrições nativas banco dados, validações lado cliente validações nível controller. este sumário prós contras: escolha essa opção validação alguns casos específicos. opinião equipe rails validações model mais apropriadas maior parte circunstâncias."},{"id":377,"title":"Validações do Active Record","heading":"1 Resumo das Validações","subheading":"1.2 Quando as validações ocorrem?","content":"existem dois tipos objetos active record: aqueles correspondem linha banco dados aqueles correspondem. quando você cria objeto novo, exemplo, usando método new, esse objeto ainda existe banco dados. você chame save esse objeto será salvo tabela apropriada banco dados. active record método instância new_record? determinar objeto existe banco dados não. considere seguinte classe active record: podemos como funciona olhando resultado bin/rails console: criar salvar novo record será enviada operação insert banco dados. atualizando registro existente mandar operação update lugar. validações tipicamente realizadas antes esses comandos sejam enviados banco dados. alguma validação falhar, objeto será marcados como inválido active record executar operações insert update. isso evita dado inválido seja armazenado banco dados. você pode escolher validações específicas atuem quando objeto criado, salvo, editado. métodos seguir acionam validações salvar objetos forem válidos banco dados: versões bang (ex: save!) levantam exceção objeto inválido. versões normais fazem isso: save update retornam false, create retorna objeto."},{"id":378,"title":"Validações do Active Record","heading":"1 Resumo das Validações","subheading":"1.3 Pulando Validações","content":"seguintes métodos pulam validações, irão salvar objeto banco dados independente validade. eles devem usados cuidado. note save também habilidade pular validações estabelecido validate: false como argumento. essa técnica deve usada cuidado."},{"id":379,"title":"Validações do Active Record","heading":"1 Resumo das Validações","subheading":"1.4 valid? e invalid?","content":"antes salvar objeto active record, rails executa suas validações. essas validações produzirem erro, rails salva objeto. você também pode executar essas validações valid? ativa suas validações, retornando true, nenhum erro encontrado objeto, false, caso contrário. como dito acima: depois active record executar validações, qualquer erro encontrado pode acessado através método instância errors, retorna coleção erros. definição, objeto válido essa coleção estiver vazia após serem executadas validações. note objeto instanciado informará nenhum erro mesmo seja tecnicamente inválido, porque validações executadas automaticamente apenas quando objeto salvo, como acontece métodos create save. invalid? simplesmente inverso valid?. desencadeia suas validações retorna true algum erro encontrado objeto, false caso contrário."},{"id":380,"title":"Validações do Active Record","heading":"1 Resumo das Validações","subheading":"1.5 errors[]","content":"verificar determinado atributo objeto válido, você pode usar errors[:attribute]. isso retorna array todos erros :attribute. houver nenhum erro atributo especificado, array vazio exibido. esse método útil após validações terem sido executadas, porque inspeciona coleções erros aciona nenhuma validação diferente método activerecord::base#invalid? explicado acima porque verifica todo objeto válido. apenas verifica existem erros determinado atributo objeto. vamos cobrir erros validações maior detalhe seção trabalhando erros validações. active record oferece vários helpers validação pré-definidos você pode utilizar dentro suas definições classes. esses helpers providenciam regras validações comuns. toda validação falha, erro adicionado coleção errors objeto, mensagem associada atributo está sendo validado. cada helper aceita número arbitrário nomes atributos, então única linha código você consegue adicionar mesmo tipo validação vários atributos. todas validações aceitam opções :message, definem quando validações devem utilizadas qual mensagem será adicionada coleção errors caso falhe, respectivamente. opção utiliza-se valores :create :update. existe mensagem padrão erro cada helpers validação. essas mensagens utilizadas quando opção :message especificada. vamos olhada cada helpers disponíveis."},{"id":381,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.1 acceptance","content":"esse método valida checkbox marcado quando formulário submetido. tipicamente isso utilizado quando usuário necessita concordar termos serviço aplicação, confirmar algum texto lido, qualquer conceito similar. essa verificação feita terms_of_service nil. mensagem padrão erro esse helper \"must accepted\". você também pode passar mensagem customizada opção message. método também pode receber opção :accept, determina valores serão considerados como aceito. como padrão valores ['1', true] pode facilmente mudado. essa validação específica aplicações \"aceitação\" precisa gravada lugar nenhum banco dados. você campo isso helper criará atributo virtual. campo existe banco dados opção accept deve definida como true validação acontecer."},{"id":382,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.2 validates_associated","content":"você deve usar esse helper quando modelo tiver associações outros modelos também precisam validados. quando você tentar salvar objeto, valid? será chamado cada seus objetos associados. essa validação funcionará todos tipos associação. mensagem padrão erro validates_associated invalid\". repare cada objeto associado terá própria coleção errors; erros irão juntar modelo onde validação chamada."},{"id":383,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.3 confirmation","content":"você deve utilizar esse helper quando você dois campos texto devem receber exatamente mesmo conteúdo. exemplo, você pode querer confirmar endereço email senha. essa validação cria atributo virtual onde nome nome atributo deve confirmado \"_confirmation\" anexado. template view você pode utilizar algo como essa checagem feita email_confirmation nil. requisitar confirmação tenha certeza adicionou checagem presença atributo confirmação (nós iremos presence breve nesse guia): também existe opção :case_sensitive caso você queira definir restrição confirmação deve sensível letras maiúsculas minúsculas. essa opção padrão verdadeira. mensagem padrão erro esse helper \"doesn't match confirmation\"."},{"id":384,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.4 comparison","content":"esta verificação validará comparação entre quaisquer dois valores comparáveis. validador requer opção comparação seja fornecida. cada opção aceita valor, proc symbol. qualquer classe inclua comparable pode comparada. todas essas opções suportadas:"},{"id":385,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.5 exclusion","content":"esse helper valida atributos estão incluídos coleção. verdade, essa coleção pode qualquer objeto enumerável. helper exclusion opção recebe coleção valores serão aceitas atributos validados. opção atalho chamado :within pode utilizado mesmo propósito, caso queira. esse exemplo opção :message mostrar como você pode incluir valor atributo mensagem erro. lista completa opções argumento mensagem favor veja documentação sobre mensagens. mensagem erro padrão reserved\"."},{"id":386,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.6 format","content":"esse helper valida valores atributos testando eles correspondem expressão regular dada, especificada opção :with. alternativamente, você pode requerer atributo específico corresponde expressão regular usando opção :without. mensagem erro padrão invalid\"."},{"id":387,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.7 inclusion","content":"esse helper valida atributos estão incluídos coleção. verdade, essa coleção pode qualquer objeto enumerável. helper inclusion opção recebe coleção valores serão aceitas atributos validados. opção atalho chamado :within pode utilizado mesmo propósito, caso queira. esse exemplo opção :message mostrar como você pode incluir valor atributo mensagem erro. lista completa opções argumento mensagem favor veja documentação mensagem. mensagem erro padrão esse helper included list\"."},{"id":388,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.8 length","content":"esse helper valida tamanho valores atributos. disponibiliza variedade opções, então você pode especificar tamanho restrições maneiras diferentes. possible length constraint options are: possíveis opções restrições tamanho são: valor padrão mensagem erro depende tipo validação sendo usado. você pode customizar essas mensagens usando opções :wrong_length, :too_long :muito curto %{count} como espaço reservado número correspondente tamanho restrição sendo utilizada. você ainda pode utilizar opção :message especificar mensagem erro. note mensagens erro padrão estão plural (por exemplo: short (minimum %{count} characters)\"). essa razão, quando :minimum você deve disponibilizar mensagem customizada utilizar presence: true lugar. quando :within limite menor você deve disponibilizar mensagem customizada usar presence antes length."},{"id":389,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.9 numericality","content":"esse helper válida seus atributos contém somente valores numéricos. padrão, corresponder número inteiro real precedido sinal opcional negativo positivo especificar somente números inteiros permitidos mude :only_integer verdadeiro. então usar como expressão regular validar valor atributo. não, tentar converter valor número usando classe float. floats transformados bigdecimal usando precisão coluna mensagem erro padrão :only_integer \"must integer\". além :only_integer, esse helper também aceita seguintes opções adicionar restrições valores aceitáveis: mensagem erro padrão quando nenhuma opção especificada number\"."},{"id":390,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.10 presence","content":"esse helper atributos especificados estão vazios. utiliza método blank? verificar valor string branco, isso string está vazia contém espaços. você quer certeza associação está presente, você precisará testar objeto associado mesmo está presente, chave estrangeira utilizada mapear associação. dessa maneira, checado chave estrangeira existe como também objeto referenciado existe. validar registros associados cuja presença necessária, você deve especificar opção :inverse_of associação: você validar presença objeto associado através relacionamento has_one ouhas_many, verificará objeto está blank? marked_for_destruction?. como false.blank? verdadeiro, você deseja validar presença valor booleano campo, você deve usar seguintes validações: usar dessas validações, você garantirá valor será resultaria valor null maioria casos."},{"id":391,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.11 absence","content":"este helper valida atributos especificados estão ausentes. método present? verificar valor string branco, isso string está vazia contém caracteres branco. você quer certeza associação está ausente, você precisará testar objeto associado mesmo está ausente, chave estrangeira utilizada mapear associação. validar registros associados cuja ausência necessária, você deve especificar opção :inverse_of associação: você validar ausência objeto associado através relacionamento has_one ouhas_many, verificará objeto está present? marked_for_destruction?. como false.present? false, você quer validar ausência campo booleano você deve usar validates :field_name, exclusion: [true, false] mensagem padrão erro \"must blank\"."},{"id":392,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.12 uniqueness","content":"este helper valida valor atributo único antes objeto salvo. cria restrição exclusividade banco dados, portanto pode acontecer duas conexões diferentes banco dados criarem dois registros mesmo valor coluna você pretende tornar exclusiva. evitar isso, você deve criar índice exclusivo nessa coluna banco dados. validação ocorre executando consulta tabela modelo, procurando registro existente mesmo valor nesse atributo. existe opção :scope você pode usar especificar mais atributos usados limitar verificação exclusividade: você deseja criar restrição banco dados previnir possiveis violações validação exclusividade usando opção :scope, você deve criar indexação única ambas colunas banco dados. veja manual mysql mais detalhes sobre indexação múltiplas colunas manual postgres exemplos restrições únicas referenciam esse grupo colunas também opção :case_sensitive você pode usar definir restrição exclusividade fará distinção entre maiúsculas minúsculas, respeitará agrupamento banco dados padrão. opção padrão respeita agrupamento (collation) banco dados. mensagem erro padrão \"has already been taken\"."},{"id":393,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.13 validates_with","content":"esse helper passa registro classe separada feita validação. helper validates_with pega classe lista classes usar validação. mensagem erro padrão validates_with. você deve adicionar manualmente erros coleção erros registro classe validadora. implementar método validador, você deve parâmetro record definido, registro validado. como todas outras validações, validates_with utiliza opções:if, :unless :on. você passar outras opções, essas opções serão enviadas classe validadora como options: observe validador será inicializado apenas durante todo ciclo vida aplicativo, cada execução validação, portanto, tenha cuidado usar variáveis instância nele. validador suficientemente complexo você deseje variáveis instância, você poderá facilmente usar objeto ruby puro lugar:"},{"id":394,"title":"Validações do Active Record","heading":"2 Helpers de Validação","subheading":"2.14 validates_each","content":"este helper valida atributos relação bloco. possui função validação predefinida. você deve criar usando bloco, todos atributos passados validates_each serão testados contra ele. exemplo seguir, queremos nomes sobrenomes comecem letras minúsculas. bloco recebe registro, nome atributo valor atributo. você pode fazer quiser verificar dados válidos dentro bloco. validação falhar, você deverá adicionar erro modelo, tornando-o inválido. essas opções validação comuns:"},{"id":395,"title":"Validações do Active Record","heading":"3 Opções de Validação Comuns","subheading":"3.1 :allow_nil","content":"opção :allow_nil pula validação quando valor está sendo validado nil. opções completas argumento mensagem, consulte documentação mensagem."},{"id":396,"title":"Validações do Active Record","heading":"3 Opções de Validação Comuns","subheading":"3.2 :allow_blank","content":"opção :allow_blank semelhante opção :allow_nil. esta opção deixará validação passar valor atributo blank?, string vazia exemplo."},{"id":397,"title":"Validações do Active Record","heading":"3 Opções de Validação Comuns","subheading":"3.3 :message","content":"como você viu, opção :message permite você especifique mensagem será adicionada coleção errors quando validação falhar. quando esta opção usada, active record usará respectiva mensagem erro padrão cada helper validação. opção :message aceita string proc. valor string :message pode conter opcionalmente qualquer/tudo %{value}, %{attribute}, %{model} será substituído dinamicamente quando validação falhar. esta substituição feita usando i18n, posições devem exatamente correspondentes, permitidos espaços. valor proc :message recebe dois argumentos: objeto validado, hash pares chave-valor :model, :attributes :value."},{"id":398,"title":"Validações do Active Record","heading":"3 Opções de Validação Comuns","subheading":"3.4 :on","content":"opção permite você especifique quando validação deve acontecer. comportamento padrão todos helpers validação integrados executado salvar (tanto criar novo registro quanto atualizá-lo). você quiser mudar, você pode usar :create rodar validação apenas quando novo registro criado :update rodar validação apenas quando registro atualizado. você também pode usar definir contextos customizados. contexto customizado precisa acionado explicitamente passando nome contexto valid?, invalid?, save. person.valid?(:account_setup) executa ambas validações salvar model. person.save(context: :account_setup) valida person contexto account_setup antes salvar. quando acionado contexto explícito, validações executadas esse contexto, assim como quaisquer validações contexto. você também pode especificar validações como estritas lançar activemodel::strictvalidationfailed quando objeto inválido. também possível passar exceção personalizada opção :strict. vezes fará sentido validar objeto apenas quando determinada condição satisfeita. você pode fazer isso usando :unless, podem usados como symbol, proc array. você pode usar quando quiser especificar quando validação deve ocorrer. você quiser especificar quando validação deve ocorrer, você pode usar :unless."},{"id":399,"title":"Validações do Active Record","heading":"5 Validação com Condicional","subheading":"5.1 Usando um Symbol com :if e :unless","content":"você pode associar :unless symbol correspondente nome método será chamado logo antes validação acontecer. essa opção mais usada."},{"id":400,"title":"Validações do Active Record","heading":"5 Validação com Condicional","subheading":"5.2 Usando uma Proc com :if e :unless","content":"possível associar :unless objeto proc será chamado. objeto proc permite escrever condição apenas linha invés método separado. como lambdas tipos proc, elas também podem usadas escrever condições apenas linha forma mais curta."},{"id":401,"title":"Validações do Active Record","heading":"5 Validação com Condicional","subheading":"5.3 Agrupando Validações com Condicionais","content":"vezes, útil várias validações usando mesma condição. isso pode feito facilmente usando with_options. todas validações dentro bloco with_options terão automaticamente passado condição :is_admin?"},{"id":402,"title":"Validações do Active Record","heading":"5 Validação com Condicional","subheading":"5.4 Combinando Validações com Condicionais","content":"outro lado, quando várias condições definem validação deve acontecer, podemos usar array. além disso, você pode usar ambos :unless mesma validação. validação executada apenas quando todas condições nenhuma condições :unless resultarem true. quando helpers validação embutidos bastante suas necessidades, você pode implementar seus próprios validadores métodos validação como preferir."},{"id":403,"title":"Validações do Active Record","heading":"6 Realizando Validações Customizadas","subheading":"6.1 Validadores Customizados","content":"validadores customizados classes herdam activemodel::validator. essas classes devem implementar método validate, recebe record como argumento realiza validações nele. validador customizado chamado usando método validates_with. maneira mais fácil adicionar validadores customizados atributos individuais conveniente classe activemodel::eachvalidator. nesse caso, classe validadora customizada deve implementar método validate_each, recebe três argumentos: record, attribute value. esses correspondem respectivamente instância, atributo validado valor atributo instância recebida. como mostrado exemplo acima, você também pode combinar validações padrão seus próprios validadores customizados."},{"id":404,"title":"Validações do Active Record","heading":"6 Realizando Validações Customizadas","subheading":"6.2 Métodos Customizados","content":"você também pode criar métodos verificam estado seus models adicionam erros coleção errors quando eles inválidos. você deve então registrar esses métodos usando método classe validate passando symbols nomes métodos validação. você pode passar mais symbol cada método classe respectivas validações serão executadas mesma ordem elas foram registradas. método valid? verificará coleção erros está vazia, sendo assim seus métodos validação customizados devem adicionar erros quando você desejar validações falhem: padrão, tais validações executarão cada chamada método valid? salvar objeto. também possível controlar quando executar essas validações customizadas informando opção método validate, :create :update. adição métodos valid? invalid? cobertos anteriormente, rails provê outros métodos trabalhar coleção errors verificar validade objetos. seguir exibida lista métodos mais comumente utilizados. favor, verifique documentação activemodel::errors lista todos métodos disponíveis."},{"id":405,"title":"Validações do Active Record","heading":"7 Trabalhando com Erros de Validação","subheading":"7.1 errors","content":"portão através qual você pode vários detalhes cada erro. retorna instância classe activemodel::errors contendo todos erros, cada erro representado objeto activemodel::error."},{"id":406,"title":"Validações do Active Record","heading":"7 Trabalhando com Erros de Validação","subheading":"7.2 errors[]","content":"errors[] utilizado quando você quiser verificar mensagens erro atributo específico. método retorna array strings todas mensagens erro atributo informado, cada string contendo mensagem erro. houver erros relacionados atributo, método retorna array vazio."},{"id":407,"title":"Validações do Active Record","heading":"7 Trabalhando com Erros de Validação","subheading":"7.3 errors.where e objetos de erro","content":"vezes, podemos precisar mais informações sobre cada erro mensagem. cada erro encapsulado como objeto activemodel::error método where forma mais comum acesso. where retorna array objetos erro, filtrados vários graus condições. você pode várias informações desses objetos erro: você também pode gerar mensagem erro: método full_message gera mensagem mais legível, começa atributo primeira letra maiúscula."},{"id":408,"title":"Validações do Active Record","heading":"7 Trabalhando com Erros de Validação","subheading":"7.4 errors.add","content":"método permite você crie objeto erro usando atributo particular, tipo erro hash opções adicional. isso pode útil quando tiver escrevendo seus validadores (validators)."},{"id":409,"title":"Validações do Active Record","heading":"7 Trabalhando com Erros de Validação","subheading":"7.5 errors[:base]","content":"voce pode adicionar erros relacionadas estado objeto como todo, invés estarem relacionadas atributo específico. você pode adicionar erros :base quando quiser dizer objeto inválido, importando valores seus atributos."},{"id":410,"title":"Validações do Active Record","heading":"7 Trabalhando com Erros de Validação","subheading":"7.6 errors.clear","content":"método clear usado quando você intencionalmente quiser limpar toda coleção errors. claro que, chamar método errors.clear sobre objeto inválido torná-lo válido: coleção errors estará agora vazia, próxima você chamar valid? qualquer método tente salvar esse objeto base dados, validações serão executadas novamente. qualquer validações falhar, coleção errors será preenchida novo."},{"id":411,"title":"Validações do Active Record","heading":"7 Trabalhando com Erros de Validação","subheading":"7.7 errors.size","content":"método size retorna número total erros objeto. criado model adicionada validações, model criado formulário web, você provavelmente quer mostrar mensagem erro quando validações falharem. devido cada aplicação lidar esse tipo cenário forma diferente, rails inclui nenhum helper view ajudar gerar essas mensagens diretamente. contudo, devido rico número métodos rails interagirmos validações geral, podemos criar nossas próprias validações. além disso, quando geramos scaffold, rails colocará algum dentro _form.html.erb gera, exibindo lista completa erros naquele model. supondo temos modelo salvo variável instância chamada @article, terá seguinte aparência: portanto, você usar helpers formulário rails gerar seus formulários, quando erro validação ocorrer campo, isso gerar <div> extra redor entrada. você pode definir estilo desta como preferir. scaffold padrão rails gera, exemplo, adiciona essa regra css: isso significa qualquer campo erro termina pixels borda vermelha. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":412,"title":"Básico de Active Jobs","heading":"1 O que é Active Job?","subheading":"1 O que é Active Job?","content":"active framework declarar jobs fazê-los executar variedade backends fila. estes jobs podem qualquer coisa, limpezas programadas regularmente, cobranças despesas, envio emails. qualquer coisa possa cortada pequenas unidades trabalho executadas paralelamente, sério. ponto principal garantir todas aplicações rails terão infraestrutura jobs lugar. podemos então features frameworks outras gems construídas cima dela, preocupar diferenças entre vários executadores como delayed resque. dessa forma, escolher backend enfileiramento torna mais preocupação operacional. você poderá alternar entre eles reescrever seus jobs. esta seção fornecerá guia passo passo criar enfileirá-lo."},{"id":413,"title":"Básico de Active Jobs","heading":"3 Criando um Job","subheading":"3.1 Crie o Job","content":"active fornece gerador rails criar jobs. seguinte criará app/jobs (com teste anexado test/jobs): você também pode criar será executado fila específica: você quiser usar gerador, você pode criar próprio arquivo dentro app/jobs, apenas certifique-se herda applicationjob. aqui está aparência job: observe você pode definir perform quantos argumentos quiser."},{"id":414,"title":"Básico de Active Jobs","heading":"3 Criando um Job","subheading":"3.2 Enfileirar o Job","content":"enfileire usando perform_later opcionalmente, set. assim: isso enfileirar executar jobs produção você precisa configurar backend filas, seja, você precisa decidir enfileiramento terceiros rails deve usar, rails fornece apenas sistema filas processo, mantém jobs memória(ram). processo quebra máquina reiniciada, todos jobs pendentes serão perdidos backend assíncrono padrão. isso pode aplicações menores jobs críticos, maioria aplicações produção precisará escolher backend persistência."},{"id":415,"title":"Básico de Active Jobs","heading":"4 Execução de Job","subheading":"4.1 Backends","content":"active adaptadores built-in múltiplos backends fila (sidekiq resque, delayed outros). obter lista atualizada adaptadores, consulte documentação activejob::queueadapters."},{"id":416,"title":"Básico de Active Jobs","heading":"4 Execução de Job","subheading":"4.2 Configurando o Backend","content":"você pode definir facilmente backend fila: você também pode configurar backend base:"},{"id":417,"title":"Básico de Active Jobs","heading":"4 Execução de Job","subheading":"4.3 Iniciando o Backend","content":"jobs executados paralelo aplicação rails, maioria bibliotecas filas exigem você inicie serviço enfileiramento específico (além iniciar aplicação rails) processamento funcione. consulte documentação biblioteca obter instruções sobre como iniciar backend fila. aqui está lista abrangente documentação: maioria adapters suportam múltiplas filas. active você pode agendar executar fila específica usando queue_as: você pode prefixar nome fila todos jobs usando config.active_job.queue_name_prefix application.rb: você também pode configurar prefixo cada job. prefixo delimitador padrão nome fila '_'. isso pode alterado configurando config.active_job.queue_name_delimiter application.rb: você quiser mais controle qual fila será executado, você pode passar opção :queue set: controlar fila partir nível job, você pode passar bloco queue_as. bloco será executado contexto permite acessar self.arguments), deve retornar nome fila: active fornece hooks disparar lógica durante ciclo vida job. assim como outros callbacks rails, você pode implementar callbacks como métodos comuns usar método macro classe registrá-los como callbacks: métodos macro classe podem também receber bloco. considere usar esse estilo, código dentro bloco pequeno cabe numa única linha. exemplo, você pode enviar métricas cada enfileirado:"},{"id":418,"title":"Básico de Active Jobs","heading":"6 Callbacks","subheading":"6.1 Callbacks disponíveis","content":"jobs mais comuns aplicação moderna enviar e-mails fora ciclo request-response, usuário tenha esperar ele. active está integrado action mailer, permite enviar e-mails assincronamente: cada i18n.locale configurado quando criado. isso útil você enviar e-mails assincronamente: activejob suporta seguintes tipos argumentos padrão:"},{"id":419,"title":"Básico de Active Jobs","heading":"9 Tipos suportados por argumentos","subheading":"9.1 GlobalID","content":"active suporta globalid como parâmetros. isso possibilita passar objetos ativos active record invés classe/id, você deve desserializar manualmente. anteriormente, jobs eram feitos dessa forma: agora feitos dessa forma: isso funciona qualquer classe está mesclada globalid::identification que, padrão, está mesclada dentro classes active record."},{"id":420,"title":"Básico de Active Jobs","heading":"9 Tipos suportados por argumentos","subheading":"9.2 Serializers","content":"você pode ampliar lista tipos argumentos suportados. preciso definir próprio serializer: adicionar serializer lista: observe carregamento automático código durante inicialização suportado. assim recomendado configurar serializadores serem carregados apenas vez, exemplo alterando config/application.rb assim: exceções criadas durante execução podem manipuladas rescue_from: exceção tratada dentro job, então reconhecido como \"failed (falhado)\""},{"id":421,"title":"Básico de Active Jobs","heading":"10 Exceções","subheading":"10.1 Reexecução ou Descarte de jobs falhos","content":"falhou será executado novamente, exceto configurado fazer isso. possível reexecutar descartar falhou usando retry_on discard_on, respectivamente. exemplo:"},{"id":422,"title":"Básico de Active Jobs","heading":"10 Exceções","subheading":"10.2 Desserialização","content":"globalid permite serializar todos objetos active record passado #perform. registro deletado após enfileirado antes método #perform chamado, active lançar exceção activejob::deserializationerror. você pode encontrar instruções mais detalhadas sobre como testar seus jobs guia teste. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":423,"title":"Ruby on Rails 7.0 Release Notes","heading":"1 Upgrading to Rails 7.0","subheading":"1 Upgrading to Rails 7.0","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting update rails 7.0. list things watch when upgrading available upgrading ruby rails guide. please refer changelog detailed changes."},{"id":424,"title":"Ruby on Rails 7.0 Release Notes","heading":"3 Railties","subheading":"3.1 Removals","content":""},{"id":425,"title":"Ruby on Rails 7.0 Release Notes","heading":"3 Railties","subheading":"3.2 Deprecations","content":""},{"id":426,"title":"Ruby on Rails 7.0 Release Notes","heading":"3 Railties","subheading":"3.3 Notable changes","content":"please refer changelog detailed changes."},{"id":427,"title":"Ruby on Rails 7.0 Release Notes","heading":"4 Action Cable","subheading":"4.1 Removals","content":""},{"id":428,"title":"Ruby on Rails 7.0 Release Notes","heading":"4 Action Cable","subheading":"4.2 Deprecations","content":""},{"id":429,"title":"Ruby on Rails 7.0 Release Notes","heading":"4 Action Cable","subheading":"4.3 Notable changes","content":"please refer changelog detailed changes."},{"id":430,"title":"Ruby on Rails 7.0 Release Notes","heading":"5 Action Pack","subheading":"5.1 Removals","content":""},{"id":431,"title":"Ruby on Rails 7.0 Release Notes","heading":"5 Action Pack","subheading":"5.2 Deprecations","content":""},{"id":432,"title":"Ruby on Rails 7.0 Release Notes","heading":"5 Action Pack","subheading":"5.3 Notable changes","content":"please refer changelog detailed changes."},{"id":433,"title":"Ruby on Rails 7.0 Release Notes","heading":"6 Action View","subheading":"6.1 Removals","content":""},{"id":434,"title":"Ruby on Rails 7.0 Release Notes","heading":"6 Action View","subheading":"6.2 Deprecations","content":""},{"id":435,"title":"Ruby on Rails 7.0 Release Notes","heading":"6 Action View","subheading":"6.3 Notable changes","content":"please refer changelog detailed changes."},{"id":436,"title":"Ruby on Rails 7.0 Release Notes","heading":"7 Action Mailer","subheading":"7.1 Removals","content":""},{"id":437,"title":"Ruby on Rails 7.0 Release Notes","heading":"7 Action Mailer","subheading":"7.2 Deprecations","content":""},{"id":438,"title":"Ruby on Rails 7.0 Release Notes","heading":"7 Action Mailer","subheading":"7.3 Notable changes","content":"please refer changelog detailed changes."},{"id":439,"title":"Ruby on Rails 7.0 Release Notes","heading":"8 Active Record","subheading":"8.1 Removals","content":""},{"id":440,"title":"Ruby on Rails 7.0 Release Notes","heading":"8 Active Record","subheading":"8.2 Deprecations","content":""},{"id":441,"title":"Ruby on Rails 7.0 Release Notes","heading":"8 Active Record","subheading":"8.3 Notable changes","content":"please refer changelog detailed changes."},{"id":442,"title":"Ruby on Rails 7.0 Release Notes","heading":"9 Active Storage","subheading":"9.1 Removals","content":""},{"id":443,"title":"Ruby on Rails 7.0 Release Notes","heading":"9 Active Storage","subheading":"9.2 Deprecations","content":""},{"id":444,"title":"Ruby on Rails 7.0 Release Notes","heading":"9 Active Storage","subheading":"9.3 Notable changes","content":"please refer changelog detailed changes."},{"id":445,"title":"Ruby on Rails 7.0 Release Notes","heading":"10 Active Model","subheading":"10.1 Removals","content":""},{"id":446,"title":"Ruby on Rails 7.0 Release Notes","heading":"10 Active Model","subheading":"10.2 Deprecations","content":""},{"id":447,"title":"Ruby on Rails 7.0 Release Notes","heading":"10 Active Model","subheading":"10.3 Notable changes","content":"please refer changelog detailed changes."},{"id":448,"title":"Ruby on Rails 7.0 Release Notes","heading":"11 Active Support","subheading":"11.1 Removals","content":""},{"id":449,"title":"Ruby on Rails 7.0 Release Notes","heading":"11 Active Support","subheading":"11.2 Deprecations","content":""},{"id":450,"title":"Ruby on Rails 7.0 Release Notes","heading":"11 Active Support","subheading":"11.3 Notable changes","content":"please refer changelog detailed changes."},{"id":451,"title":"Ruby on Rails 7.0 Release Notes","heading":"12 Active Job","subheading":"12.1 Removals","content":""},{"id":452,"title":"Ruby on Rails 7.0 Release Notes","heading":"12 Active Job","subheading":"12.2 Deprecations","content":""},{"id":453,"title":"Ruby on Rails 7.0 Release Notes","heading":"12 Active Job","subheading":"12.3 Notable changes","content":"please refer changelog detailed changes."},{"id":454,"title":"Ruby on Rails 7.0 Release Notes","heading":"13 Action Text","subheading":"13.1 Removals","content":""},{"id":455,"title":"Ruby on Rails 7.0 Release Notes","heading":"13 Action Text","subheading":"13.2 Deprecations","content":""},{"id":456,"title":"Ruby on Rails 7.0 Release Notes","heading":"13 Action Text","subheading":"13.3 Notable changes","content":"please refer changelog detailed changes."},{"id":457,"title":"Ruby on Rails 7.0 Release Notes","heading":"14 Action Mailbox","subheading":"14.1 Removals","content":""},{"id":458,"title":"Ruby on Rails 7.0 Release Notes","heading":"14 Action Mailbox","subheading":"14.2 Deprecations","content":""},{"id":459,"title":"Ruby on Rails 7.0 Release Notes","heading":"14 Action Mailbox","subheading":"14.3 Notable changes","content":"please refer changelog detailed changes."},{"id":460,"title":"Ruby on Rails 7.0 Release Notes","heading":"15 Ruby on Rails Guides","subheading":"15.1 Notable changes","content":"full list contributors rails many people spent many hours making rails, stable robust framework kudos them. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":461,"title":"Debug de Aplicações Rails","heading":"1 View Helpers para Debugging","subheading":"1 View Helpers para Debugging","content":"tarefa comum inspecionar conteúdo variável. rails fornece três diferentes formas fazer isso:"},{"id":462,"title":"Debug de Aplicações Rails","heading":"1 View Helpers para Debugging","subheading":"1.1 debug","content":"helper debug retornar <pre> renderiza objeto usando formato yaml. isso gerar dado legível humanos partir qualquer objeto. exemplo, você esse código view: você verá algo parecido isso:"},{"id":463,"title":"Debug de Aplicações Rails","heading":"1 View Helpers para Debugging","subheading":"1.2 to_yaml","content":"como alternativa, chamar to_yaml qualquer objeto converte yaml. você pode passar esse objeto convertido método helper simple_format formatar output. assim debug mágica. código acima renderizar algo como isso:"},{"id":464,"title":"Debug de Aplicações Rails","heading":"1 View Helpers para Debugging","subheading":"1.3 inspect","content":"outro método útil mostrar valores objeto inspect, especialmente quando estamos trabalhando arrays hashes. isso imprimirá valor objeto como string. exemplo: renderizar: pode útil salvar informações arquivo tempo execução. rails mantém arquivo separado cada ambiente execução."},{"id":465,"title":"Debug de Aplicações Rails","heading":"2 O Logger","subheading":"2.1 O que é o Logger?","content":"rails utiliza classe activesupport::logger guardar informações log. outros tipos loggers, como log4r, também podem utilizados. você pode especificar logger alternativo config/application.rb qualquer outro arquivo ambiente, exemplo: seção initializer, adicione qualquer seguintes:"},{"id":466,"title":"Debug de Aplicações Rails","heading":"2 O Logger","subheading":"2.2 Níveis de Log","content":"quando algo registrado, informação armazenada local registro correspondente nível igual maior configurado. você quiser saber nível atual registro, você pode método rails.logger.level. níveis disponiveis são: :debug, :info, :warn, :error, :fatal, :unknown, correspondendo níveis respectivamente. mudar nível padrão, utilize: isso útil quando você quer criar logs ambientes diferentes desenvolvimento homologação sobrecarregar registros aplicativo informação desnecessária."},{"id":467,"title":"Debug de Aplicações Rails","heading":"2 O Logger","subheading":"2.3 Enviando Mensagens","content":"enviar mensagem ativo, método logger.(debug|info|warn|error|fatal|unknown) dentro controller, model mailer: segue exemplo método instrumentado extra: segue exemplo gerado quando ação deste controller executada: adição deste tipo facilita busca comportamentos esperados usuais. você adicionar logs extras, tenha certeza utilizar níveis maneira adequada, evitar encher seus logs ambiente produção trivialidades inúteis."},{"id":468,"title":"Debug de Aplicações Rails","heading":"2 O Logger","subheading":"2.4 Verbose Query Logs","content":"observar saída consulta banco dados logs, pode imediatamente claro várias consultas banco dados acionadas quando único método chamado: depois executar activerecord::base.verbose_query_logs true sessão bin/rails console habilitar logs consulta detalhados executar método novamente, torna-se óbvio qual linha única código está gerando todas essas chamadas discretas banco dados: abaixo cada instrução banco dados, você pode setas apontando nome arquivo origem específico número linha) método resultou chamada banco dados. isso pode ajudá-lo identificar resolver problemas desempenho causados consultas consultas únicas banco dados geram várias consultas adicionais. logs consulta detalhada habilitados padrão logs ambiente desenvolvimento após rails 5.2."},{"id":469,"title":"Debug de Aplicações Rails","heading":"2 O Logger","subheading":"2.5 Tagged Log","content":"executar aplicativos multiusuário multi-contas, muitas vezes útil capaz filtrar registros usando algumas regras personalizadas. taggedlogging active support ajuda você fazer exatamente isso, marcando linhas registro subdomínios, requisição qualquer outra coisa auxiliar debug tais aplicativos."},{"id":470,"title":"Debug de Aplicações Rails","heading":"2 O Logger","subheading":"2.6 Impacto dos logs no desempenho","content":"sempre terá pequeno impacto desempenho aplicativo rails, particularmente fazer registro disco. além disso, existem algumas sutilezas: utilizar nível :debug terá penalidade desempenho maior :fatal, número muito maior strings está sendo avaliado gravado saída (e.g. disco). outra armadilha potencial muitas chamadas logger código: exemplo acima, haverá impacto desempenho, mesmo nível saída permitido incluir debug. razão ruby avaliar essas strings, inclui instanciar objeto string tanto pesado interpolar variáveis. portanto, recomendado passar blocos métodos logger, pois estes apenas avaliado nível saída mesmo incluído nível permitido (i.e. carregamento lento). mesmo código reescrito seria: conteúdo bloco portanto, interpolação string, apenas avaliada debug está habilitado. essa economia desempenho apenas realmente perceptível grandes quantidades registro, prática empregar. when your code behaving unexpected ways, printing logs console diagnose problem. unfortunately, there times when this sort error tracking effective finding root cause problem. when actually need journey into your running source code, debugger your best companion. debugger also help want learn about rails source code don't know where start. just debug request your application this guide learn move from code have written into underlying rails code. rails includes debug gemfile applications generated cruby. default, ready development test environments. please check documentation usage."},{"id":471,"title":"Debug de Aplicações Rails","heading":"3 Debugging with the debug gem","subheading":"3.1 Entering a Debugging Session","content":"default, debugging session will start after debug library required, which happens when your boots. don't worry, session won't interfere your program. enter debugging session, binding.break aliases: binding.b debugger. following examples will debugger: once your evaluates debugging statement, it'll enter debugging session:"},{"id":472,"title":"Debug de Aplicações Rails","heading":"3 Debugging with the debug gem","subheading":"3.2 The Context","content":"after entering debugging session, type ruby code you're rails console irb. also command evaluate ruby expressions (e.g. when variable name conflicts with debugger command). besides direct evaluation, debugger also helps collect rich amount information through different commands. just name here: it'll give overview values local instance variables that visible from current frame. when used without options, lists frames stack: every frame comes with: this will give great sense about what's happening your app. however, probably will notice that: don't worry, backtrace command provides options help filter frames: it's also possible these options together: backtrace [num] /pattern/. this command similar irb's command. will show what's accessible from current scope, including: find more commands configuration options from documentation. debugging with debug works fine most time, there's edge case: evaluate expression console that autoloads namespace defined file, constants that namespace won't found. example, application these files: hotel loaded, then will raise nameerror. some cases, ruby will able resolve unintended constant different scope. this, please restart your debugging session with eager loading enabled (config.eager_load true). stepping commands line next, continue, etc., present this issue. namespaces defined implicitly only subdirectories subject this issue either. ruby/debug#408 details. console pouco semelhante debug, porém executada navegador. qualquer página você esteja desenvolvendo, você pode solicitar console contexto view controller. console deve renderizado próximo conteúdo html."},{"id":473,"title":"Debug de Aplicações Rails","heading":"4 Debug com a gem web-console","subheading":"4.1 Console","content":"dentro qualquer controller action view, você pode utilizar console através chamada método console. exemplo, controller: view: isso renderizar console dentro view. você precisa preocupar localização chamada método console; será renderizado próximo elemento invocado, próximo conteúdo html. console executa código ruby nativo: você pode definir instanciar classes personalizadas, criar novos models, inspecionar variáveis."},{"id":474,"title":"Debug de Aplicações Rails","heading":"4 Debug com a gem web-console","subheading":"4.2 Inspecionando Variáveis","content":"você pode chamar instance_variables listar todas variáveis instância disponíveis contexto. você deseja listar todas variáveis locais, você pode fazer isso usando local_variables."},{"id":475,"title":"Debug de Aplicações Rails","heading":"4 Debug com a gem web-console","subheading":"4.3 Configurações","content":"web-console avalia código ruby simples remotamente servidor, tente usar produção. aplicativo ruby rails não) pode vazar memória (memory leak) tanto código ruby quanto nível código nesta seção, você aprenderá como encontrar corrigir esses vazamentos usando ferramentas tais como valgrind."},{"id":476,"title":"Debug de Aplicações Rails","heading":"5 Debug de Vazamentos de Memórias","subheading":"5.1 Valgrind","content":"valgrind aplicativo detectar vazamentos memória baseados condições corrida. existem ferramentas valgrind podem detectar automaticamente muitos bugs threading gerenciamento memória, criar perfis seus programas detalhes. exemplo, extensão intérprete chama malloc() chama corretamente free(), essa memória estará disponível aplicativo seja encerrado. obter mais informações sobre como instalar valgrind usar ruby, consulte valgrind ruby evan weaver."},{"id":477,"title":"Debug de Aplicações Rails","heading":"5 Debug de Vazamentos de Memórias","subheading":"5.2 Encontrando um vazamento de memória","content":"excelente artigo inglês) sobre detecção correção vazamentos memória derailed, você pode aqui. existem alguns plugins rails ajudar procurar erros debugar aplicação. aqui está lista plugins úteis debug: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":478,"title":"Ruby on Rails 2.3 Release Notes","heading":"1 Application Architecture","subheading":"1 Application Architecture","content":"there major changes architecture rails applications: complete integration rack modular server interface, renewed support rails engines."},{"id":479,"title":"Ruby on Rails 2.3 Release Notes","heading":"1 Application Architecture","subheading":"1.1 Rack Integration","content":"rails broken with past, uses rack everywhere. this required resulted tremendous number internal changes (but cgi, don't worry; rails supports through proxy interface). still, this major change rails internals. after upgrading 2.3, should test your local environment your production environment. some things test: here's summary rack-related changes:"},{"id":480,"title":"Ruby on Rails 2.3 Release Notes","heading":"1 Application Architecture","subheading":"1.2 Renewed Support for Rails Engines","content":"after some versions without upgrade, rails offers some features rails engines (rails applications that embedded within other applications). first, routing files engines automatically loaded reloaded now, just like your routes.rb file (this also applies routing files other plugins). second, your plugin folder, then app/[models|controllers|helpers] will automatically added rails load path. engines also support adding view paths now, action mailer well action view will views from engines other plugins. ruby rails guides project published several additional guides rails 2.3. addition, separate site maintains updated copies guides edge rails. other documentation efforts include relaunch rails wiki early planning rails book. rails should pass tests whether running ruby now-released ruby 1.9.1. should aware, though, that moving 1.9.1 entails checking data adapters, plugins, other code that depend ruby 1.9.1 compatibility, well rails core. active record gets quite number features fixes rails 2.3. highlights include nested attributes, nested transactions, dynamic default scopes, batch processing."},{"id":481,"title":"Ruby on Rails 2.3 Release Notes","heading":"4 Active Record","subheading":"4.1 Nested Attributes","content":"active record update attributes nested models directly, provided tell turning nested attributes enables number things: automatic (and atomic) saving record together with associated children, child-aware validations, support nested forms (discussed later). also specify requirements records that added nested attributes using :reject_if option:"},{"id":482,"title":"Ruby on Rails 2.3 Release Notes","heading":"4 Active Record","subheading":"4.2 Nested Transactions","content":"active record supports nested transactions, much-requested feature. write code like this: nested transactions roll back inner transaction without affecting state outer transaction. want transaction nested, must explicitly :requires_new option; otherwise, nested transaction simply becomes part parent transaction does currently rails 2.2). under covers, nested transactions using savepoints they're supported even databases that don't have true nested transactions. there also magic going make these transactions play well with transactional fixtures during testing."},{"id":483,"title":"Ruby on Rails 2.3 Release Notes","heading":"4 Active Record","subheading":"4.3 Dynamic Scopes","content":"know about dynamic finders rails (which allow concoct methods like find_by_color_and_flavor fly) named scopes (which allow encapsulate reusable query conditions into friendly names like currently_active). well, have dynamic scope methods. idea together syntax that allows filtering method chaining. example: there's nothing define dynamic scopes: they just work."},{"id":484,"title":"Ruby on Rails 2.3 Release Notes","heading":"4 Active Record","subheading":"4.4 Default Scopes","content":"rails will introduce notion default scopes similar named scopes, applying named scopes find methods within model. example, write default_scope :order 'name asc' time retrieve records from that model they'll come sorted name (unless override option, course)."},{"id":485,"title":"Ruby on Rails 2.3 Release Notes","heading":"4 Active Record","subheading":"4.5 Batch Processing","content":"process large numbers records from active record model with less pressure memory using find_in_batches: pass most find options into find_in_batches. however, cannot specify order that records will returned (they will always returned ascending order primary key, which must integer), :limit option. instead, :batch_size option, which defaults 1000, number records that will returned each batch. find_each method provides wrapper around find_in_batches that returns individual records, with find itself being done batches default): note that should only this method batch processing: small numbers records (less than 1000), should just regular find methods with your loop."},{"id":486,"title":"Ruby on Rails 2.3 Release Notes","heading":"4 Active Record","subheading":"4.6 Multiple Conditions for Callbacks","content":"when using active record callbacks, combine :unless options same callback, supply multiple conditions array:"},{"id":487,"title":"Ruby on Rails 2.3 Release Notes","heading":"4 Active Record","subheading":"4.7 Find with having","content":"rails :having option find well has_many has_and_belongs_to_many associations) filtering records grouped finds. those with heavy backgrounds know, this allows filtering based grouped results:"},{"id":488,"title":"Ruby on Rails 2.3 Release Notes","heading":"4 Active Record","subheading":"4.8 Reconnecting MySQL Connections","content":"mysql supports reconnect flag connections true, then client will reconnecting server before giving case lost connection. reconnect true your mysql connections database.yml this behavior from rails application. default false, behavior existing applications doesn't change."},{"id":489,"title":"Ruby on Rails 2.3 Release Notes","heading":"4 Active Record","subheading":"4.9 Other Active Record Changes","content":"action controller rolls some significant changes rendering, well improvements routing other areas, this release."},{"id":490,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.1 Unified Rendering","content":"actioncontroller::base#render smarter about deciding what render. just tell what render expect right results. older versions rails, often need supply explicit information render: rails 2.3, just supply what want render: rails chooses between file, template, action depending whether there leading slash, embedded slash, slash what's rendered. note that also symbol instead string when rendering action. other rendering styles (:inline, :text, :update, :nothing, :json, :xml, :js) still require explicit option."},{"id":491,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.2 Application Controller Renamed","content":"you're people always been bothered special-case naming application.rb, rejoice! it's been reworked application_controller.rb rails 2.3. addition, there's rake task, rake rails:update:application_controller this automatically will part normal rake rails:update process."},{"id":492,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.3 HTTP Digest Authentication Support","content":"rails built-in support http digest authentication. call authenticate_or_request_with_http_digest with block that returns user's password (which then hashed compared against transmitted credentials):"},{"id":493,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.4 More Efficient Routing","content":"there couple significant routing changes rails 2.3. formatted_ route helpers gone, favor just passing :format option. this cuts down route generation process resource save substantial amount memory 100mb large applications). your code uses formatted_ helpers, will still work time being that behavior deprecated your application will more efficient rewrite those routes using standard. another change that rails supports multiple routing files, just routes.rb. routeset#add_configuration_file bring more routes time without clearing currently-loaded routes. while this change most useful engines, application that needs load routes batches."},{"id":494,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.5 Rack-based Lazy-loaded Sessions","content":"change pushed underpinnings action controller session storage down rack level. this involved good deal work code, though should completely transparent your rails applications bonus, some icky patches around session handler removed). it's still significant, though, simple reason: non-rails rack applications have access same session storage handlers (and therefore same session) your rails applications. addition, sessions lazy-loaded line with loading improvements rest framework). this means that longer need explicitly disable sessions don't want them; just don't refer them they won't load."},{"id":495,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.6 MIME Type Handling Changes","content":"there couple changes code handling mime types rails. first, mime::type implements operator, making things much cleaner when need check presence type that synonyms: other change that framework uses mime::js when checking javascript various spots, making handle those alternatives cleanly."},{"id":496,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.7 Optimization of respond_to","content":"some first fruits rails-merb team merger, rails includes some optimizations respond_to method, which course heavily used many rails applications allow your controller format results differently based mime type incoming request. after eliminating call method_missing some profiling tweaking, we're seeing improvement number requests second served with simple respond_to that switches between three formats. best part? change required code your application take advantage this speedup."},{"id":497,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.8 Improved Caching Performance","content":"rails keeps per-request local cache read from remote cache stores, cutting down unnecessary reads leading better site performance. while this work originally limited memcachestore, available remote store than implements required methods."},{"id":498,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.9 Localized Views","content":"rails provide localized views, depending locale that have set. example, suppose have posts controller with show action. default, this will render app/views/posts/show.html.erb. i18n.locale :da, will render app/views/posts/show.da.html.erb. localized template isn't present, undecorated version will used. rails also includes i18n#available_locales i18n::simplebackend#available_locales, which return array translations that available current rails project. addition, same scheme localize rescue files public directory: public/500.da.html public/404.en.html work, example."},{"id":499,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.10 Partial Scoping for Translations","content":"change translation makes things easier less repetitive write translations within partials. call translate(\".foo\") from people/index.html.erb template, you'll actually calling i18n.translate(\"people.index.foo\") don't prepend with period, then doesn't scope, just before."},{"id":500,"title":"Ruby on Rails 2.3 Release Notes","heading":"5 Action Controller","subheading":"5.11 Other Action Controller Changes","content":"action view rails picks nested model forms, improvements render, more flexible prompts date select helpers, speedup asset caching, among other things."},{"id":501,"title":"Ruby on Rails 2.3 Release Notes","heading":"6 Action View","subheading":"6.1 Nested Object Forms","content":"provided parent model accepts nested attributes child objects discussed active record section), create nested forms using form_for field_for. these forms nested arbitrarily deep, allowing edit complex object hierarchies single view without excessive code. example, given this model: write this view rails 2.3:"},{"id":502,"title":"Ruby on Rails 2.3 Release Notes","heading":"6 Action View","subheading":"6.2 Smart Rendering of Partials","content":"render method been getting smarter over years, it's even smarter now. have object collection appropriate partial, naming matches just render object things will work. example, rails 2.3, these render calls will work your view (assuming sensible naming):"},{"id":503,"title":"Ruby on Rails 2.3 Release Notes","heading":"6 Action View","subheading":"6.3 Prompts for Date Select Helpers","content":"rails 2.3, supply custom prompts various date select helpers (date_select, time_select, datetime_select), same with collection select helpers. supply prompt string hash individual prompt strings various components. also just :prompt true custom generic prompt:"},{"id":504,"title":"Ruby on Rails 2.3 Release Notes","heading":"6 Action View","subheading":"6.4 AssetTag Timestamp Caching","content":"you're likely familiar with rails' practice adding timestamps static asset paths \"cache buster\". this helps ensure that stale copies things like images stylesheets don't served user's browser cache when change them server. modify this behavior with cache_asset_timestamps configuration option action view. enable cache, then rails will calculate timestamp once when first serves asset, save that value. this means fewer (expensive) file system calls serve static assets also means that can't modify assets while server running expect changes picked clients."},{"id":505,"title":"Ruby on Rails 2.3 Release Notes","heading":"6 Action View","subheading":"6.5 Asset Hosts as Objects","content":"asset hosts more flexible edge rails with ability declare asset host specific object that responds call. this allows implement complex logic need your asset hosting."},{"id":506,"title":"Ruby on Rails 2.3 Release Notes","heading":"6 Action View","subheading":"6.6 grouped_options_for_select Helper Method","content":"action view already bunch helpers generating select controls, there's more: grouped_options_for_select. this accepts array hash strings, converts them into string option tags wrapped with optgroup tags. example: returns"},{"id":507,"title":"Ruby on Rails 2.3 Release Notes","heading":"6 Action View","subheading":"6.7 Disabled Option Tags for Form Select Helpers","content":"form select helpers (such select options_for_select) support :disabled option, which take single value array values disabled resulting tags: returns also anonymous function determine runtime which options from collections will selected and/or disabled:"},{"id":508,"title":"Ruby on Rails 2.3 Release Notes","heading":"6 Action View","subheading":"6.8 A Note About Template Loading","content":"rails includes ability enable disable cached templates particular environment. cached templates give speed boost because they don't check template file when they're rendered they also mean that can't replace template fly\" without restarting server. most cases, you'll want template caching turned production, which making setting your production.rb file: this line will generated default rails application. you've upgraded from older version rails, rails will default caching templates production test development."},{"id":509,"title":"Ruby on Rails 2.3 Release Notes","heading":"6 Action View","subheading":"6.9 Other Action View Changes","content":"active support interesting changes, including introduction object#try."},{"id":510,"title":"Ruby on Rails 2.3 Release Notes","heading":"7 Active Support","subheading":"7.1 Object#try","content":"folks have adopted notion using try() attempt operations objects. it's especially helpful views where avoid nil-checking writing code like @person.try(:name) well, it's baked right into rails. implemented rails, raises nomethoderror private methods always returns object nil."},{"id":511,"title":"Ruby on Rails 2.3 Release Notes","heading":"7 Active Support","subheading":"7.2 Object#tap Backport","content":"object#tap addition ruby 1.8.7 that similar returning method that rails while: yields block, then returns object that yielded. rails includes code make this available under older versions ruby well."},{"id":512,"title":"Ruby on Rails 2.3 Release Notes","heading":"7 Active Support","subheading":"7.3 Swappable Parsers for XMLmini","content":"support parsing active support been made more flexible allowing swap different parsers. default, uses standard rexml implementation, easily specify faster libxml nokogiri implementations your applications, provided have appropriate gems installed:"},{"id":513,"title":"Ruby on Rails 2.3 Release Notes","heading":"7 Active Support","subheading":"7.4 Fractional seconds for TimeWithZone","content":"time timewithzone classes include xmlschema method return time xml-friendly string. rails 2.3, timewithzone supports same argument specifying number digits fractional second part returned string that time does:"},{"id":514,"title":"Ruby on Rails 2.3 Release Notes","heading":"7 Active Support","subheading":"7.5 JSON Key Quoting","content":"look spec \"json.org\" site, you'll discover that keys json structure must strings, they must quoted with double quotes. starting with rails 2.3, right thing here, even with numeric keys."},{"id":515,"title":"Ruby on Rails 2.3 Release Notes","heading":"7 Active Support","subheading":"7.6 Other Active Support Changes","content":"addition rack changes covered above, railties (the core code rails itself) sports number significant changes, including rails metal, application templates, quiet backtraces."},{"id":516,"title":"Ruby on Rails 2.3 Release Notes","heading":"8 Railties","subheading":"8.1 Rails Metal","content":"rails metal mechanism that provides superfast endpoints inside your rails applications. metal classes bypass routing action controller give speed cost things action controller, course). this builds recent foundation work make rails rack application with exposed middleware stack. metal endpoints loaded from your application from plugins."},{"id":517,"title":"Ruby on Rails 2.3 Release Notes","heading":"8 Railties","subheading":"8.2 Application Templates","content":"rails incorporates jeremy mcanally's application generator. what this means that have template-based application generation built right into rails; have plugins include every application (among many other cases), just template once over over again when rails command. there's also rake task apply template existing application: this will layer changes from template whatever code project already contains."},{"id":518,"title":"Ruby on Rails 2.3 Release Notes","heading":"8 Railties","subheading":"8.3 Quieter Backtraces","content":"building thoughtbot's quiet backtrace plugin, which allows selectively remove lines from test::unit backtraces, rails implements activesupport::backtracecleaner rails::backtracecleaner core. this supports both filters perform regex-based substitutions backtrace lines) silencers remove backtrace lines entirely). rails automatically adds silencers most common noise application, builds config/backtrace_silencers.rb file hold your additions. this feature also enables prettier printing from backtrace."},{"id":519,"title":"Ruby on Rails 2.3 Release Notes","heading":"8 Railties","subheading":"8.4 Faster Boot Time in Development Mode with Lazy Loading/Autoload","content":"quite work done make sure that bits rails (and dependencies) only brought into memory when they're actually needed. core frameworks active support, active record, action controller, action mailer, action view using autoload lazy-load their individual classes. this work should help keep memory footprint down improve overall rails performance. also specify using preload_frameworks option) whether core libraries should autoloaded startup. this defaults false that rails autoloads itself piece-by-piece, there some circumstances where still need bring everything once passenger jruby both want rails loaded together."},{"id":520,"title":"Ruby on Rails 2.3 Release Notes","heading":"8 Railties","subheading":"8.5 rake gem Task Rewrite","content":"internals various rake tasks have been substantially revised, make system work better variety cases. system knows difference between development runtime dependencies, more robust unpacking system, gives better information when querying status gems, less prone \"chicken egg\" dependency issues when you're bringing things from scratch. there also fixes using commands under jruby dependencies that bring external copies gems that already vendored."},{"id":521,"title":"Ruby on Rails 2.3 Release Notes","heading":"8 Railties","subheading":"8.6 Other Railties Changes","content":"pieces older code deprecated this release: release notes compiled mike gunderloy. this version rails release notes compiled based rails 2.3. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":522,"title":"Ruby on Rails 4.0 Release Notes","heading":"1 Upgrading to Rails 4.0","subheading":"1 Upgrading to Rails 4.0","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting update rails 4.0. list things watch when upgrading available upgrading ruby rails guide."},{"id":523,"title":"Ruby on Rails 4.0 Release Notes","heading":"2 Creating a Rails 4.0 application","subheading":"2.1 Vendoring Gems","content":"rails uses gemfile application root determine gems require your application start. this gemfile processed bundler gem, which then installs your dependencies. even install dependencies locally your application that doesn't depend system gems. more information: bundler homepage"},{"id":524,"title":"Ruby on Rails 4.0 Release Notes","heading":"2 Creating a Rails 4.0 application","subheading":"2.2 Living on the Edge","content":"bundler gemfile makes freezing your rails application easy with dedicated bundle command. want bundle straight from repository, pass --edge flag: have local checkout rails repository want generate application using that, pass --dev flag: "},{"id":525,"title":"Ruby on Rails 4.0 Release Notes","heading":"3 Major Features","subheading":"3.1 Upgrade","content":""},{"id":526,"title":"Ruby on Rails 4.0 Release Notes","heading":"3 Major Features","subheading":"3.2 ActionPack","content":""},{"id":527,"title":"Ruby on Rails 4.0 Release Notes","heading":"3 Major Features","subheading":"3.3 General","content":""},{"id":528,"title":"Ruby on Rails 4.0 Release Notes","heading":"3 Major Features","subheading":"3.4 Security","content":"rails 4.0, several features have been extracted into gems. simply extracted gems your gemfile bring functionality back. please refer changelog detailed changes."},{"id":529,"title":"Ruby on Rails 4.0 Release Notes","heading":"6 Railties","subheading":"6.1 Notable changes","content":""},{"id":530,"title":"Ruby on Rails 4.0 Release Notes","heading":"6 Railties","subheading":"6.2 Deprecations","content":"please refer changelog detailed changes."},{"id":531,"title":"Ruby on Rails 4.0 Release Notes","heading":"7 Action Mailer","subheading":"7.1 Notable changes","content":""},{"id":532,"title":"Ruby on Rails 4.0 Release Notes","heading":"7 Action Mailer","subheading":"7.2 Deprecations","content":"please refer changelog detailed changes."},{"id":533,"title":"Ruby on Rails 4.0 Release Notes","heading":"8 Active Model","subheading":"8.1 Notable changes","content":""},{"id":534,"title":"Ruby on Rails 4.0 Release Notes","heading":"8 Active Model","subheading":"8.2 Deprecations","content":"please refer changelog detailed changes."},{"id":535,"title":"Ruby on Rails 4.0 Release Notes","heading":"9 Active Support","subheading":"9.1 Notable changes","content":""},{"id":536,"title":"Ruby on Rails 4.0 Release Notes","heading":"9 Active Support","subheading":"9.2 Deprecations","content":"please refer changelog detailed changes."},{"id":537,"title":"Ruby on Rails 4.0 Release Notes","heading":"10 Action Pack","subheading":"10.1 Notable changes","content":""},{"id":538,"title":"Ruby on Rails 4.0 Release Notes","heading":"10 Action Pack","subheading":"10.2 Deprecations","content":"please refer changelog detailed changes."},{"id":539,"title":"Ruby on Rails 4.0 Release Notes","heading":"11 Active Record","subheading":"11.1 Notable changes","content":""},{"id":540,"title":"Ruby on Rails 4.0 Release Notes","heading":"11 Active Record","subheading":"11.2 Deprecations","content":"full list contributors rails many people spent many hours making rails, stable robust framework kudos them. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":541,"title":"Começando com Rails","heading":"1 Premissas do Guia","subheading":"1 Premissas do Guia","content":"este guia projetado iniciantes desejam criar aplicação rails zero. assume você tenha nenhuma experiência anterior rails. rails framework aplicações executado cima linguagem programação ruby. você nenhuma experiência ruby, você achar curva aprendizado bastante íngrime começando direto rails. existem diversas listas organizadas materiais online aprender ruby: fique atento alguns materiais, apesar excelentes, envolvem versões antigas ruby podem incluir parte sintaxe você dia-a-dia desenvolvendo rails. rails framework desenvolvimento aplicações escrito linguagem programação ruby. projetado facilitar desenvolvimento aplicações web, criando premissas sobre tudo pessoa desenvolvedora precisa começar. permite você escreva menos código, enquanto realiza mais muitas outras linguagens frameworks. pessoas desenvolvedoras experientes rails, também dizem desenvolver aplicações ficou mais divertido. rails software opinativo. assumindo \"melhor\" maneira fazer coisas, projetado encorajar essa maneira alguns casos desencorajar alternativas. você aprender \"rails way\", provavelmente terá grande aumento produtividade. você insistir velhos hábitos outras linguagens, tentando usar padrões você aprendeu outro lugar, você pode experiência menos feliz. filosofia rails possui dois princípios fundamentais: melhor forma esse guia seguir passo passo. todos passos essenciais rodar aplicação exemplo nenhum código passos adicionais serão necessários. seguindo este guia, você criar projeto rails chamado blog, weblog (muito) simples. antes você começar construir aplicação, você precisa certeza rails instalado."},{"id":542,"title":"Começando com Rails","heading":"3 Criando um Novo Projeto em Rails","subheading":"3.1 Instalando o Rails","content":"antes você instalar rails, você deve validar certeza sistema requisitos necessários instalados. esses incluem: abra prompt linha comando. macos abra terminal.app; windows escolha \"executar\" menu inicial digite cmd.exe. qualquer comando antecede sinal dólar deverá rodado linha comando. verifique você versão atual ruby instalado: rails necessita versão ruby 2.7.0 mais atual. preferivel usar última versão ruby. número versão retornada menor este número (como 2.3.7, 1.8.7), você precisará instalar versão ruby mais atual. instalar rails windows, você primeiro instalar ruby installer. mais informações instalação outros sistemas operacionais, olhada ruby-lang.org. você também precisará instalar banco dados sqlite3. muitos sistemas operacionais populares semelhantes unix fornecidos versão compatível sqlite3. outros sistemas você pode achar mais instruções instalação sqlite3 website. verifique está corretamente instalado carregado path: programa deverá reportar versão. fim, você precisará node.js yarn instalados gerenciar javascript aplicação. encontre instruções instalação site node.js verifique está instalado corretamente seguinte comando: versão node.js deve impressa. certifique-se maior 8.16.0. instalar yarn, siga instruções instalação instruções site yarn. execução deste comando deve imprimir versão yarn: aparecer algo como \"1.22.0\", yarn instalado corretamente. instalar rails, comando install fornecido pelo rubygems: verificar você tudo instalado corretamente, você deve rodar comando seguir novo terminal: esse comando retornar algo como \"rails 7.0.0\", você está pronto continuar."},{"id":543,"title":"Começando com Rails","heading":"3 Criando um Novo Projeto em Rails","subheading":"3.2 Criando a Aplicação Blog","content":"rails vários scripts chamados generators projetados tornar vida desenvolvedor fácil, criando tudo necessário começar trabalhar tarefa particular. desses generator nova aplicação, fornecer base nova aplicação rails você precise escrever tudo sozinho. utilizar esse generator, abra terminal, navegue diretório onde você tenha permissão criar arquivos, rode: este comando criar aplicação rails chamada blog diretório blog instalar dependências gems foram mencionadas gemfile usando bundle install. depois criar aplicação blog, entre pasta: pasta blog vários arquivos gerados pastas compõem estrutura aplicação rails. maior parte execução deste tutorial será feito pasta app, seguir teremos resumo básico funções cada arquivos pastas rails gerou padrão: começar vamos colocar texto tela rapidamente. fazer isso, você precisa servidor aplicação rails esteja execução."},{"id":544,"title":"Começando com Rails","heading":"4 Olá, Rails!","subheading":"4.1 Inicializando o Servidor Web","content":"você aplicação rails funcional. vê-la você deve iniciar servidor máquina desenvolvimento. você pode fazer isso executando seguinte comando diretório blog: execução comando iniciar puma, servidor distribuído rails padrão. aplicação execução, abra navegador navegue http://localhost:3000. você deve página padrão informações rails:  quando você deseja interromper execução servidor web, pressione ctrl+c janela terminal servidor está sendo executado. ambiente desenvolvimento, rails geralmente requer você reinicie servidor; mudanças arquivos automaticamente interpretadas pelo servidor. página \"yay! você está rails! (yay! you're rails!)\" smoke test (teste sanidade) nova aplicação rails: garante software esteja configurado corretamente, suficiente gerar página."},{"id":545,"title":"Começando com Rails","heading":"4 Olá, Rails!","subheading":"4.2 Diga \"Olá\", Rails","content":"rails diga \"olá\", você precisa criar mínimo rota (route), controller action view. route mapeia requisição action controller. action controller todo trabalho necessário lidar requisição, prepara qualquer dado view. view mostra dado formato você quiser. termos implementação: rotas regras escritas (domain-specific language) ruby. controllers classes ruby, seus métodos públicos actions. views templates, geralmente escritos numa mistura ruby html. vamos começar adicionando rota nosso arquivo rotas, config/routes.rb, topo bloco rails.application.routes.draw: rota acima declara requisições articles mapeadas action index articlescontroller. criar articlescontroller action index, vamos executar controlador gerador (com opção --skip-routes porque temos rota apropriada): rails gerar vários arquivos você: mais importante desses arquivo controller, app/controllers/articles_controller.rb. vamos olhada nele: action index está vazia. quando action renderiza explicitamente view outra forma acionar resposta http), rails renderizar automaticamente view corresponde nome controller action. convenção sobre configuração! views estão localizadas diretório app/views. portanto, action index renderizará app/views/articles/index.html.erb padrão. vamos abrir arquivo app/views/articles/index.html.erb, substituir todo código existente por: você parou anteriormente servidor executar gerador controller, reinicie-o bin/rails server. agora visite http://localhost:3000/articles veja nosso texto exibido!"},{"id":546,"title":"Começando com Rails","heading":"4 Olá, Rails!","subheading":"4.3 Configuração da Página Inicial da Aplicação","content":"momento, http://localhost:3000 ainda exibe \"yay! você está rails!\". vamos mostrar nosso \"olá, rails!\" texto http://localhost:3000 também. fazer isso, vamos adicionar rota mapeia caminho raiz (root path) nossa aplicação controller action apropriados. vamos abrir arquivo config/routes.rb, adicionar rota root começo bloco rails.application.routes.draw: agora podemos mensagem \"olá, rails!\", quando visitamos http://localhost:3000 confirmando route root também mapeia action index articlescontroller. aplicações rails usam require carregar código aplicação. você deve notado articlescontroller herda applicationcontroller, app/controllers/articles_controller.rb nada como classes módulos aplicação estão disponíveis todos lugares, você precisa deve carregar nada require. esse recurso chamado autoloading você pode aprender mais sobre autoloading reloading constants. você precisa chamadas require dois casos uso: agora, discutimos rotas, controllers, actions views. todas essas peças típicas aplicação segue padrão (model-view-controller). padrão projeto divide responsabilidades aplicação facilitar nosso entendimento. rails segue esse padrão projeto convenção. temos controller view trabalhar, agora vamos gerar próxima peça: model."},{"id":547,"title":"Começando com Rails","heading":"6 MVC e Você","subheading":"6.1 Gerando um Model","content":"model classe ruby utilizada representar dados. além disso, models podem interagir banco dados aplicação através recurso rails chamado active record. definir model, utilizaremos gerador models: comando utilizando gerador criará vários arquivos: dois arquivos vamos concentrar arquivo migration (db/migrate/<timestamp>_create_articles.rb) arquivo model (app/models/article.rb)."},{"id":548,"title":"Começando com Rails","heading":"6 MVC e Você","subheading":"6.2 Migrações de Banco de Dados","content":"migrations utilizadas alterar estrutura banco dados aplicação. aplicações rails, migrations escritas ruby possam independentes banco dados. vamos olhada conteúdo nosso novo arquivo migration: chamada create_table especifica como tabela articles deve construída. padrão, método create_table adiciona coluna como chave primária auto incremento. portanto, primeiro registro tabela terá valor próximo registro terá valor assim diante. dentro bloco create_table, duas colunas definidas: title body. elas foram adicionadas pelo gerador, pois incluímos instrução nosso comando (bin/rails generate model article title:string body:text). última linha bloco chamada t.timestamps. este método define duas colunas adicionais chamadas created_at updated_at. como veremos mais frente, rails gerenciará isso nós, definindo valores quando criamos atualizamos objeto model. vamos executar nossa migration seguinte comando: comando exibirá resultado processamento indicando tabela criada: agora podemos interagir tabela utilizando nosso model."},{"id":549,"title":"Começando com Rails","heading":"6 MVC e Você","subheading":"6.3 Utilizando um Model para Interagir com o Banco de Dados","content":"brincar pouco nosso model, vamos utilizar recurso rails chamado console. console ambiente codificação interativo como irb, também carrega automaticamente rails código nossa aplicação. vamos iniciar console comando: você deve visualizar prompt irb: neste prompt, podemos inicializar novo objeto article: importante notar apenas inicializamos este objeto. objeto salvo banco dados momento está disponível apenas console. salvar objeto banco dados, devemos chamar save: saída acima mostra query insert into \"articles\" banco dados. isso indica artigo inserido nossa tabela. dermos olhada objeto article novamente, vemos algo interessante aconteceu: atributos created_at updated_at agora estão definidos. rails isso quando salvamos objeto. quando quisermos buscar este artigo banco dados, podemos chamar find model passar como argumento: quando quisermos obter todos artigos banco dados, podemos chamar model: esté método retorna objeto activerecord::relation, você pode considerar como array superpotente. models peça final quebra-cabeça mvc. seguir, conectaremos todas peças."},{"id":550,"title":"Começando com Rails","heading":"6 MVC e Você","subheading":"6.4 Exibindo uma Lista de Artigos","content":"vamos voltar nosso controller app/controllers/articles_controller.rb alterar action index buscar todos artigos banco dados: variáveis instância controller podem acessadas pela view. isso significa podemos referenciar @articles app/views/articles/index.html.erb. vamos abrir esse arquivo substituir conteúdo por: código acima mistura html erb. sistema template avalia código ruby embarcado documento. aqui, podemos dois tipos tags erb: significa \"avaliar código ruby incluso\". significa \"avaliar código ruby incluso retornar valor saída\". qualquer coisa possa escrita programa normal ruby pode dentro dessas tags erb, embora geralmente seja melhor manter conteúdo tags forma curta facilitar leitura. queremos gerar valor retornado @articles.each, vamos colocar esse código porém, queremos exibir valor retornado article.title (para cada artigo), incluímos esse códido podemos visualizar resultado final visitando http://localhost:3000 (lembre-se bin/rails server deve estar execução!). aqui estão etapas acontece quando fazemos isso: conectamos todas peças temos nossa primeira action controller! seguir, passaremos segunda action. quase todas aplicações abrangem operações crud (create, read, update delete), traduzidos como criação, consulta, atualização destruição dados. você pode descobrir maior parte trabalho aplicação crud. rails reconhece isso fornece muitos recursos ajudar simplificar código hora fazer crud. vamos começar explorar esses recursos adicionando mais funcionalidades nossa aplicação."},{"id":551,"title":"Começando com Rails","heading":"7 Operações CRUD","subheading":"7.1 Exibindo um Único Artigo","content":"atualmente, temos view lista todos artigos nosso banco dados. vamos adicionar nova view exibe título (title) corpo (body) único artigo. começamos adicionando nova rota mapeia nova action controller (que adicionaremos seguir). abra arquivo config/routes.rb insira última rota exibida aqui: nova rota outra rota tipo get, algo extra caminho (path): :id. isso denomina parâmetro rota. parâmetro rota captura pedaço caminho requisição coloca esse valor hash params, pode acessado pela action controller. exemplo, lidar requisição como http://localhost:3000/articles/1, seria capturado como valor seria então acessível params[:id] action show articlescontroller. vamos adicionar action show agora, abaixo action index app/controllers/articles_controller.rb: action show chama article.find (mencionado anteriormente) capturado pelo parâmetro rota. artigo retornado armazenado variável instância @article, portanto, pode acessado pela view. padrão, action show renderizar app/views/articles/show.html.erb. vamos criar app/views/articles/show.html.erb, seguinte conteúdo: agora podemos artigo quando visitarmos http://localhost:3000/articles/1! finalizar, vamos adicionar maneira mais prática chegar página artigo. iremos vincular título cada artigo app/views/articles/index.html.erb página:"},{"id":552,"title":"Começando com Rails","heading":"7 Operações CRUD","subheading":"7.2 Roteamento de Resources (recursos)","content":"agora, vimos (read, consulta) crud. iremos eventualmente cobrir (create, criação), (update, atualização) (delete, destruição). como você deve imaginado, faremos isso adicionando novas rotas, actions controller views funcionam conjunto realizar operações crud entidade. chamamos essa entidade resource (recurso). exemplo, nossa aplicação, diríamos artigo recurso. rails fornece método rotas chamado resources mapeia todas rotas convencionais coleção recursos, como artigos. portanto, antes prosseguir seções \"c\", \"d\", vamos substituir duas rotas config/routes.rb resources: podemos inspecionar quais rotas estão mapeadas executando comando bin/rails routes: método resources também configura métodos auxiliares (helper) caminhos podemos utilizar evitar nosso código dependa configuração rota específica. valores coluna \"prefix\" acima, mais sufixo _url _path formam nomes desses helpers. exemplo, helper article_path retorna \"/articles/#{article.id}\" quando recebe artigo. podemos utilizá-lo organizar nossos links app/views/articles/index.html.erb: entanto, daremos passo adiante utilizando helper link_to. helper link_to renderiza link primeiro argumento como texto link segundo argumento como destino link. passarmos objeto model como segundo argumento, link_to chamará helper caminho apropriado converter objeto caminho. exemplo, passarmos artigo, link_to chamará article_path. portanto, app/views/articles/index.html.erb torna: muito bom!"},{"id":553,"title":"Começando com Rails","heading":"7 Operações CRUD","subheading":"7.3 Criando um Novo Artigo","content":"agora, seguimos (create, criação) crud. normalmente, aplicações web, criação novo recurso processo várias etapas. primeiro, usuário solicita formulário preencher. seguida, usuário envia formulário. houver erros, recurso será criado algum tipo confirmação será exibido. caso contrário, formulário exibido novamente mensagens erros processo repetido. aplicação rails, esses passos convencionalmente tratados pelas actions create controller. vamos implementar essas actions app/controllers/articles_controller.rb, abaixo action show: action instancia novo artigo, salva banco dados. este artigo será utilizado view construirmos formulário. padrão, action renderizará app/views/articles/new.html.erb, criaremos seguir. action create instancia novo artigo valores título corpo tenta salvá-lo banco dados. artigo salvo sucesso, action redireciona navegador página artigo \"http://localhost:3000/articles/#{@article.id}\". caso contrário, action exibe novamente formulário renderizando view app/views/articles/new.html.erb código status aplicação funcione turbo. título corpo aqui valores fictícios. depois criarmos formulário, vamos voltar controller alterá-los. utilizaremos funcionalidade rails chamada form builder (construtor formulário) criar nosso formulário. utilizando construtor formulário, podemos escrever quantidade mínima código gerar formulário está totalmente configurado segue convenções rails. vamor criar view app/views/articles/new.html.erb seguinte conteúdo: método auxiliar form_with instancia construtor formulário. bloco form_with chamamos métodos como label text_field construtor gerar elementos apropriados formulário. resultado saída nossa chamada form_with será parecido com: dados formulário enviados colocados hash params, junto parâmetros rota capturados. assim, action create pode acessar título enviado params[:article][:title] corpo enviado params[:article][:body]. poderíamos passar esses valores individualmente article.new, isso seria longo demais possivelmente sujeito erros. ficaria pior medida adicionamos mais campos. disso, passaremos único hash contém valores. entanto, ainda devemos especificar quais valores permitidos nesse hash, caso contrário, usuário intencionado pode enviar campos extras formulário sobrescrever dados privados. verdade, passarmos hash params[:article] filtrado diretamente article.new, rails lançará forbiddenattributeserror alertar sobre problema. portanto, utilizaremos recurso rails chamado strong parameters (parâmetros fortes) filtrar params. pense nisso como tipagem forte params. vamos adicionar método privado parte inferior app/controllers/articles_controller.rb chamado article_params filtra params. vamos alterar método create utilizá-lo: como vimos, criação recurso processo várias etapas. lidar entrada inválida usuário outra etapa desse processo. rails fornece recurso chamado validações ajudar lidar entradas inválidas usuário. validações regras verificadas antes objeto model salvo. alguma validações falhar, objeto será salvo mensagens erros apropriadas serão adicionadas atributo errors objeto model. vamos adicionar algumas validações nosso model app/models/article.rb: primeira validação declara valor title deve estar presente. como title string, isso significa valor title deve conter pelo menos caractere diferente espaço branco. segunda validação declara valor body também deve estar presente. além disso, declara valor body deve pelo menos caracteres. nossas validações lugar, vamos modificar app/views/articles/new.html.erb exibir quaisquer mensagens erro title body: método full_messages_for retorna array mensagens erro amigáveis atributo especificado. houver erros esse atributo, array ficará vazio. entender como tudo isso funciona junto, vamos olhada actions create controller: quando visitamos http://localhost:3000/articles/new, solicitação /articles/new mapeada action new. action tenta salvar @article. portanto, validações verificadas haverá mensagens erro. quando enviamos formulário, solicitação post /articles mapeada action create. action create tenta salvar @article. portanto, validações verificadas. alguma validação falhar, @article será salvo view app/views/articles/new.html.erb será renderizada mensagens erro código status aplicação funcione turbo. agora podemos criar artigo visitando http://localhost:3000/articles/new. finalizar, vamos criar link essa página parte inferior view app/views/articles/index.html.erb:"},{"id":554,"title":"Começando com Rails","heading":"7 Operações CRUD","subheading":"7.4 Atualizando um Artigo","content":"cobrimos \"cr\" crud. agora, vamos passar (update, atualização). atualizar recurso muito semelhante criar recurso. ambos processos várias etapas. primeiro, usuário solicita formulário editar dados. houver erros, recurso será atualizado. caso contrário, formulário exibido novamente mensagens erro processo repetido. essas etapas convencionalmente tratadas pelas actions edit update controller. vamos adicionar implementação típica dessas actions app/controllers/articles_controller.rb, abaixo action create: observe como actions edit update assemelham actions create. action edit busca artigo banco dados armazena @article possa utilizado construir formulário. padrão, action edit renderizará app/views/articles/edit.html.erb. action update busca novamente artigo banco dados tenta atualizá-lo dados filtrados formulário enviado article_params. nenhuma validação falhar atualização bem-sucedida, action redireciona navegador página artigo. caso contrário, action exibe novamente formulário mensagens erro, renderizando app/views/articles/edit.html.erb código status aplicação funcione turbo. nosso formulário edit terá mesma aparência nosso formulário new. código será mesmo, graças construtor formulários rails roteamento recursos. construtor formulários configura automaticamente formulário fazer tipo apropriado requisição, baseando-se sobre objeto model salvo anteriormente. como código será mesmo, vamos separá-lo view compartilhada chamada partial. vamos criar view app/views/articles/_form.html.erb seguinte conteúdo: código acima igual nosso formulário app/views/articles/new.html.erb, exceto todas ocorrências @article foram substituídas article. como partials códigos compartilhados, melhor prática elas dependam variáveis instância específicas definidas action controller. disso, passaremos artigo partial como variável local. vamos atualizar app/views/articles/new.html.erb utilizar partial render: agora vamos criar view app/views/articles/edit.html.erb muito semelhante: agora podemos atualizar artigo visitando página edição, exemplo, http://localhost:3000/articles/1/edit. finalizar, vamos criar link página edição parte inferior app/views/articles/show.html.erb:"},{"id":555,"title":"Começando com Rails","heading":"7 Operações CRUD","subheading":"7.5 Deletando um Artigo","content":"finalmente chegamos (delete destruição) crud. deletar recurso processo mais simples criar atualizar. requer apenas rota action controller. nosso roteamento recursos (resources :articles) fornece rota mapeia requisições delete /articles/:id action destroy articlescontroller. então, vamos adicionar típica action destroy app/controllers/articles_controller.rb, abaixo action update: action destroy busca artigo banco dados chama método destroy artigo. seguida, redireciona navegador caminho raiz (root path). optamos redirecionar caminho raiz porque esse nosso principal ponto acesso artigos. mas, outras circunstâncias, você pode optar redirecionar para, exemplo, articles_path agora vamos adicionar link parte inferior app/views/articles/show.html.erb possamos deletar artigo própria página: código acima, estamos passando algumas opções adicionais link_to. opção method: :delete link faça requisição delete requisição get. opção data: confirm: \"are sure?\" caixa diálogo confirmação apareça quando link clicado. usuário cancelar caixa diálogo, requisição será abortada. ambas opções alimentadas recurso rails chamado javascript discreto (ujs). arquivo javascript implementa esses comportamentos incluído padrão novas aplicações rails. isso! agora podemos listar, exibir, criar, atualizar deletar artigos! incrível! hora adicionar segundo model aplicação. segundo model lidar comentários artigos."},{"id":556,"title":"Começando com Rails","heading":"8 Adicionando um Segundo Model","subheading":"8.1 Gerando um Model","content":"veremos mesmo generator usamos antes quando criamos model article (artigo, inglês). desta vamos criar model comment (comentário) contém referência artigo. rode esse comando terminal: este comando gerar quatro arquivos: primeiro, veja arquivo app/models/comment.rb: isso muito semelhante model article vimos antes. diferença está linha belongs_to article, configura associação active record. você aprender pouco sobre associações próxima seção deste guia. palavra-chave (:references) usada comando shell tipo especial dado models. cria nova coluna tabela banco dados nome fornecido model anexada contém valor tipo integer. compreender melhor, analise arquivo db/schema.rb depois rodar migration. além model, rails também gerou migration criar tabela correspondente banco dados: linha t.references cria coluna valores tipo integer chamada article_id, índice restrição chave estrangeira (foreign key) aponta coluna tabela articles. frente rode migration: rails inteligente suficiente executar somente migrações ainda foram rodadas banco dados atual, assim neste caso você verá:"},{"id":557,"title":"Começando com Rails","heading":"8 Adicionando um Segundo Model","subheading":"8.2 Associando Models","content":"associações active record permitem declarar facilmente relação entre dois models. caso comentários artigos, você poderia descrever relação seguinte maneira: fato, essa sintaxe muito similar utilizada pelo rails declarar essa associação. você linha código dentro model comment (app/models/comment.rb) cada comentário pertença artigo: você precisar editar arquivo app/models/article.rb adicionar outro lado associação: estas duas declarações habilitam parte comportamento automático. exemplo, você possui instância variável @article contém artigo, você pode recuperar todos comentários pertencentes àquele artigo forma array usando @article.comments."},{"id":558,"title":"Começando com Rails","heading":"8 Adicionando um Segundo Model","subheading":"8.3 Adicionando a Rota para Comentários","content":"mesma forma controller articles, vamos precisar adicionar rota rails saiba onde queremos navegar encontrar comments. abra arquivo config/routes.rb novamente edite seguinte maneira: isso cria comments como recurso aninhado (nested resource) dentro article. essa outra parte processo recuperar relações hierárquicas existem entre artigos comentários."},{"id":559,"title":"Começando com Rails","heading":"8 Adicionando um Segundo Model","subheading":"8.4 Gerando um Controller","content":"model mãos, você pode voltar atenção criação controller correspondente. mais vez, você usar generator usado anteriormente: isso cria quatro arquivos diretório vazio: como qualquer blog, nossos leitores criar seus comentários diretamente depois lerem artigo adicionarem comentário, serão enviados volta página show artigo verem comentário agora listado. essa razão, nosso commentscontroller está aqui fornecer método cria comentários deleta comentários spam quando chegarem. então, primeiro vamos ligar show template artigos (app/views/articles/show.html.erb) possamos criar novo comentários: isso adiciona página show article formulário cria novo comentário chamando action create commentscontroller. form_with aqui array construir rota aninhada, como /articles/1/comments. vamos ligar action create app/controllers/comments_controller.rb: você verá pouco mais complexidade aqui controller artigos. esse efeito colateral aninhamento você configurou. cada requisição comentário deve lembrar artigo qual comentário está anexado, chamada inicial método find model article encontre artigo questão. além disso, código aproveita-se alguns métodos disponíveis associação. usamos método create @article.comments criar salvar comentário. isso automaticamente conectar comentário pertença àquele artigo particular. temos novo comentário, enviamos usuário volta artigo original usando helper article_path(@article). como vimos anteriormente, isso chama action show articlescontroller renderiza template show.html.erb. aqui queremos comentário apareça, então vamos adicionar isso arquivo app/views/articles/show.html.erb. agora podemos adicionar artigos comentários blog mostrá-los lugares certos.  agora nossos artigos comentários funcionam, olhada template app/views/articles/show.html.erb. está ficando longo esquisito. podemos usar partials (views parciais) melhorá-lo."},{"id":560,"title":"Começando com Rails","heading":"9 Refatorando","subheading":"9.1 Renderizando Coleções de Partials","content":"primeiramente, vamos criar partial extrair exibição todos comentários artigo. crie arquivo app/views/comments/_comment.html.erb insira código seguir: então você pode mudar app/views/articles/show.html.erb seguinte código: isso fará partial seja renderizada app/views/comments/_comment.html.erb cada comentário coleção @article.comments. como método render itera sobre coleção @article.comments, designa cada comentário variável local nomeada como partial, nesse caso comment, então fica disponível exibida partial."},{"id":561,"title":"Começando com Rails","heading":"9 Refatorando","subheading":"9.2 Renderizando um Formulário com Partial","content":"agora vamos mover aquela nova seção comentários própria partial. novamente, crie arquivo app/views/comments/_form.html.erb contendo: então deixe arquivo app/views/articles/show.html.erb assim: segundo render apenas define template partial queremos renderizar, comments/form. rails inteligente suficiente entender barra nessa string perceber você quer renderizar arquivo _form.html.erb diretório app/views/comments. objeto @article está disponível todas partials renderizadas view porque definimos como variável instância."},{"id":562,"title":"Começando com Rails","heading":"9 Refatorando","subheading":"9.3 Usando Concerns","content":"concerns forma tornar grandes controllers models mais fáceis entender gerenciar. isso também vantagem reutilizável quando vários models controllers) compartilham mesmas preocupações. concerns implementadas usando módulos (module) contêm métodos representam fatia definida funcionalidade pela qual model controller responsável. outras linguagens, módulos costumam conhecidos como mixins. você pode usar concerns controller model mesma forma usaria qualquer módulo. quando você criou aplicação pela primeira rails blog, duas pastas foram criadas dentro app/ junto resto: determinado artigo blog pode vários status exemplo, pode visível todos seja, public), visível apenas autor seja, private). também pode estar oculto todos, ainda pode recuperado seja, archived). comentários também podem estar ocultos visíveis. isso pode representado usando coluna status cada models. primeiro, vamos executar seguintes migrations adicionar status articles comments: seguir, vamos atualizar banco dados migrations geradas: também temos permitir chave :status como parte strong parameters, app/controllers/articles_controller.rb: app/controllers/comments_controller.rb: dentro model article, após executar migration adicionar coluna status usando comando bin/rails db:migrate, você adicionaria: model comment: então, nossa action index (app/views/articles/index.html.erb), usaríamos método archived? evitar exibição qualquer artigo está arquivado: mesma forma, nossa views parcial comentários (app/views/comments/_comment.html.erb) usaríamos método archived? evitar exibição qualquer comentário arquivado: entanto, você olhar novamente nossos models agora, pode lógica está duplicada. futuro, aumentarmos funcionalidade nosso blog incluir mensagens privadas, exemplo podemos duplicação lógica mais vez. aqui concerns úteis. concerns responsável apenas subconjunto específico responsabilidade model; métodos nossa concern estarão todos relacionados visibilidade model. vamos chamar nossa nova concern (módulo) visible. podemos criar novo arquivo dentro app/models/concerns chamadovisible.rb, armazenar todos métodos status foram duplicados models. app/models/concerns/visible.rb podemos adicionar nossa validação status concern, isso pouco mais complexo, pois validações métodos chamados nível classe. activesupport::concern (api guide) maneira mais simples incluí-los: agora, podemos remover lógica duplicada cada model disso, incluir nosso novo módulo visible: app/models/article.rb: app/models/comment.rb: métodos classe também podem adicionados concerns. quisermos contagem artigos públicos comentários sejam exibidos nossa página principal, podemos adicionar método classe visible seguinte maneira: então, view, você pode chamá-lo como qualquer método classe: finalizar, adicionaremos caixa seleção formulários permitiremos usuário selecione status criar novo artigo postar novo comentário. também podemos especificar status padrão como public. app/views/articles/_form.html.erb, podemos adicionar: app/views/comments/_form.html.erb: outra importante feature blog excluir comentários spam. fazer isto, precisamos implementar link alguma view action destroy commentscontroller. primeiro, vamos adicionar link delete partial app/views/comments/_comment.html.erb: clicar neste novo link \"destruir comentário\" será disparado delete /articles/:article_id/comments/:id nosso commentscontroller, pode usar isso encontrar comentário queremos excluir, então vamos adicionar ação destroy nosso controller (app/controllers/comments_controller.rb): action destroy encontrar artigo estamos vendo, localizar comentário collection @article.comments, removê-lo banco dados enviar volta action show artigo."},{"id":563,"title":"Começando com Rails","heading":"10 Deletando Comentários","subheading":"10.1 Excluindo objetos associados","content":"você excluir artigo, comentários (comments) associados também precisarão excluídos, caso contrário, eles simplesmente ocupariam espaço banco dados. rails permite você opção dependent associação conseguir isso. modifique modelo artigo (article), app/models/article.rb, seguinte forma:"},{"id":564,"title":"Começando com Rails","heading":"11 Segurança","subheading":"11.1 Autenticação Básica","content":"fosse fosse publicar blog online, qualquer poderia adicionar, editar deletar seus artigos comentários. rails disponibiliza sistema autenticação http funcionará tranquilamente nesta situação. articlescontroller precisamos tenha meio bloquear acesso várias ações pessoa estiver autenticada. aqui podemos usar método http_basic_authenticate_with, permite acesso ação requisitada método deixar. usar sistema autenticação, especificamos topo nosso articlescontroller app/controllers/articles_controller.rb. nosso caso, queremos usuário esteja autenticado todas ações, exceto index show, então colocamos isso: também queremos autorizar somente usuários autenticados deletar comentários, então commentscontroller (app/controllers/comments_controller.rb) colocamos: agora você tentar criar novo artigo, você deverá preencher formulário autenticação:  outros métodos autenticação estão disponíveis aplicações rails. dois add-ons autenticação populares rails devise authlogic entre outros."},{"id":565,"title":"Começando com Rails","heading":"11 Segurança","subheading":"11.2 Outras Considerações de Segurança","content":"segurança, especialmente aplicações web, area ampla detalhada. tópico segurança aplicações rails coberto mais detalhes guia segurança ruby rails. agora você criou primeira aplicação rails, sinta-se vontade atualizar experimentar conta própria. lembre-se, você precisa fazer tudo ajuda. você precisa assistência começar desenvolver rails, sinta-se vontade consultar estes recursos: caminho mais fácil trabalhar rails armazenar todos dados externos como utf-8. fizer assim, bibliotecas ruby rails vão, maioria vezes, conseguir converter seus dados nativos utf-8, porém sempre isso funciona corretamente, então melhor você assegure todos seus dados externos estão utf-8. caso tenha cometido erro nessa parte, sintoma mais comum aparecimento diamante preto ponto interrogação dentro navegador. outro sintoma comum aparecimento caracteres como \"ã¼\" invés \"ü\". rails executa número passos internos mitigar causas comuns desses problemas possam detectadas corrigidas automaticamente. porém, caso você possua dados externos estão armazenados como utf-8, eles poderão ocasionalmente resultar problemas podem detectados resolvidos forma automática pelo rails. duas fontes muito comuns dados estão utf-8 são: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":566,"title":"Active Record Callbacks","heading":"1 O Ciclo de Vida do Objeto","subheading":"1 O Ciclo de Vida do Objeto","content":"durante operação normal aplicação rails, objetos podem criados, atualizados destruídos. active record fornece hooks este ciclo vida objeto você possa controlar aplicação seus dados. callbacks permitem você desencadear lógica antes depois alteração estado objeto. callbacks métodos chamados certos momentos ciclo vida objeto. callbacks possível escrever código rodará sempre objeto active record criado, salvo, atualizado, deletado, validado carregado banco dados."},{"id":567,"title":"Active Record Callbacks","heading":"2 Visão geral de Callbacks","subheading":"2.1 Registro de Callback","content":"usar callbacks disponíveis, você precisa registrá-los. você pode implementar callbacks como métodos comuns usar método macro-style classe registrá-los como callbacks: métodos macro-style classe podem também receber bloco. considere usar esse estilo código dentro bloco curto cabe linha: callbacks também podem registrados rodar apenas certos eventos ciclo vida: considerado prática declarar métodos callback como privados. deixados como públicos, podem chamados fora model violar princípio encapsulamento objeto. aqui está lista todos active record callbacks, listados mesma ordem qual eles serão chamados durante respectivas operações:"},{"id":568,"title":"Active Record Callbacks","heading":"3 Callbacks Disponíveis","subheading":"3.1 Criando um Objeto","content":""},{"id":569,"title":"Active Record Callbacks","heading":"3 Callbacks Disponíveis","subheading":"3.2 Atualizando um Objeto","content":""},{"id":570,"title":"Active Record Callbacks","heading":"3 Callbacks Disponíveis","subheading":"3.3 Destruindo um Objeto","content":""},{"id":571,"title":"Active Record Callbacks","heading":"3 Callbacks Disponíveis","subheading":"3.4 after_initialize e after_find","content":"callback after_initialize será chamado sempre objeto active record instanciado, usando diretamente quando registro carregado banco dados. isto pode útil evitar necessidade substituir diretamente método initialize active record. callback after_find será chamado sempre active record carregar registro banco dados. after_find chamado antes after_initialize ambos estiverem definidos. callbacks after_initialize after_find possuem complementos before_*, podem registrados como outros callbacks active record."},{"id":572,"title":"Active Record Callbacks","heading":"3 Callbacks Disponíveis","subheading":"3.5 after_touch","content":"callback after_touch será chamado sempre objeto active record alcançado. pode usado junto belongs_to: métodos seguir acionam callbacks: adicionalmente, callback after_find acionado pelos seguintes métodos localização: callback after_initialize acionado toda novo objeto classe inicializado. assim como validações, também possível ignorar callbacks usando seguintes métodos: contudo, esses métodos devem usados cautela, porque regras negócio importantes lógica aplicação podem mantidos callbacks. contorná-los entender potenciais implicações pode levar dados inválidos. quando você começar registrar novos callbacks seus models, eles serão enfileirados execução. esta fila incluirá todas validações model, callbacks registrados operação banco dados executada. toda cadeia callback empacotada transação. algum callback lança exceção, cadeia execução interrompida rollback emitido. interromper intencionalmente cadeia, use: callbacks trabalham através relacionamentos models podem definidos eles. suponha exemplo onde usuário tenha muitos artigos. artigo usuário deve apagado usuario apagado. vamos adicionar callback after_destroy model user meio relacionamento model article: como acontece validações, também podemos tornar chamada método callback condicional satisfação determinado predicado. podemos fazer isso utilizando opções :except, podemo recever símbolo, proc array. você pode utilizar opção quando quiser especificar quais condições callback deve chamado. você deseja especificar condições quais callback deve chamado, você pode utilizar opção :unless."},{"id":573,"title":"Active Record Callbacks","heading":"8 Callbacks Condicionais","subheading":"8.1 Utilizando :if e :unless com um Symbol","content":"você pode associar opções :unless symbol correspondente nome método predicado será chamado logo antes callback. utilizar opção :if, callback será executado método predicado retornar false (falso); utilizar opção :unless, callback será executado método predicado retornar true (verdadeiro). esta opção mais comum. utilizando esta forma registro também possível registrar vários predicados diferentes devem chamado verificar callback deve executado."},{"id":574,"title":"Active Record Callbacks","heading":"8 Callbacks Condicionais","subheading":"8.2 Utilizando :if e :unless com uma Proc","content":"possível associar :unless objeto proc. esta opção mais adequada escrever métodos curtos validação, geralmente linha: como proc avaliada contexto objeto, também possível escrever isso como:"},{"id":575,"title":"Active Record Callbacks","heading":"8 Callbacks Condicionais","subheading":"8.3 Usando :if e :unless juntos","content":"callbacks condicionais, podem misturar :unless mesma declaração callback:"},{"id":576,"title":"Active Record Callbacks","heading":"8 Callbacks Condicionais","subheading":"8.4 Multiplas Condições de Callback","content":"opções :unless também aceitam array procs nomes métodos como symbols: callback executado quando todas condições nenhuma condições :unless retornarem true. algumas situações, métodos callback iremos escrever serão úteis serem reutilizados outros models. active record possibilita criação classes encapsulam métodos callback eles possam reutilizados. aqui está exemplo onde criamos classe callback after_destroy model picturefile: quando declaramos dentro classe, como feito acima, métodos callback irão receber model como parâmetro. agora poderemos usar classe callback model: perceba precisamos instanciar novo objeto chamado picturefilecallbacks, declaramos nosso callback como método instância. particularmente, isso útil callbacks fazem estado objeto instanciado. porém fará mais sentido declarar callbacks como métodos classe mais frequência: método callback declarado dessa forma, será necessário instanciar objeto picturefilecallbacks você pode declarar dentro suas classes callback quantos callback achar necessário. existem dois callbacks adicionais disparados quando completa transação banco dados: after_commit after_rollback. estes callbacks muito parecidos callback after_save, exceto eles executados mudanças banco dados sejam confirmadas desfeitas. eles mais úteis quando seus active record models precisam interagir sistemas externos fazem parte transação banco dados. considere, exemplo, exemplo anterior onde model picturefile precisa apagar arquivo depois registro correspondente destruído. algo lançar exceção depois callback after_destroy chamado transação desfeita, arquivo terá sido deletado model será deixado estado inconsistente. exemplo, suponha picture_file_2 código abaixo valido método save! lança erro. usando callback after_commit podemos responder esse caso. usar callback after_commit criar, atualizar deletar comum, existem aliases operações: existe também alias usar callback after_commit, juntamente, tanto criar quanto atualizar: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":577,"title":"O Asset Pipeline","heading":"1 O que é o Asset Pipeline?","subheading":"1 O que é o Asset Pipeline?","content":"asset pipeline fornece framework concatenar minificar comprimir assets javascript css. também habilidade escrever esses assets outras linguagens pré-processadores tais como coffeescript, sass erb. isso permite assets aplicação sejam automaticamente combinados assets outras gems. asset pipeline implementado pela sprockets-rails, habilitado padrão. você pode desabilitar enquanto está criando nova aplicação passando opção --skip-sprockets. rails pode facilmente trabalhar sass adicionando sassc-rails gemfile, qual usada pelo sprockets compilação sass: configurar métodos compactação asset, coloque opções configuração apropriadas production.rb config.assets.css_compressor config.assets.js_compressor javascript:"},{"id":578,"title":"O Asset Pipeline","heading":"1 O que é o Asset Pipeline?","subheading":"1.1 Principais Características","content":"primeira característica pipeline concatenar assets, qual pode reduzir número requisições navegador renderizar página web. navegadores limitados número requisições eles podem fazer paralelo, portanto, menos solicitações podem significar carregamento mais rápido aplicação. sprockets concatena todos arquivos javascript arquivo principal todos arquivos arquivo principal .css. como você aprenderá mais tarde neste guia, você pode mudar esta estratégia agrupar arquivos maneira quiser. produção, rails insere impressão digital sha256 dentro cada nome arquivo arquivo seja armazenado cache navegador. você pode invalidar armazenamento cache alterando essa impressão digital, qual acontece automaticamente sempre você muda conteúdo arquivo. segunda característica asset pipeline minificação compactação asset. arquivos css, isso feito removendo espaços branco comentários. javascript, mais processos complexos aplicados. você pode escolher entre conjunto opções especificar própria. terceira característica asset pipeline permite codificação assets meio línguagem alto nível, pré-compilação atuais assets. línguagens suportadas incluem sass css, coffeescript javascript, ambos padrão."},{"id":579,"title":"O Asset Pipeline","heading":"1 O que é o Asset Pipeline?","subheading":"1.2 O que é Impressão Digital e Por Que Eu Deveria Me Importar?","content":"impressão digital técnica nome arquivo dependente conteúdo arquivo. quando conteúdo arquivo muda, nome arquivo muda também. conteúdo estático muda pouca frequência, forma mais fácil dizer duas versões arquivo idênticas, mesmo através diferentes servidores datas desenvolvimento. quando nome arquivo único baseado conteúdo, headers http podem configurados encorajar armazenamento caches todo lugar (seja cdns, isps, equipamentos rede, navegadores web) manter suas próprias cópias conteúdo. quando conteúdo atualizado, impressão digital mudará. isso fará clientes remotos requisitem nova cópia conteúdo. isso geralmente conhecido como cache busting. técnica sprockets impressão digital inserir hash conteúdo nome, geralmente final. exemplo arquivo global.css essa estratégia adotada pelo asset pipeline rails. antiga estratégia rails anexar query string(string consulta) baseada data cada asset vinculado helper interno. resumo código gerado parecia isso: estratégia query string(string consulta) tinha várias desvantagens: impressão digital resolve esses problemas evitando query string(string consulta), garantindo nome arquivos sejam coerentes base conteúdo. impressão digital habilitada padrão ambos ambientes desenvolvimento produção. você pode habilitar desabilitar isso configuração através opção config.assets.digest. mais leitura: versões anteriores rails, todos assets estavam localizados subdiretórios abaixo public, como imagens, javascripts stylesheets. asset pipeline, localização recomendada esses assets agora diretório app/assets. arquivos nesse diretório serão servidos pelo sprockets middleware. assets podem ainda colocados hierarquia public. qualquer asset public ainda será servido como arquivo estático pela aplicação servidor quando config.public_file_server.enabled estiver configurado como true. você deve usar app/assets arquivos devem pré-processados antes serem servidos. produção, rails pré-compila esses arquivos public/assets padrão. cópias arquivos pré-compilados serão então servidas como assets estáticos pelo servidor web. arquivos app/assets nunca serão servidos diretamente produção."},{"id":580,"title":"O Asset Pipeline","heading":"2 Como usar o Asset Pipeline","subheading":"2.1 Assets Específicos de Controllers","content":"quando você gera scaffold controller, rails também gera arquivo cascading style sheet scss sass-rails estiver gemfile) aquele controller. adicionalmente, quando você gera scaffold, rails também gera arquivo scaffolds.css scaffolds.scss sass-rails estiver gemfile.) exemplo, você gerar projectscontroller, rails também adicionará novo arquivo app/assets/stylesheets/projects.scss. padrão, arquivos estarão prontos serem usados pela aplicação imediatamente usando diretiva require_tree. veja arquivos manifesto diretivas mais detalhes sobre require_tree. você também pode optar incluir stylesheets específicas controller arquivos javascript apenas seus respectivos diretórios, usando seguinte: javascript_include_tag params[:controller] stylesheet_link_tag params[:controller] fazer isso, certifique-se você está usando diretiva require_tree, pois isso resultará seus assets serem incluídos mais vez."},{"id":581,"title":"O Asset Pipeline","heading":"2 Como usar o Asset Pipeline","subheading":"2.2 Organização dos Assets","content":"pipeline assets podem colocados dentro aplicação três locais seguintes: app/assets, lib/assets vendor/assets. quando arquivo referenciado partir manifesto helper, sprockets procura três locais padrões assets. três locais padrões são: diretórios images, javascripts stylesheets abaixo pasta app/assets, esses subdiretórios especiais qualquer caminho assets/* será pesquisado. exemplo, esses arquivos: poderiam referenciados manifesto seguinte maneira: assets dentro subdiretórios também podem acessados. referenciado como: você pode visualizar caminho busca inspecionando rails.application.config.assets.paths console rails. adicionalmente, além caminho padrão assets/*, caminhos (completos) podem adicionados pipeline config/initializers/assets.rb. exemplo: caminhos percorridos ordem eles aparecem caminho busca. padrão, isso significa arquivos app/assets precedência, mascararão caminhos correspondentes vendor. importante notar arquivos você quiser referenciar fora manifesto devem adicionados array pré-compilação, caso contrário eles estarão disponíveis ambiente produção. sprockets arquivos nomeados como index (com extensão relevante) propósito especial. exemplo, você tiver biblioteca jquery muitos módulos, armazenada lib/assets/javascripts/library_name, arquivo lib/assets/javascripts/library_name/index.js serve como manifesto todos arquivos desta biblioteca. esse arquivo poderia incluir lista ordenada todos arquivos necessários simples diretiva require_tree. biblioteca como todo pode acessada manifesto aplicação como: isso simplifica manutenção mantém coisas limpas, permitindo código relacionado seja agrupado antes inclusão outro lugar."},{"id":582,"title":"O Asset Pipeline","heading":"2 Como usar o Asset Pipeline","subheading":"2.3 Codificando Links para Assets","content":"sprockets adiciona nenhum método acessar seus assets você ainda familiares javascript_include_tag stylesheet_link_tag: você estiver usando turbolinks, incluída padrão rails, então inclua opção 'data-turbo-track' turbo verifique asset atualizado então carrega naquela página: views comuns você pode acessar imagens diretório app/assets/images como essa: pipeline estiver ativo aplicação desativado contexto ambiente atual), esse arquivo servido pelo sprockets. arquivo existir public/assets/rails.png servido pelo servidor web. alternativamente, requisição arquivo hash sha256 como public/assets/rails-f90d8a84c707a8dc923fca1ca1895ae8ed0a09237f6992015fef1e11be77c023.png tratado mesma maneira. forma como esses hashes gerados está coberta seção produção, posteriormente nesse guia. sprockets procurará através caminhos especificados config.assets.paths, inclui caminhos padrões aplicação quaisquer caminhos adicionados pelas engines rails. imagens também podem organizadas subdiretórios necessário, então podem acessadas pelo nome diretório tag: asset pipeline avalia automaticamente erb. isso significa você adicionar extensão asset (por exemplo, application.css.erb), então helpers como asset_path estarão disponíveis suas regras css: isso escreve caminho asset particular está sendo referenciado. nesse exemplo, faria sentido imagem caminhos carregados assets, como app/assets/images/image.png, seria referenciado aqui. essa imagem está disponível public/assets como arquivo impressão digital, então aquele caminho referenciado. você quiser usar dados método embutir imagem diretamente arquivo você pode usar helper asset_data_uri. isso insere dados corretamente formatada fonte. note fechamento pode estilo -%>. utilizar asset pipeline, caminhos assets devem reescritos sass-rails provê helpers -url -path (hifenizados sass, separados underscore ruby) seguintes classes assets: imagem, fonte, vídeo, áudio, javascript folha estilo. forma mais genérica também pode usada: você adicionar extensão asset javascript, fazendo algo como application.js.erb, você pode então usar helper asset_path código javascript: isso escreve caminho asset particular está sendo referenciado."},{"id":583,"title":"O Asset Pipeline","heading":"2 Como usar o Asset Pipeline","subheading":"2.4 Arquivos de Manifesto e Diretivas","content":"sprockets arquivos manifesto determinar quais assets incluir servir. esses arquivos manifesto contém diretivas instruções dirão sprockets quais arquivos solicitar construir arquivo javascript único. essas diretivas, sprockets carrega arquivos especificados, processa-os necessário, concatena-os único arquivo então comprime-os (baseado valor rails.application.config.assets.js_compressor). servir arquivo invés muitos, tempo carregamento páginas pode amplamente reduzido porque navegador menos requisições. compressão também reduz tamanho arquivos, permitindo navegador baixá-los mais rapidamente. exemplo, arquivo app/assets/javascripts/application.js contendo seguintes linhas: arquivos javascript, diretivas sprocket começam //=. caso acima, arquivo está usando diretivas require require_tree. diretiva require usada instruir sprockets arquivos você deseja solicitar. aqui, você está solicitando arquivos rails-ujs.js turbolinks.js, estão disponíveis algum lugar caminho busca sprockets. você precisa informar extensões explicitamente. sprockets assume você está solicitando arquivo quando feito dentro arquivo .js. diretiva require_tree instrui sprockets recursivamente incluir todos arquivos javascript diretório especificado output. esses caminhos deverão especificados maneira relativa arquivo manifesto. você também pode usar diretiva require_directory, inclui todos arquivos javascript somente diretório especificado, recursão. diretivas processadas cima baixo, ordem qual arquivos incluídos pelo require_tree garantida. você deve confiar nenhuma ordem particular entre eles. você precisar garantir javascript particular termine acima outro arquivo concatenado, solicite pré-requisito antes manifesto. note família diretivas require previne arquivos serem incluídos duas vezes output. rails também cria arquivo padrão app/assets/stylesheets/application.css contém essas linhas: rails cria app/assets/stylesheets/application.css independentemente opção --skip-sprockets usada criar nova aplicação rails. isso permite você facilmente adicione asset pipelining mais tarde assim quiser. diretivas funcionam arquivos javascript também funcionam folhas estilo (que obviamente incluem folhas estilo além arquivos javascript). diretiva require_tree manifesto funciona mesma maneira javascript, solicitando todas folhas estilo diretório corrente. nesse exemplo, require_self usado. isso coloca contido dentro arquivo houver algum) localização exata chamada require_self. você pode fazer globbing arquivos usando @import @import \"**/*\" adicionar árvore completa, equivalente como require_tree funciona. veja documentação sass-rails mais informações ressalvas importantes. você pode quantos arquivos manifesto quiser. exemplo, manifestos admin.css admin.js podem conter arquivos usados pela seção admin aplicação. mesmas afirmações sobre ordens feitas acima também aplicam. particular, você pode especificar arquivos individuais eles serão compilados ordem especificada. exemplo, você pode concatenar três arquivos juntos seguinte maneira:"},{"id":584,"title":"O Asset Pipeline","heading":"2 Como usar o Asset Pipeline","subheading":"2.5 Pré-processamento","content":"extensões arquivos usadas asset determinam qual pré-processamento aplicado. quando controller scaffold gerado gemset padrão rails, arquivo scss gerado lugar arquivo comum css. exemplo usado anteriormente controller chamado \"projects\", gerou arquivo app/assets/stylesheets/projects.scss. modo desenvolvimento, asset pipeline estiver desabilitado, quando esses arquivos solicitados, eles serão processados pelos processors especificados pela sass-rails então enviados volta navegador como css. quando asset pipelining está habilitado, esses arquivos pré-processados colocados diretório public/assets, serem servidos seja pela aplicação rails pelo servidor web. camadas adicionais pré-processamento podem solicitadas adicionar outras extensões, onde cada extensão processada direita esquerda. essas devem usadas processamento seja aplicado. exemplo, folha estilos chamada app/assets/stylesheets/projects.scss.erb primeiramente processada como erb, depois como scss finalmente servida como css. mesmo aplica arquivo javascript app/assets/javascripts/projects.coffee.erb, processado como erb, depois coffeescript então servido como javascript. tenha mente ordem desses pré-processadores importante. exemplo, você chamou arquivo javascript app/assets/javascripts/projects.erb.coffee, então seria processado pelo interpretador coffeescript primeiro, entende erb, causaria problemas. development mode, assets served concatenated file. this manifest app/assets/javascripts/application.js: would generate this html:"},{"id":585,"title":"O Asset Pipeline","heading":"3 In Development","subheading":"3.1 Raise an Error When an Asset is Not Found","content":"using sprockets-rails 3.2.0 configure what happens when asset lookup performed nothing found. turn \"asset fallback\" then error will raised when asset cannot found. \"asset fallback\" enabled then when asset cannot found path will output instead error raised. asset fallback behavior disabled default."},{"id":586,"title":"O Asset Pipeline","heading":"3 In Development","subheading":"3.2 Turning Digests Off","content":"turn digests updating config/environments/development.rb include: when this option true, digests will generated asset urls."},{"id":587,"title":"O Asset Pipeline","heading":"3 In Development","subheading":"3.3 Turning Source Maps On","content":"turn source maps updating config/environments/development.rb include: when debug mode sprockets will generate source each asset. this allows debug each file individually your browser's developer tools. assets compiled cached first request after server started. sprockets sets must-revalidate cache-control http header reduce request overhead subsequent requests these browser gets (not modified) response. files manifest change between requests, server responds with compiled file. production environment sprockets uses fingerprinting scheme outlined above. default rails assumes assets have been precompiled will served static assets your server. during precompilation phase sha256 generated from contents compiled files, inserted into filenames they written disk. these fingerprinted names used rails helpers place manifest name. example this: generates something like this: fingerprinting behavior controlled config.assets.digest initialization option (which defaults true)."},{"id":588,"title":"O Asset Pipeline","heading":"4 In Production","subheading":"4.1 Precompiling Assets","content":"rails comes bundled with command compile asset manifests other files pipeline. compiled assets written location specified config.assets.prefix. default, this /assets directory. call this command server during deployment create compiled versions your assets directly server. next section information compiling locally. command this links folder specified config.assets.prefix shared/assets. already this shared folder you'll need write your deployment command. important that this folder shared between deployments that remotely cached pages referencing compiled assets still work life cached page. default matcher compiling files includes application.js, application.css non-js/css files (this will include image assets automatically) from app/assets folders including your gems: have other manifests individual stylesheets javascript files include, them precompile array config/initializers/assets.rb: command also generates .sprockets-manifest-randomhex.json (where randomhex 16-byte random string) that contains list with your assets their respective fingerprints. this used rails helper methods avoid handing mapping requests back sprockets. typical manifest file looks like: default location manifest root location specified config.assets.prefix ('/assets' default). precompiled assets exist file system served directly your server. they have far-future headers default, benefit fingerprinting you'll have update your server configuration those headers. apache: nginx:"},{"id":589,"title":"O Asset Pipeline","heading":"4 In Production","subheading":"4.2 Local Precompilation","content":"sometimes, want able compile assets production server. instance, have limited write access your production filesystem, plan deploy frequently without making changes your assets. such cases, precompile assets locally that finalized compiled, production-ready assets your source code repository before pushing production. this way, they need precompiled separately production server upon each deployment. above, perform this step using note following caveats:"},{"id":590,"title":"O Asset Pipeline","heading":"4 In Production","subheading":"4.3 Live Compilation","content":"some circumstances wish live compilation. this mode requests assets pipeline handled sprockets directly. enable this option set: first request assets compiled cached outlined assets cache store, manifest names used helpers altered include sha256 hash. sprockets also sets cache-control http header max-age=31536000. this signals caches between your server client browser that this content (the file served) cached year. effect this reduce number requests this asset from your server; asset good chance being local browser cache some intermediate cache. this mode uses more memory, performs more poorly than default, recommended. deploying production application system without pre-existing javascript runtimes, want your gemfile:"},{"id":591,"title":"O Asset Pipeline","heading":"4 In Production","subheading":"4.4 CDNs","content":"stands content delivery network, they primarily designed cache assets over world that when browser requests asset, cached copy will geographically close that browser. serving assets directly from your rails server production, best practice front your application. common pattern using your production application \"origin\" server. this means when browser requests asset from there cache miss, will grab file from your server then cache example running rails application example.com have configured mycdnsubdomain.fictional-cdn.com, then when request made mycdnsubdomain.fictional- cdn.com/assets/smile.png, will query your server once example.com/assets/smile.png cache request. next request that comes same will cached copy. when serve asset directly request never touches your rails server. since assets from geographically closer browser, request faster, since your server doesn't need spend time serving assets, focus serving application code fast possible. your have have your application running production internet publicly available url, example example.com. next you'll need sign service from cloud hosting provider. when this need configure \"origin\" point back your website example.com, check your provider documentation configuring origin server. provisioned should give custom subdomain your application such mycdnsubdomain.fictional-cdn.com (note fictional-cdn.com valid provider time this writing). that have configured your server, need tell browsers your grab assets instead your rails server directly. this configuring rails your asset host instead using relative path. your asset host rails, need config.asset_host config/environments/production.rb: also this value through environment variable make running staging copy your site easier: once have configured your server your when serve webpage that asset: instead returning path such /assets/smile.png (digests left readability). generated will have full path your cdn. copy smile.png will serve browser your server doesn't even know requested. does have copy will find \"origin\" example.com/assets/smile.png then store future use. want serve only some assets from your cdn, custom :host option your asset helper, which overwrites value config.action_controller.asset_host. works caching content. stale content, then hurting rather than helping your application. purpose this section describe general caching behavior most cdns, your specific provider behave slightly differently. while described being good caching assets, reality caches entire request. this includes body asset well headers. most important being cache-control which tells (and browsers) cache contents. this means that someone requests asset that does exist /assets/i-dont-exist.png your rails application returns 404, then your will likely cache page valid cache-control header present. check headers cached properly your using curl. request headers from both your server your verify they same: versus copy. check your documentation additional information they provide such x-cache additional headers they add. cache control header specification that describes request cached. when used, browser will this information cache contents. this very helpful assets that modified that browser does need re-download website's javascript every request. generally want rails server tell (and browser) that asset \"public\", that means cache store request. also commonly want max-age which long cache will store object before invalidating cache. max-age value seconds with maximum possible value which year. this your rails application setting when your application serves asset production, will store asset year. since most cdns also cache headers request, this cache-control will passed along future browsers seeking this asset, browser then knows that store this asset very long time before needing re-request most cdns will cache contents asset based complete url. this means that request will completely different cache from want future max-age your cache-control (and do), then make sure when change your assets that your cache invalidated. example when changing smiley face image from yellow blue, want visitors your site blue face. when using with rails asset pipeline config.assets.digest true default that each asset will have different file name when changed. this don't have ever manually invalidate items your cache. using different unique asset name instead, your users latest asset."},{"id":592,"title":"O Asset Pipeline","heading":"5 Customizing the Pipeline","subheading":"5.1 CSS Compression","content":"options compressing yui. compressor provides minification. following line enables compression, requires yui-compressor gem. other option compressing have sass-rails installed"},{"id":593,"title":"O Asset Pipeline","heading":"5 Customizing the Pipeline","subheading":"5.2 JavaScript Compression","content":"possible options javascript compression :terser, :closure :yui. these require terser, closure-compiler yui-compressor gems, respectively. take terser gem, example. this wraps terser (written nodejs) ruby. compresses your code removing white space comments, shortening local variable names, performing other micro-optimizations such changing else statements ternary operators where possible. following line invokes terser javascript compression."},{"id":594,"title":"O Asset Pipeline","heading":"5 Customizing the Pipeline","subheading":"5.3 GZipping your assets","content":"default, gzipped version compiled assets will generated, along with non-gzipped version assets. gzipped assets help reduce transmission data over wire. configure this setting gzip flag. refer your server's documentation instructions serve gzipped assets."},{"id":595,"title":"O Asset Pipeline","heading":"5 Customizing the Pipeline","subheading":"5.4 Using Your Own Compressor","content":"compressor config settings javascript also take object. this object must have compress method that takes string sole argument must return string. enable this, pass object config option application.rb:"},{"id":596,"title":"O Asset Pipeline","heading":"5 Customizing the Pipeline","subheading":"5.5 Changing the assets Path","content":"public path that sprockets uses default /assets. this changed something else: this handy option updating older project that didn't asset pipeline already uses this path wish this path resource."},{"id":597,"title":"O Asset Pipeline","heading":"5 Customizing the Pipeline","subheading":"5.6 X-Sendfile Headers","content":"x-sendfile header directive server ignore response from application, instead serve specified file from disk. this option default, enabled your server supports when enabled, this passes responsibility serving file server, which faster. have look send_file this feature. apache nginx support this option, which enabled config/environments/production.rb: default, sprockets caches assets tmp/cache/assets development production environments. this changed follows: disable assets cache store: assets also come from external sources form gems. good example this jquery-rails gem. this contains engine class which inherits from rails::engine. doing this, rails informed that directory this contain assets app/assets, lib/assets vendor/assets directories this engine added search path sprockets. sprockets uses processors, transformers, compressors, exporters extend sprockets functionality. have look extending sprockets learn more. here registered preprocessor comment text/css (.css) files. that have module that modifies input data, it's time register preprocessor your mime type. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":598,"title":"Caching with Rails: An Overview","heading":"1 Basic Caching","subheading":"1 Basic Caching","content":"this introduction three types caching techniques: page, action fragment caching. default rails provides fragment caching. order page action caching will need actionpack-page_caching actionpack-action_caching your gemfile. default, caching only enabled your production environment. play around with caching locally running rails dev:cache, setting config.action_controller.perform_caching true config/environments/development.rb."},{"id":599,"title":"Caching with Rails: An Overview","heading":"1 Basic Caching","subheading":"1.1 Page Caching","content":"page caching rails mechanism which allows request generated page fulfilled server (i.e. apache nginx) without having through entire rails stack. while this super fast can't applied every situation (such pages that need authentication). also, because server serving file directly from filesystem will need implement cache expiration."},{"id":600,"title":"Caching with Rails: An Overview","heading":"1 Basic Caching","subheading":"1.2 Action Caching","content":"page caching cannot used actions that have before filters example, pages that require authentication. this where action caching comes action caching works like page caching except incoming request hits rails stack that before filters before cache served. this allows authentication other restrictions while still serving result output from cached copy."},{"id":601,"title":"Caching with Rails: An Overview","heading":"1 Basic Caching","subheading":"1.3 Fragment Caching","content":"dynamic applications usually build pages with variety components which have same caching characteristics. when different parts page need cached expired separately fragment caching. fragment caching allows fragment view logic wrapped cache block served cache store when next request comes example, wanted cache each product page, could this code: when your application receives first request this page, rails will write cache entry with unique key. looks something like this: string characters middle template tree digest. hash digest computed based contents view fragment caching. change view fragment (e.g., html changes), digest will change, expiring existing file. cache version, derived from product record, stored cache entry. when product touched, cache version changes, cached fragments that contain previous version ignored. want cache fragment under certain conditions, cache_if cache_unless: render helper also cache individual templates rendered collection. even previous example with each reading cache templates once instead one. this done passing cached: true when rendering collection: cached templates from previous renders will fetched once with much greater speed. additionally, templates that haven't been cached will written cache multi fetched next render."},{"id":602,"title":"Caching with Rails: An Overview","heading":"1 Basic Caching","subheading":"1.4 Russian Doll Caching","content":"want nest cached fragments inside other cached fragments. this called russian doll caching. advantage russian doll caching that single product updated, other inner fragments reused when regenerating outer fragment. explained previous section, cached file will expire value updated_at changes record which cached file directly depends. however, this will expire cache fragment nested within. example, take following view: which turn renders this view: attribute game changed, updated_at value will current time, thereby expiring cache. however, because updated_at will changed product object, that cache will expired your will serve stale data. this, models together with touch method: with touch true, action which changes updated_at game record will also change associated product, thereby expiring cache."},{"id":603,"title":"Caching with Rails: An Overview","heading":"1 Basic Caching","subheading":"1.5 Shared Partial Caching","content":"possible share partials associated caching between files with different mime types. example shared partial caching allows template writers share partial between html javascript files. when templates collected template resolver file paths they only include template language extension mime type. because this templates used multiple mime types. both html javascript requests will respond following code: will load file named hotels/hotel.erb. another option include full filename partial render. will load file named hotels/hotel.html.erb file mime type, example could include this partial javascript file."},{"id":604,"title":"Caching with Rails: An Overview","heading":"1 Basic Caching","subheading":"1.6 Managing dependencies","content":"order correctly invalidate cache, need properly define caching dependencies. rails clever enough handle common cases don't have specify anything. however, sometimes, when you're dealing with custom helpers instance, need explicitly define them. most template dependencies derived from calls render template itself. here some examples render calls that actionview::digestor knows decode: other hand, some calls need changed make caching work properly. instance, you're passing custom collection, you'll need change:  sometimes you'll have template dependencies that can't derived all. this typically case when rendering happens helpers. here's example: you'll need special comment format call those out: some cases, like single table inheritance setup, might have bunch explicit dependencies. instead writing every template out, wildcard match template directory: collection caching, partial template doesn't start with clean cache call, still benefit from collection caching adding special comment format anywhere template, like: helper method, example, inside cached block then update that helper, you'll have bump cache well. doesn't really matter template file must change. recommendation simply explicit comment, like:"},{"id":605,"title":"Caching with Rails: An Overview","heading":"1 Basic Caching","subheading":"1.7 Low-Level Caching","content":"sometimes need cache particular value query result instead caching view fragments. rails' caching mechanism works great storing kind information. most efficient implement low-level caching using rails.cache.fetch method. this method does both reading writing cache. when passed only single argument, fetched value from cache returned. block passed, that block will executed event cache miss. return value block will written cache under given cache key, that return value will returned. case cache hit, cached value will returned without executing block. consider following example. application product model with instance method that looks product's price competing website. data returned this method would perfect low-level caching:"},{"id":606,"title":"Caching with Rails: An Overview","heading":"1 Basic Caching","subheading":"1.8 SQL Caching","content":"query caching rails feature that caches result returned each query. rails encounters same query again that request, will cached result opposed running query against database again. example: second time same query against database, it's actually going database. first time result returned from query stored query cache memory) second time it's pulled from memory. however, it's important note that query caches created start action destroyed that action thus persist only duration action. you'd like store query results more persistent fashion, with level caching. rails provides different stores cached data (apart from page caching)."},{"id":607,"title":"Caching with Rails: An Overview","heading":"2 Cache Stores","subheading":"2.1 Configuration","content":"your application's default cache store setting config.cache_store configuration option. other parameters passed arguments cache store's constructor: access cache calling rails.cache."},{"id":608,"title":"Caching with Rails: An Overview","heading":"2 Cache Stores","subheading":"2.2 ActiveSupport::Cache::Store","content":"this class provides foundation interacting with cache rails. this abstract class cannot own. rather must concrete implementation class tied storage engine. rails ships with several implementations documented below. main methods call read, write, delete, exist?, fetch. fetch method takes block will either return existing value from cache, evaluate block write result cache value exists. there some common options that used cache implementations. these passed constructor various methods interact with entries. default memcachestore rediscachestore single connection process. this means that you're using puma, another threaded server, have multiple threads waiting connection become available. increase number available connections enable connection pooling. first, connection_pool your gemfile: next, pass :pool_size and/or :pool_timeout options when configuring cache store: create your custom cache store simply extending activesupport::cache::store implementing appropriate methods. this way, swap number caching technologies into your rails application. custom cache store, simply cache store instance your custom class."},{"id":609,"title":"Caching with Rails: An Overview","heading":"2 Cache Stores","subheading":"2.3 ActiveSupport::Cache::MemoryStore","content":"this cache store keeps entries memory same ruby process. cache store bounded size specified sending :size option initializer (default 32mb). when cache exceeds allotted size, cleanup will occur least recently used entries will removed. you're running multiple ruby rails server processes (which case you're using phusion passenger puma clustered mode), then your rails server process instances won't able share cache data with each other. this cache store appropriate large application deployments. however, work well small, traffic sites with only couple server processes, well development test environments. rails projects configured this implementation development environment default."},{"id":610,"title":"Caching with Rails: An Overview","heading":"2 Cache Stores","subheading":"2.4 ActiveSupport::Cache::FileStore","content":"this cache store uses file system store entries. path directory where store files will stored must specified when initializing cache. with this cache store, multiple server processes same host share cache. this cache store appropriate medium traffic sites that served hosts. server processes running different hosts could share cache using shared file system, that setup recommended. cache will grow until disk full, recommended periodically clear entries. this default cache store implementation \"#{root}/tmp/cache/\") explicit config.cache_store supplied."},{"id":611,"title":"Caching with Rails: An Overview","heading":"2 Cache Stores","subheading":"2.5 ActiveSupport::Cache::MemCacheStore","content":"this cache store uses danga's memcached server provide centralized cache your application. rails uses bundled dalli default. this currently most popular cache store production websites. used provide single, shared cache cluster with very high performance redundancy. when initializing cache, should specify addresses memcached servers your cluster, ensure memcache_servers environment variable been appropriately. neither specified, will assume memcached running localhost default port (127.0.0.1:11211), this ideal setup larger sites. dalli::client documentation supported address types. write fetch methods this cache accept additional options that take advantage features specific memcached. specify :raw send value directly server with serialization. value must string number. memcached direct operations like increment decrement only values. also specify :unless_exist don't want memcached overwrite existing entry."},{"id":612,"title":"Caching with Rails: An Overview","heading":"2 Cache Stores","subheading":"2.6 ActiveSupport::Cache::RedisCacheStore","content":"redis cache store takes advantage redis support automatic eviction when reaches memory, allowing behave much like memcached cache server. deployment note: redis doesn't expire keys default, take care dedicated redis cache server. don't fill your persistent-redis server with volatile cache data! read redis cache server setup guide detail. cache-only redis server, maxmemory-policy variants allkeys. redis supports least-frequently-used eviction (allkeys-lfu), excellent default choice. redis earlier should least-recently-used eviction (allkeys-lru). cache read write timeouts relatively low. regenerating cached value often faster than waiting more than second retrieve both read write timeouts default second, lower your network consistently low-latency. default, cache store will attempt reconnect redis connection fails during request. experience frequent disconnects wish enable reconnect attempts. cache reads writes never raise exceptions; they just return instead, behaving there nothing cache. gauge whether your cache hitting exceptions, provide error_handler report exception gathering service. must accept three keyword arguments: method, cache store method that originally called; returning, value that returned user, typically nil; exception, exception that rescued. started, redis your gemfile: enable support faster hiredis connection library additionally adding ruby wrapper your gemfile: redis cache store will automatically require hiredis available. further configuration needed. finally, configuration relevant config/environments/*.rb file: more complex, production redis cache store look something like this:"},{"id":613,"title":"Caching with Rails: An Overview","heading":"2 Cache Stores","subheading":"2.7 ActiveSupport::Cache::NullStore","content":"this cache store scoped each request, clears stored values request. meant development test environments. very useful when have code that interacts directly with rails.cache caching interferes with seeing results code changes. keys used cache object that responds either cache_key to_param. implement cache_key method your classes need generate custom keys. active record will generate keys based class name record hashes arrays values cache keys. keys rails.cache will same those actually used with storage engine. they modified with namespace altered technology backend constraints. this means, instance, that can't save values with rails.cache then pull them with dalli gem. however, also don't need worry about exceeding memcached size limit violating syntax rules. conditional gets feature http specification that provide servers tell browsers that response request hasn't changed since last request safely pulled from browser cache. they work using http_if_none_match http_if_modified_since headers pass back forth both unique content identifier timestamp when content last changed. browser makes request where content identifier (etag) last modified since timestamp matches server's version then server only needs send back empty response with modified status. server's (i.e. our) responsibility look last modified timestamp if-none-match header determine whether send back full response. with conditional-get support rails this pretty easy task: instead options hash, also simply pass model. rails will updated_at cache_key_with_version methods setting last_modified etag: don't have special response processing using default rendering mechanism (i.e. you're using respond_to calling render yourself) then you've easy helper fresh_when: sometimes want cache response, example static page, that never gets expired. achieve this, http_cache_forever helper doing browser proxies will cache indefinitely. default cached responses will private, cached only user's browser. allow proxies cache response, public: true indicate that they serve cached response users. using this helper, last_modified header time.new(2011, 1).utc expires header years."},{"id":614,"title":"Caching with Rails: An Overview","heading":"4 Conditional GET support","subheading":"4.1 Strong v/s Weak ETags","content":"rails generates weak etags default. weak etags allow semantically equivalent responses have same etags, even their bodies match exactly. this useful when don't want page regenerated minor changes response body. weak etags have leading differentiate them from strong etags. unlike weak etag, strong etag implies that response should exactly same byte byte identical. useful when doing range requests within large video file. some cdns support only strong etags, like akamai. absolutely need generate strong etag, done follows. also strong etag directly response. it's common want test caching strategy your application development mode. rails provides rails command dev:cache easily toggle caching on/off. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":615,"title":"Associações Active Record","heading":"1 Por Que Associações?","subheading":"1 Por Que Associações?","content":"rails, associação conexão entre dois models active record. precisamos associações entre models? porque eles tornam operações comuns mais simples fáceis entender código. exemplo, considere aplicação rails simples inclua model autores model livros. cada autor pode vários livros. associações, declarações model seriam assim: agora, suponha queremos adicionar novo livro autor existente. precisaríamos fazer algo assim: considere excluir autor, garantindo todos seus livros serão excluídos também: associações active record, podemos otimizar essas outras operações declarando rails conexão entre dois models. aqui está código revisado configurar autores livros: essa alteração, mais fácil criar novo livro autor específico: excluir autor todos seus livros muito mais fácil: saber mais sobre diferentes tipos associações, leia próxima seção deste guia. seguida algumas dicas truques trabalhar associações sequência, referência completa métodos opções associações rails. rails suporta seis tipos associações: associações implementadas usando chamadas macro-style, você possa adicionar declarativamente recursos seus models. exemplo, declarar model belongs_to (pertence outro), você instrui rails manter informações primary key-foreign (chave primária-chave estrangeira) entre instâncias dois models, também obtém vários métodos úteis adicionados model. restante deste guia, você aprenderá como declarar usar várias formas associação. primeiro, rápida introdução situações cada tipo associação apropriada."},{"id":616,"title":"Associações Active Record","heading":"2 Os Tipos de Associações","subheading":"2.1 A Associação belongs_to","content":"associação belongs_to configura conexão outro model, modo cada instância model declarante \"pertença instância outro model. exemplo, aplicação incluir autores livros, cada livro pertencer apenas autor, você declarará model livro seguinte maneira:  migration correpondente parecerá assim: quando usado sozinho, belongs_to produz conexão unidirecional um-para-um. portanto, cada livro exemplo acima \"conhece\" autor, autores sabem sobre seus livros. configurar associação bidirecional belongs_to combinação has_one has_many outro model. belongs_to garante consistência referência, portanto, dependendo caso uso, você também pode precisar adicionar restrição chave estrangeira nível banco dados coluna referência, assim:"},{"id":617,"title":"Associações Active Record","heading":"2 Os Tipos de Associações","subheading":"2.2 A associação has_one","content":"associação has_one indica outro model referência este model. esse model pode obtido meio dessa associação. exemplo, cada fornecedor (supplier) aplicação tiver apenas conta, você declararia model fornecedor desta forma: principal diferença belongs_to coluna link supplier_id está localizada outra tabela:  migration correpondente parecerá assim: dependendo caso uso, também pode necessário criar índice exclusivo e/ou restrição foreign coluna fornecedor tabela contas. nesse caso, definição coluna parecerá assim: esta relação pode bidirecional quando usada combinação belongs_to outro model."},{"id":618,"title":"Associações Active Record","heading":"2 Os Tipos de Associações","subheading":"2.3 A Associação has_many","content":"associação has_many semelhante has_one, indica conexão um-para-muitos outro model. você encontrará frequentemente essa associação \"outro lado\" associação belongs_to. essa associação indica cada instância model possui zero mais instâncias outro model. exemplo, aplicação contém autores livros, model autor pode declarado assim:  migration correpondente parecerá assim: dependendo caso uso, geralmente ideia criar índice único opcionalmente, restrição chave estrangeira coluna autor tabela livros:"},{"id":619,"title":"Associações Active Record","heading":"2 Os Tipos de Associações","subheading":"2.4 A Associação has_many :through","content":"associação has_many :through frequentemente usada estabelecer conexão muitos-para-muitos outro model. essa associação indica model declarado pode correspondido zero mais instâncias outro model, prosseguindo através (through) terceiro model. exemplo, considere prática médica pacientes marcam consultas médicos. declarações associação relevantes podem seguinte aparência:  migration correspondente parecerá assim: conjunto junção models pode gerenciada através métodos associação has_many. exemplo, você atribuir: seguida, novos models junção criados automaticamente objetos recém-associados. alguns existiam anteriormente estão faltando agora, suas linhas junção excluídas automaticamente. associação has_many :through também útil configurar \"atalhos\" através associações aninhadas has_many. exemplo, documento possui muitas seções seção muitos parágrafos, você pode obter coleção simples todos parágrafos documento. você pode configurar dessa maneira: through: :section especificado, rails agora entenderá:"},{"id":620,"title":"Associações Active Record","heading":"2 Os Tipos de Associações","subheading":"2.5 A Associação has_one :through","content":"associação has_one :through estabelece conexão um-para-um outro model. essa associação indica model declarante pode combinado instância outro model, prosseguindo através(through) terceiro model. exemplo, cada fornecedor tiver conta, cada conta estiver associada histórico conta, então model fornecedor poderia ficar assim:  migration correpondente parecerá assim:"},{"id":621,"title":"Associações Active Record","heading":"2 Os Tipos de Associações","subheading":"2.6 A Associação has_and_belongs_to_many","content":"associação has_and_belongs_to_many cria conexão direta muitos-para-muitos outro model, nenhum model intermediário. essa associação indica cada instância model declarado refere zero mais instâncias outro model exemplo, aplicação incluir conjuntos peças, cada conjunto tendo muitas peças cada peça aparecendo muitos conjuntos, você poderá declarar model desta maneira:  migration correpondente parecerá assim:"},{"id":622,"title":"Associações Active Record","heading":"2 Os Tipos de Associações","subheading":"2.7 Escolhendo entre belongs_to and has_one","content":"você deseja configurar relacionamento um-para-um entre dois models, será necessário adicionar belongs_to has_one outro. como você sabe qual qual? distinção onde você coloca foreign (ela aparece tabela classe declara associação belongs_to), você deve pensar pouco significado real dados também. relacionamento has_one algo isto algo aponta você. exemplo, mais sentido dizer fornecedor possui conta conta possui fornecedor. isso sugere relacionamentos corretos assim: migration correpondente parecerá assim:"},{"id":623,"title":"Associações Active Record","heading":"2 Os Tipos de Associações","subheading":"2.8 Escolhendo entre has_many :through e has_and_belongs_to_many","content":"rails oferece duas maneiras diferentes declarar relacionamento muitos-para-muitos entre models. primeira maneira usar has_and_belongs_to_many, permite fazer associação diretamente: segunda maneira declara relacionamento muitos-para-muito usar has_many :through. isso associação forma indireta, através model junção: regra mais simples você deve configurar relacionamento has_many :through precisar trabalhar models relacionamento como entidade independente. você precisar fazer nada model relacionamento, pode mais simples configurar relacionamento has_and_belongs_to_many (embora seja necessário lembrar criar tabela junção banco dados). você deve usar has_many :through precisar validações, callbacks atributos extras join model(modelo junção)."},{"id":624,"title":"Associações Active Record","heading":"2 Os Tipos de Associações","subheading":"2.9 Associações Polimórficas","content":"mudança pouco mais avançada associações associação polimórfica. associações polimórficas, model pode pertencer mais outro model, única associação. exemplo, você pode model foto pertença model funcionário model produto. veja como isso pode declarado: você pode pensar declaração polimórfica belongs_to como configuração interface qualquer outro model pode usar. instância model funcionário, você pode recuperar coleção fotos: @employee.pictures. mesma forma, você pode recuperar @product.pictures. você instância model fotos, você pode chegar @picture.imageable. fazer isso funcionar, você precisa declarar coluna foreign coluna tipo model declara interface polimórfica: esta migration pode simplificada usando forma t.references: "},{"id":625,"title":"Associações Active Record","heading":"2 Os Tipos de Associações","subheading":"2.10 Self Joins","content":"projetar modelo dados, algumas vezes você encontrará model deve relação consigo mesmo. exemplo, você pode querer armazenar todos funcionários único modelo banco dados, conseguir rastrear relacionamentos como entre gerente subordinados. essa situação pode modelada associações self-joining: esta configuração, você pode recuperar @employee.subordinates @employee.manager. suas migrations/schema, você adicionará coluna referências próprio model. segue algumas coisas você deve saber utilizar associações active record suas aplicações rails:"},{"id":626,"title":"Associações Active Record","heading":"3 Dicas, Truques e Avisos","subheading":"3.1 Controlando o Caching","content":"todos métodos associação construídos torno caching, mantém resultado query mais recente disponível operações futuras. cache compartilhado entre métodos. exemplo: você quiser recarregar cache, porque pode haver alterações dados devido outra parte aplicação? simplesmente chame reload associação:"},{"id":627,"title":"Associações Active Record","heading":"3 Dicas, Truques e Avisos","subheading":"3.2 Evitando Colisões de Nome","content":"possível usar simplesmente qualquer nome suas associações. considerando criar associação adicionamos método nome especificado model, péssima ideia nome associação utilizado método instância activerecord::base. método associação sobrescreverá método base quebrará coisas. exemplo, attributes connection indicados como nomes associações."},{"id":628,"title":"Associações Active Record","heading":"3 Dicas, Truques e Avisos","subheading":"3.3 Atualizando o Schema","content":"associações extremamente úteis, mágica. você fica responsável manter schema banco dados forma corresponda suas associações. prática, isto significa duas coisas, dependendo tipo associação você criar. associações belongs_to você precisa criar chaves estrangeiras, associações has_and_belongs_to_many você precisa criar tabela junção (join table) apropriada. quando você declara associação belongs_to, você precisa criar chaves estrangeiras apropriadas. exemplo, considere este model: esta declaração precisa apoio coluna chave estrangeira apropriada tabela books. tabela recém criada, migração pode parecer isto: enquanto tabela existente, pode parecer isto: você criar associação has_and_belongs_to_many, você precisa criar tabela junção forma explícita. menos nome tabela junção seja especificado forma explícita através opção :join_table, active record cria nome utilizando ordem léxica nomes classe. dessa forma, junção entre models author book resulta nome tabela junção padrão \"authors_books\" porque precede ordenação léxica. independente nome, você deve gerar manualmente tabela junção migração apropriada. exemplo, considere estas associações: elas precisam apoio migração criar tabela assemblies_parts. esta tabela deve criada chave primária: passamos false create_table porque esta tabela representa model. isto necessário associação funcionar maneira correta. você observar qualquer comportamento estranho numa associação has_and_belongs_to_many como model corrompidos, exceções envolvendo conflito, provável você tenha esquecido deste detalhe. você também pode utilizar método create_join_table"},{"id":629,"title":"Associações Active Record","heading":"3 Dicas, Truques e Avisos","subheading":"3.4 Controlando o Escopo de Associação","content":"padrão, associações procuram objetos apenas dentro escopo model atual. isto relevante quando você declara models active record dentro módulo. exemplo: isto funciona corretamente, porque tanto classe supplier quanto classe account definidas dentro mesmo escopo. próximo exemplo funcionará, porque supplier account definidos escopos diferentes: associar model outro model namespace diferente, você deve especificar nome completo classe declaração associação:"},{"id":630,"title":"Associações Active Record","heading":"3 Dicas, Truques e Avisos","subheading":"3.5 Associações Bidirecionais","content":"normal associações funcionar duas direções, necessitando declarações dois models diferentes: active record tentará identificar automaticamente estes dois models compartilham associação bidirecional baseando-se nome associação. desta forma, active record carregará apenas cópia objeto author, tornando aplicação mais eficiente evitando dados inconsistentes: active record suporta identificação automática maioria associações nomes padrão. entanto, active record identificará automaticamente associações bidirecionais contêm :through :foreign_key. escopos personalizados associação oposta também impedem identificação, assim como escopos personalizados própria associação, menos config.active_record.automatic_scope_inversing estiver definido como verdadeiro padrão novas aplicações). exemplo, considere declarações models abaixo: active record reconhecerá mais associação bidirecional: active record fornece opção :inverse_of declarar associações bidirecionais forma explícita: incluir opção :inverse_of declaração associação has_many, active record agora reconhecerá associação bidirecional: seções seguintes detalhes sobre cada tipo associação, incluindo métodos elas adicionam opções você pode usar quando declarar associação."},{"id":631,"title":"Associações Active Record","heading":"4 Referência Detalhada das Associações","subheading":"4.1 Referência da Associação belongs_to","content":"termos banco dados, esta associação tabela deste modelo contém coluna representa referência outra tabela. isso pode usado configurar relações um-para-um um-para-muitos, dependendo configuração. tabela outra classe contém referência relação um-para-um, então você deve usar has_one. quando você declara associação belongs_to, classe declarada ganha automaticamente métodos relacionados associação: todos esses métodos, association substituída pelo symbol passado como primeiro argumento belongs_to. exemplo, dada declaração: cada instância model book terá estes métodos: método association retorna objeto associado, existir. nenhum objeto associado encontrado, retorna nil. objeto associado retornado pelo banco dados este objeto, versão cache será retornada. sobrescrever este comportamento forçar leitura banco dados), chame #reload_association objeto pai. método association= atribui objeto associado este objeto. trás cenas, isto significa extrair chave primária objeto associado atribuir chave estrangeira objeto mesmo valor. método build_association retorna objeto novo tipo associado. este objeto será instanciado atributos passados, ligação através chave estrangeira deste objeto será configurada, objeto associado ainda será salvo. método create_association retorna objeto novo tipo associado. este objeto será instanciado atributos passados, ligação através chave estrangeira deste objeto será configurada, passe todas validações especificadas model associado, objeto associado será salvo. mesma coisa método create_association acima, retorna activerecord::recordinvalid registro inválido. método association_changed? retorna true novo objeto associado atribuído chave estrangeira será atualizada próximo salvamento. método association_previously_changed? retorna true salvamento anterior atualizou associação referenciar novo objeto associado. enquanto rails utiliza padrões inteligentes funcionarão maior parte situações, pode haver momentos onde você quer customizar comportamento referência associação belongs_to. estas customizações podem realizadas facilmente passar opções blocos escopo quando você cria associação. exemplo, esta associação utiliza duas destas opções: associação belongs_to suporte estas opções: você configurar opção :autosave true, rails salvará qualquer membro associação carregada destruirá membros forem marcados destruição quando você salvar objeto pai. configurar :autosave false mesmo configurar opção :autosave. opção :autosave estiver presente, então novos objetos associados serão salvos, objetos associados forem atualizados serão salvos. nome outro model puder derivado partir nome associação, você pode usar opção :class_name passar nome model. exemplo, book pertence author, nome fato model contendo authors patron, esta configuração seria necessária: opção :counter_cache pode usada tornar busca pela quantidade objetos pertencem associação mais eficiente. considere estes models: estas declarações, pedir valor @author.books.size requer fazer chamada banco dados realizar consulta count(*). evitar esta chamada, você pode adicionar cache contagem model pertencente outro: esta declaração, rails manterá valor cache atualizado, retornará esse valor resposta método size. embora opção :counter_cache seja especificada model inclui declaração belongs_to, coluna fato deve adicionada model associado (has_many). caso acima, você precisaria adicionar coluna nome books_count model author. você pode sobrescrever nome padrão coluna especificar nome coluna customizado declaração counter_cache invés especificar true. exemplo, usar count_of_books invés books_count: colunas contagem cache adicionadas lista atributos leitura model contendo associação através attr_readonly. você configurar opção :dependent para: convenção, rails presume coluna usada armazenar chave estrangeira model nome associação sufixo adicionado. opção :foreign_key permite você atribua nome chave estrangeira diretamente: convenção, rails presume coluna usada armazenar chave primária suas tabelas. opção :primary_key permite especificar coluna diferente isto. exemplo, dada tabela users guid como chave primária. quisermos tabela todos separada guarde chave estrangeira user_id coluna guid, então podemos usar primary_key realizar isto desta forma: quando executamos @user.todos.create então registro @todo terá valor user_id como valor guid @user. opção :inverse_of específica nome associação has_many has_one inverso desta associação definida. passar true opção :polymorphic indica esta associação polimórfica. associações polimórficas foram discutidas detalhes anteriormente neste guia. você configurar opção :touch como true, então timestamp updated_at updated_on objeto associado será configurado hora atual quando este objeto salvo destruído: neste caso, salvar destruir book atualizará timestamp author associado. você também pode especificar timestamp particular atualizar: você configurar opção :validate como true, então novos objetos associados serão validados quando você salvar este objeto. padrão, este valor false: novos objetos associados serão validados quando este objeto salvo. você configurar opção :optional como true, então presença objeto associado será validada. padrão, esta opção está configurada como false. podem haver momentos onde você pode querer customizar consulta utilizada belongs_to. estas customizações podem feitas através bloco escopo. exemplo: você pode utilizar qualquer métodos padrão consulta abaixo dentro bloco escopo. métodos seguintes discutidos abaixo: método where permite especificar condições objeto associado deve atender. você pode utilizar método includes especificar associações segunda ordem devem carregadas forma adiantada quando esta associação utilizada. exemplo, considere estes models: você consulta authors frequência diretamente chapters (@chapter.book.author), então você pode deixar código relativamente mais eficiente incluir authors associação chapters books: você utilizar método readonly, então objeto associado terá acesso leitura quando retornado através associação. método select permite sobrescrever cláusula select usada consultar dados sobre objeto associado. padrão, rails retorna todas colunas. você pode objetos associados existem utilizar método association.nil?: atribuir objeto associação belongs_to salva objeto automaticamente. isto também salva objeto associado."},{"id":632,"title":"Associações Active Record","heading":"4 Referência Detalhada das Associações","subheading":"4.2 Referência da Associação has_one","content":"associação has_one cria relação um-para-um outro model. termos banco dados, esta associação outra classe contém chave estrangeira. esta classe contém chave estrangeira, então você deve utilizar belongs_to. quando você declara associação has_one, classe declarada ganha automaticamente métodos relacionados associação: todos estes métodos, association será substituído pelo symbol passado como primeiro argumento has_one. exemplo, dada declaração: cada instância model supplier terá estes métodos: método association retorna objeto associado, existir. nenhum objeto associado encontrado, retorna nil. objeto associado retornado pelo banco dados este objeto, versão cache será retornada. sobrescrever este comportamento forçar leitura banco dados), chame #reload_association objeto pai. método association= atribui objeto associado este objeto. trás cenas, isto significa extrair chave primária objeto associado atribuir chave estrangeira objeto mesmo valor. método build_association retorna objeto novo tipo associado. este objeto será instanciado atributos passados, ligação através chave estrangeira deste objeto será configurada, objeto associado ainda será salvo. método create_association retorna objeto novo tipo associado. este objeto será instanciado atributos passados, ligação através chave estrangeira deste objeto será configurada, passe todas validações especificadas model associado, objeto associado será salvo. mesma coisa método create_association acima, retorna activerecord::recordinvalid registro inválido. embora rails utilize padrões inteligentes funcionarão maioria situações, pode haver momentos onde você queira customizar comportamento referência associação has_one. tais customizações podem feitas facilmente passar opções quando você cria associação. exemplo, esta associação duas destas opções: associação has_one suporte estas opções: configurar opção indica esta associação polimórfica. associações polimórficas foram discutidas detalhes anteriormente neste guia. você configurar opção :autosave true, rails salvará qualquer membro associação carregada destruirá membros forem marcados destruição quando você salvar objeto pai. configurar :autosave false mesmo configurar opção :autosave. opção :autosave estiver presente, então novos objetos associados serão salvos, objetos associados forem atualizados serão salvos. nome outro model puder derivado partir nome associação, você pode usar opção :class_name fornecer nome model. exemplo, supplier account, nome fato model contendo accounts billing, esta configuração seria necessária: controla acontece objeto associado quando dono dele destruído: necessário configurar deixar opção :nullify estas associações restrição null banco dados. você configurar dependent estas associações você poderá mudar objeto associado porque chave estrangeira objeto associado inicial será configurada valor null permitido. convenção, rails presume coluna usada guardar chave estrangeira outro model nome deste model sufixo adicionado. opção :foreign_key permite você configure nome chave estrangeira diretamente: opção :inverse_of específica nome associação has_many has_one inverso desta associação definida. convenção, rails presume coluna usada armazenar chave primária suas tabelas. opção :primary_key permite especificar coluna diferente isto. opção :source especifica associação fonte associação has_one :through. opção :source_type especifica tipo associação fonte associação has_one :through procede através associação polimórfica. opção :through específica model junção realizar query através dele. associações has_one :through foram discutidas detalhes anteriormente neste guia. você configurar opção :touch como true, então timestamp updated_at updated_on objeto associado será configurado hora atual quando este objeto salvo destruído: neste caso, salvar destruir supplier atualizará timestamp account associada. você também pode especificar timestamp particular atualizar: você configurar opção :validate como true, então novos objetos associados serão validados quando você salvar este objeto. padrão, este valor false: novos objetos associados serão validados quando este objeto salvo. podem haver momentos onde você pode querer customizar consulta utilizada has_one. estas customizações podem feitas através bloco escopo. exemplo: você pode utilizar qualquer métodos padrão consulta abaixo dentro bloco escopo. métodos seguintes discutidos abaixo: método where permite especificar condições objeto associado deve atender. você pode utilizar método includes especificar associações segunda ordem devem carregadas forma adiantada quando esta associação utilizada. exemplo, considere estes models: você consulta representatives diretamente suppliers frequência (@supplier.account.representative), então você pode tornar código relativamente mais eficiente incluir representatives associação suppliers accounts: você utilizar método readonly, então objeto associado terá acesso leitura quando retornado através associação. método select permite sobrescrever cláusula select usada consultar dados sobre objeto associado. padrão, rails retorna todas colunas. você pode objetos associados existem utilizar método association.nil?: quando você atribui objeto associação has_one, este objeto será salvo automaticamente (para atualizar chave estrangeira). além disso, qualquer objeto substituído também será salvo automaticamente, porque chave estrangeira também mudar. qualquer destas operações escrita falharem devido erros validação, então atribuição retornará false atribuição será cancelada. objeto declarar associação has_one) salvo (isto new_record? retorna true) então objetos filhos serão salvos. eles serão salvos automaticamente quando objeto salvo. você quiser atribuir objeto associação has_one salvar objeto, utilize método build_association."},{"id":633,"title":"Associações Active Record","heading":"4 Referência Detalhada das Associações","subheading":"4.3 Referência da Associação has_many","content":"associação has_many cria relação um-para-muitos outro model. termos banco dados, esta associação outra classe terá chave estrangeira refere instâncias desta classe. quando você declara associação has_many, classe declarada ganha automaticamente métodos relacionados associação: todos estes métodos, collection será substituído pelo symbol passado como primeiro argumento has_many, collection_singular será substituído pela versão singular daquele symbol. exemplo, dada declaração: cada instância model author terá estes métodos: método collection retorna relation todos objetos associados. objetos associados, retorna relation vazia. método collection<< acrescenta mais objetos coleção configurando chave estrangeira deles como chave primária model pai. método collection.delete remove mais objetos coleção configurar chave estrangeira deles como null. método collection.destroy remove mais objetos coleção executando destroy cada objeto. método collection= coleção contenha apenas objetos fornecidos, adicionar deletar forma mais apropriada. mudanças persistidas banco dados. método collection_singular_ids retorna array objetos coleção. método collection= coleção contenha apenas objetos identificados pelo valor chaves primárias fornecidas, adicionando deletando forma mais apropriada. mudanças persistidas banco dados. método collection.clear remove todos objetos coleção acordo estratégia especificada pela opção dependent. nenhuma opção especificada, segue estratégia padrão. estratégia padrão associações has_many :through delete_all, associações has_many configurar chaves estrangeiras como null. método collection.empty? retorna true coleção contiver nenhum objeto associado. método collection.size retorna número objetos coleção. método collection.find procura objetos dentro tabela coleção. método collection.where procura objetos dentro coleção base condições fornecidas objetos serão carregados apenas quando necessário (lazy loading) significando banco dados consultado apenas quando objetos acessados. método collection.exists? confere objeto atende condições fornecidas existe tabela coleção. método collection.build retorna apenas objeto array objetos. objetos serão instanciados base atributos passados método será criada ligação através chaves estrangeiras, objetos associados serão salvos ainda. método collection.create retorna objeto array novos objetos tipo associado. objetos serão instanciados base atributos foram passados método, ligação será criada através chave estrangeira, estes objetos passem todas validações especificadas model associado, objeto associado será salvo. mesmo collection.create acima, retorna activerecord::recordinvalid dado inválido. método collection.reload retorna relation todos objetos associados, forçando leitura banco dados. houver objetos associados, retorna relation vazia. embora rails utilize padrões inteligentes funcionarão maioria situações, pode haver momentos onde você queira customizar comportamento referência associação has_many. tais customizações podem feitas facilmente passar opções quando você cria associação. exemplo, esta associação duas destas opções: associação has_many suporte estas opções: configurar opção indica esta associação polimórfica, como discutido anteriomente neste guia. você configurar opção :autosave true, rails salvará qualquer membro associação carregada destruirá membros forem marcados destruição quando você salvar objeto pai. configurar :autosave false mesmo configurar opção :autosave. opção :autosave estiver presente, então novos objetos associados serão salvos, objetos associados forem atualizados serão salvos. nome outro model puder derivado partir nome associação, você pode usar opção :class_name fornecer nome model. exemplo, author muitos books, nome fato model contendo books transaction, esta configuração seria necessária: esta opção pode utilizada configurar :counter_cache personalizado. você precisa desta opção quando você personalizar nome :counter_cache associação belongs_to. controla acontece objetos associados quando dono deles destruído: opções :destroy :delete_all também afetam semântica métodos collection.delete collection= fazendo eles destruam objetos associados removê-los coleção. convenção, rails presume coluna usada guardar chave estrangeira outro model nome deste model sufixo adicionado. opção :foreign_key permite você configure nome chave estrangeira diretamente: opção :inverse_of específica nome associação has_many has_one inverso desta associação definida. convenção, rails presume coluna usada armazenar chave primária suas tabelas. opção :primary_key permite especificar coluna diferente isto. digamos tabela users tenha como chave primária também coluna guid. requerimento tabela todos deve guardar valor coluna guid como chave estrangeria valor podemos fazer isto desta forma: agora executar @todo @user.todos.create valor user_id registro @todo será valor guid @user. opção :source especifica associação fonte associação has_many :through. você precisa utilizar esta opção possível inferir nome associação fonte automaticamente. opção :source_type especifica tipo associação fonte associação has_many :through procede através associação polimórfica. opção :through específica model junção realizar query através dele. associações has_many :through fornecem maneira implementar relações muitos-para-muitos, como discutido anteriormente neste guia. você configurar opção :validate como false, então novos objetos associados serão validados quando você salvar este objeto. padrão, este valor true: novos objetos associados serão validados quando este objeto salvo. podem haver momentos onde você pode querer customizar consulta utilizada has_many. estas customizações podem feitas através bloco escopo. exemplo: você pode utilizar qualquer métodos padrão consulta abaixo dentro bloco escopo. métodos seguintes discutidos abaixo: método where permite especificar condições objeto associado deve atender. você também pode especificar condições através hash: você utilizar opção estilo hash, então criação dados através desta associação terá escopo limitado automaticamente utilizando hash. neste caso, utilizar @author.confirmed_books.create @author.confirmed_books.build criará books onde coluna confirmed terá valor true. método extending específica módulo nome estender delegação associação. extensões associações discutidas detalhes mais frente neste guia. método group fornece nome atributo agrupar resultado consulta banco dados, utilizando cláusula group busca sql. você pode utilizar método includes especificar associações segunda ordem devem carregadas forma adiantada quando esta associação utilizada. exemplo, considere estes models: você busca chapters frequência authors (@author.books.chapters), então você pode deixar código ligeiramente mais eficiente incluir chapters associação authors books: método limit permite restringir número total objetos serão retornados através associação. método permite especificar deslocamento inicial buscar objetos banco dados através associação. exemplo, offset(11) pulará primeiros registros banco dados. método order determina ordem pela qual objetos associados serão retornados sintaxe utilizada pela cláusula order by). você utilizar método readonly, então objetos associados terão acesso leitura quando retornados através associação. método select permite sobrescrever cláusula select utilizada retornar dados sobre objetos associados. padrão, rails retorna todas colunas. utilize método distinct manter coleção livre objetos duplicados. isto mais útil junto opção :through. caso acima dois readings person.articles retorna dois apesar destes registros apontarem mesmo article. agora vamos especificar distinct: caso acima ainda dois readings. contudo, person.articles mostra apenas article porque coleção carrega apenas registros únicos. você quiser certeza que, inserir dados novos banco, todos registros associação persistida sejam distintos forma você também possa certeza quando inspecionar associação, achará dados duplicados), você deve colocar índice único própria tabela. exemplo, você tabela chamada readings você quer certeza articles sejam adicionados person apenas vez, você pode colocar seguinte migração: você tenha este índice único, tentar incluir article person duas vezes retornará erro activerecord::recordnotunique: note conferir unicidade utilizando algo como include? está sujeito race conditions (exemplo: https://pt.wikipedia.org/wiki/condi%c3%a7%c3%a3o_de_corrida). tente utilizar include? impor objetos sejam distintos associação. exemplo, utilizando exemplo article acima, código seguinte teria race condition porque múltiplos usuários podem tentar isto mesmo tempo: quando você atribui objeto associação has_many, este objeto será salvo automaticamente (para atualizar chave estrangeira). você atribuir vários objetos declaração, então todos serão salvos. qualquer destas operações escrita falharem devido erros validação, então atribuição retornará false atribuição será cancelada. objeto declarar associação has_many) salvo (isto new_record? retorna true) então objetos filhos serão salvos quando forem adicionados coleção. todos membros associação forem salvos anteriormente serão salvos automaticamente quando objeto salvo. você quiser atribuir objeto associação has_many salvar objeto, utilize método collection.build."},{"id":634,"title":"Associações Active Record","heading":"4 Referência Detalhada das Associações","subheading":"4.4 Referência da Associação has_and_belongs_to_many","content":"associação has_and_belongs_to_many cria relação muitos-para-muitos outro model. termos banco dados, isto associa duas classes através tabela junção intermediária inclui chaves estrangeiras fazendo referência cada classe. quando você declara associação has_and_belongs_to_many, classe declarada ganha automaticamente vários métodos relacionados associação: todos estes métodos, collection será substituído pelo symbol passado como primeiro argumento has_and_belongs_to_many, collection_singular será substituído versão singular daquele symbol. exemplo, dada declaração: cada instância model part terá estes métodos: tabela junção associação has_and_belongs_to_many colunas adicionais além duas chaves estrangeiras, estas colunas serão adicionadas como atributos registros retornados através associação. registros retornados atributos adicionais apenas poderão acesso leitura, porque rails pode salvar mudanças destes atributos. método collection retorna relation todos objetos associados. objetos associados, retorna relation vazia. método collection<< acrescenta mais objetos coleção criando dados tabela junção. método collection.delete remove mais objetos coleção deletando dados tabela junção. isto destrói objetos. método collection.destroy remove mais objetos coleção deletando dados tabela junção. isto destrói objetos. método collection= coleção contenha apenas objetos fornecidos, adicionar deletar forma mais apropriada. mudanças persistidas banco dados. método collection_singular_ids retorna array objetos coleção. método collection= coleção contenha apenas objetos identificados pelo valor chaves primárias fornecidas, adicionando deletando forma mais apropriada. mudanças persistidas banco dados. método collection.clear remove todos objetos coleção deletando todas linhas tabela junção. isto destrói objetos associados. método collection.empty? retorna true coleção contiver nenhum objeto associado. método collection.size retorna número objetos coleção. método collection.find procura objetos dentro tabela coleção. método collection.where procura objetos dentro coleção base condições fornecidas objetos serão carregados apenas quando necessário (lazy loading) significando banco dados consultado apenas quando objetos acessados. método collection.exists? confere objeto atende condições fornecidas existe tabela coleção. método collection.build retorna objeto novo tipo associado. objeto será instanciado base atributos passados método será criada ligação através chave estrangeira, objeto associado será salvo ainda. método collection.create retorna objeto novo tipo associado. este objeto será instanciado base atributos foram passados método, ligação através tabela junção será criado, objeto passe todas validações especificadas model associado, objeto associado será salvo. mesmo collection.create, retorna activerecord::recordinvalid dado inválido. método collection.reload retorna relation todos objetos associados, forçando leitura banco dados. houver objetos associados, retorna relation vazia. embora rails utilize padrões inteligentes funcionarão maioria situações, pode haver momentos onde você queira customizar comportamento referência associação has_and_belongs_to_many. tais customizações podem feitas facilmente passar opções quando você cria associação. exemplo, esta associação duas destas opções: associação has_and_belongs_to_many suporte estas opções: convenção, rails presume coluna tabela junção utilizada guardar chave estrangeira aponta outro model nome daquele model sufixo acrescentado. opção :association_foreign_key permite especificar nome chave estrangeira diretamente: você configurar opção :autosave true, rails salvará qualquer membro associação carregada destruirá membros forem marcados destruição quando você salvar objeto pai. configurar :autosave false mesmo configurar opção :autosave. opção :autosave estiver presente, então novos objetos associados serão salvos, objetos associados forem atualizados serão salvos. nome outro model puder derivado partir nome associação, você pode usar opção :class_name fornecer nome model. exemplo, part muitas assemblies, nome fato model contendo assemblies gadget, esta configuração seria necessária: convenção, rails presume coluna tabela junção utilizada armazenar chave estrangeira apontando este model nome deste model sufixo acrescentado. opção :foreign_key permite você atribua nome chave estrangeira diretamente: nome padrão tabela junção, baseado ordenamento léxico, você quer, você pode utilizar opção :join_table sobrescrever nome padrão. você configurar opção :validate como false, então novos objetos associados serão validados quando você salvar este objeto. padrão, este valor true: novos objetos associados serão validados quando este objeto salvo. podem haver momentos onde você pode querer customizar consulta utilizada has_and_belongs_to_many. estas customizações podem feitas através bloco escopo. exemplo: você pode utilizar qualquer métodos padrão consulta abaixo dentro bloco escopo. métodos seguintes discutidos abaixo: método where permite especificar condições objeto associado deve atender. você também pode especificar condições através hash: você utilizar opção where estilo hash, então criação dados através desta associação terá escopo limitado automaticamente utilizando hash. neste caso, utilizar @parts.assemblies.create @parts.assemblies.build criará orders onde coluna factory terá valor \"seattle\". método extending específica módulo nome estender delegação associação. extensões associações discutidas detalhes mais frente neste guia. método group fornece nome atributo agrupar resultado consulta banco dados, utilizando cláusula group busca sql. você pode utilizar método includes especificar associações segunda ordem devem carregadas antecedêncai quando esta associação utilizada. método limit permite restringir número total objetos serão retornados através associação. método permite especificar deslocamento inicial buscar objetos banco dados através associação. exemplo, você utilizar offset(11), pulará primeiros registros banco dados. método order determina ordem pela qual objetos associados serão retornados sintaxe utilizada pela cláusula order by). você utilizar método readonly, então objetos associados terão acesso leitura quando retornados através associação. método select permite sobrescrever cláusula select utilizada retornar dados sobre objetos associados. padrão, rails retorna todas colunas. utilize método distinct remover objetos duplicados coleção. quando você atribui objeto associação has_and_belongs_to_many, este objeto será salvo automaticamente (para atualizar tabela junção). você atribuir vários objetos declaração, então todos serão salvos. qualquer destas operações escrita falharem devido erros validação, então atribuição retornará false atribuição será cancelada. objeto declarar associação has_and_belongs_to_many) salvo (isto new_record? retorna true) então objetos filhos serão salvos quando forem adicionados coleção. todos membros associação forem salvos anteriormente serão salvos automaticamente quando objeto salvo. você quiser atribuir objeto associação has_and_belongs_to_many salvar objeto, utilize método collection.build."},{"id":635,"title":"Associações Active Record","heading":"4 Referência Detalhada das Associações","subheading":"4.5 Callbacks de Associação","content":"callbacks normais aparecem ciclo vida objetos active record, permitindo trabalhar estes objetos vários pontos. exemplo, você pode utilizar callbacks :before_save fazer algo aconteça logo antes salvar objeto. callbacks associação similares callbacks normais, eles ativados eventos ciclo vida coleção. quatro callbacks associação disponíveis: você define callbacks associação adicionar opções declaração associação. exemplo: rails passa objeto adicionado removido callback. você pode empilhar callbacks único evento passá-los como array: callback before_add retorna exceção :abort, objeto será adicionado coleção. forma similar, callback before_remove retorna exceção :abort, objeto será removido coleção."},{"id":636,"title":"Associações Active Record","heading":"4 Referência Detalhada das Associações","subheading":"4.6 Association Extensions","content":"suas opções estão limitadas funcionalidades rails monta automaticamente objetos referência associação. você também pode extender estes objetos através módulos anônimos, acrescentar finders novos, creators, outros métodos. exemplo: você extensão deve compartilhada várias associações, você pode utilizar módulo extensão nome. exemplo: extensões podem fazer referência detalehs internos objeto referência associação utilizando estes três atributos acessor proxy_association: vezes desejável compartilhar atributos comportamento entre models. vamos dizer temos models car, motorcycle bicycle. queremos compartilhar atributos color price também alguns métodos estes atributos, ainda mantendo comportamentos específicos cada deles, incluindo controllers separados. primeiro, vamos gerar model base, vehicle: você notou estamos adicionando atributo type? dado todos models serão armazenados única tabela, rails armazenar nome model nesse atributo. nosso exemplo, possibilidades car, motorcycle bicycle. funciona atributo type tabela. seguida, vamos gerar três models herdam vehicle. isso podemos usar opção --parent=parent gerar model herda \"parent\" especificado migration equivalente (dado tabela existe). exemplo, gerar model car: model gerado parecer com: isso significa todo comportamento adicionado classe vehicle estará disponível também classe car, incluindo associações, métodos públicos, etc. criar carro armazená-lo tabela vehicles popular atributo type valor \"car\": gerar seguinte sql: query (consulta) registros carros buscar veiculos tipo car. executar seguinte query: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":637,"title":"Segurança em Aplicações Rails","heading":"1 Introdução","subheading":"1 Introdução","content":"frameworks aplicações feitos ajudar pessoas desenvolvedoras construir aplicações web. alguns deles também ajudam proteger aplicação. verdade, framework mais seguro outro: você utilizá-lo corretamente, poderá construir aplicações seguras muitos frameworks. ruby rails alguns métodos auxiliares inteligentes, exemplo, contra injection (injeção sql), modo isso dificilmente será problema. geral, existe segurança plug-and-play (ligar usar). segurança depende pessoas utilizam framework vezes, método desenvolvimento. depende também todas camadas ambiente aplicação web: armazenamento back-end, servidor própria aplicação possivelmente outras camadas aplicações). gartner group, entanto, estima ataques ocorrem camada aplicação descobriu \"dentre sites auditados, estão vulneráveis ataques\". isso ocorre porque aplicações relativamente fáceis atacar, pois simples entender manipular, mesmo pessoas leigas. ameaças contra aplicações incluem sequestro contas usuário, desvio controle acesso, leitura modificação dados confidenciais apresentação conteúdo fraudulento. pessoa invasora pode capaz instalar programa malicioso como cavalo tróia algum software envio e-mail solicitado, visando enriquecimento financeiro causar danos marca modificando recursos empresa. prevenir ataques, minimizar impacto remover pontos ataque, primeiro lugar, você deve entender completamente métodos ataque encontrar medidas combate corretas. esse objetivo deste guia. desenvolver aplicações seguras, você deve manter atualizado(a) todas camadas conhecer seus inimigos. manter atualizado(a), inscreva-se listas discussão segurança, leia blogs segurança torne atualizações verificações segurança hábito (consulte capítulo recursos adicionais). isso feito manualmente porque assim você encontra problemas desagradáveis segurança. este capítulo descreve alguns ataques específicos relacionados sessões medidas segurança proteger seus dados sessão."},{"id":638,"title":"Segurança em Aplicações Rails","heading":"2 Sessões","subheading":"2.1 O que são Sessões?","content":"maioria aplicações precisa rastrear estado usuários interagem aplicação. pode ser, exemplo, conteúdo carrinho compras identificação usuário conectado momento. esse tipo estado específico pode armazenado sessão. rails fornece objeto sessão cada usuário acessa aplicação. usuário sessão ativa, rails utiliza sessão existente. caso contrário, nova sessão será criada."},{"id":639,"title":"Segurança em Aplicações Rails","heading":"2 Sessões","subheading":"2.2 Sequestro de Sessão","content":"muitas aplicações sistema autenticação: usuário fornece nome usuário senha, aplicação confere armazena usuário correspondente hash sessão. partir agora, sessão válida. cada requisição aplicação carregará usuário, identificado pelo usuário sessão, necessidade nova autenticação. sessão cookie identifica sessão. portanto, cookie serve como autenticação temporária aplicação web. qualquer pessoa obter cookie outra pessoa pode utilizar aplicação como fosse esse usuário consequências possivelmente graves. aqui estão algumas maneiras sequestrar sessão suas medidas preventivas: principal objetivo maioria invasores ganhar dinheiro. preços clandestinos login contas bancárias roubadas variam 0.5%-10% saldo conta, $0.5-$30 números cartão crédito ($20-$60 detalhes completos), $0.1-$1.5 identidades (nome, semelhante brasil data nascimento), $20-$50 contas varejistas $6-$10 contas provedor serviço nuvem, acordo relatório ameaças segurança internet symantec (2017, inglês)"},{"id":640,"title":"Segurança em Aplicações Rails","heading":"2 Sessões","subheading":"2.3 Armazenamento de Sessão","content":"rails cookiestore salva hash sessão cookie lado cliente. servidor recupera hash sessão cookie elimina necessidade sessão. isso aumentará muito velocidade aplicação, opção armazenamento controversa você deve analisar implicações segurança limitações armazenamento dessa opção: cookiestore utiliza cookie (recipiente cookie) encriptado fornecer local criptografado seguro armazenar dados sessão. sessões baseadas cookies fornecem integridade confidencialidade seus conteúdos. chave encriptação, como chave verificação utilizada cookies assinados, derivada valor configuração secret_key_base. também importante utilizar diferentes valores salt (sal, tradução livre) cookies encriptados assinados. utilizar mesmo valor diferentes valores configuração salt pode fazer mesma chave derivada seja utilizada diferentes funcionalidades segurança que, vez, podem enfraquecer força chave. aplicações teste desenvolvimento, obtenha secret_key_base derivada nome aplicação. outros ambientes devem utilizar chave aleatória presente config/credentials.yml.enc, exibida aqui estado descriptografado:"},{"id":641,"title":"Segurança em Aplicações Rails","heading":"2 Sessões","subheading":"2.4 Configurações de Rotação de Cookies Assinados e Encriptados","content":"rotação ideal alterar configurações cookies garantir cookies antigos sejam imediatamente inválidos. seus usuários então chance visitar site, cookie configuração antiga reescrevê-lo nova alteração. rotação pode então removida assim você sentir confortável suficiente usuários tenham chance atualizar seus cookies. possível rotacionar cifras digests valor saída função hash criptográfica) utilizados cookies encriptados assinados. exemplo, alterar digest utilizado cookies assinados sha1 sha256, você deve primeiro atribuir novo valor configuração: agora, adicione rotação antigo digest sha1 cookies existentes sejam perfeitamente atualizados novo digest sha256. seguida, quaisquer cookies assinados escritos serão criptografados sha256. cookies antigos foram gravados sha1 ainda podem lidos acessados, serão gravados novo digest, forma serão atualizados serão inválidos quando você remover rotação. quando usuários cookies assinados sha1 tiverem mais chance reescrever seus cookies, remova rotação. embora você possa configurar quantas rotações desejar, muito comum muitas rotações mesmo tempo. obter mais detalhes sobre rotação chaves mensagens criptografadas assinadas, como várias opções método rotate aceita, consulte documentação messageencryptor messageverifier"},{"id":642,"title":"Segurança em Aplicações Rails","heading":"2 Sessões","subheading":"2.5 Replay Attacks for CookieStore Sessions","content":"works like this: including nonce random value) session solves replay attacks. nonce valid only once, server keep track valid nonces. gets even more complicated have several application servers. storing nonces database table would defeat entire purpose cookiestore (avoiding accessing database). best solution against store this kind data session, database. this case store credit database logged_in_user_id session."},{"id":643,"title":"Segurança em Aplicações Rails","heading":"2 Sessões","subheading":"2.6 Session Fixation","content":" this attack focuses fixing user's session known attacker, forcing user's browser into using this therefore necessary attacker steal session afterwards. here this attack works:"},{"id":644,"title":"Segurança em Aplicações Rails","heading":"2 Sessões","subheading":"2.7 Session Fixation - Countermeasures","content":"most effective countermeasure issue session identifier declare invalid after successful login. that way, attacker cannot fixed session identifier. this good countermeasure against session hijacking, well. here create session rails: popular devise user management, will automatically expire sessions sign sign you. roll your own, remember expire session after your sign action (when session created). this will remove values from session, therefore will have transfer them session. another countermeasure save user-specific properties session, verify them every time request comes deny access, information does match. such properties could remote address user agent (the browser name), though latter less user-specific. when saving address, have bear mind that there internet service providers large organizations that their users behind proxies. these might change over course session, these users will able your application, only limited way."},{"id":645,"title":"Segurança em Aplicações Rails","heading":"2 Sessões","subheading":"2.8 Session Expiry","content":"possibility expiry time-stamp cookie with session however client edit cookies that stored browser expiring sessions server safer. here example expire sessions database table. call session.sweep(20.minutes) expire sessions that were used longer than minutes ago. section about session fixation introduced problem maintained sessions. attacker maintaining session every five minutes keep session alive forever, although expiring sessions. simple solution this would created_at column sessions table. delete sessions that were created long time ago. this line sweep method above: this attack method works including malicious code link page that accesses application that user believed have authenticated. session that application timed out, attacker execute unauthorized commands.  session chapter have learned that most rails applications cookie-based sessions. either they store session cookie have server-side session hash, entire session hash client-side. either case browser will automatically send along cookie every request domain, find cookie that domain. controversial point that request comes from site different domain, will also send cookie. let's start with example: important notice that actual crafted image link doesn't necessarily have situated application's domain, anywhere forum, blog post, email. csrf appears very rarely (common vulnerabilities exposures) less than 0.1% really 'sleeping giant' [grossman]. this stark contrast results many security contract works csrf important security issue."},{"id":646,"title":"Segurança em Aplicações Rails","heading":"3 Cross-Site Request Forgery (CSRF)","subheading":"3.1 CSRF Countermeasures","content":"http protocol basically provides main types requests post (delete, put, patch should used like post). world wide consortium (w3c) provides checklist choosing http post:  post your application restful, might used additional http verbs, such patch, put, delete. some legacy browsers, however, support them only post. rails uses hidden _method field handle these cases. post requests sent automatically, too. this example, link www.harmless.com shown destination browser's status bar. actually dynamically created form that sends post request. attacker places code into onmouseover event handler image: there many other possibilities, like using <script> make cross-site request with jsonp javascript response. response executable code that attacker find run, possibly extracting sensitive data. protect against this data leakage, must disallow cross-site <script> tags. ajax requests, however, obey browser's same-origin policy (only your site allowed initiate xmlhttprequest) safely allow them return javascript responses. protect against other forged requests, introduce required security token that site knows other sites don't know. include security token requests verify server. this done automatically when config.action_controller.default_protect_from_forgery true, which default newly created rails applications. also manually adding following your application controller: this will include security token forms ajax requests generated rails. security token doesn't match what expected, exception will thrown. common persistent cookies store user information, with cookies.permanent example. this case, cookies will cleared csrf protection will effective. using different cookie store than session this information, must handle what with yourself: above method placed applicationcontroller will called when csrf token present incorrect non-get request. note that cross-site scripting (xss) vulnerabilities bypass csrf protections. gives attacker access elements page, they read csrf security token from form directly submit form. read more about later. another class security vulnerabilities surrounds redirection files applications."},{"id":647,"title":"Segurança em Aplicações Rails","heading":"4 Redirection and Files","subheading":"4.1 Redirection","content":"whenever user allowed pass (parts redirection, possibly vulnerable. most obvious attack would redirect users fake application which looks feels exactly original one. this so-called phishing attack works sending unsuspicious link email users, injecting link application putting link into external site. unsuspicious, because link starts with application malicious site hidden redirection parameter: http://www.example.com/site/redirect?to=www.attacker.com. here example legacy action: this will redirect user main action they tried access legacy action. intention preserve parameters legacy action pass them main action. however, exploited attacker they included host url: will hardly noticed redirects user attacker.com host. general rule, passing user input directly into redirect_to considered dangerous. simple countermeasure would include only expected parameters legacy action (again permitted list approach, opposed removing unexpected parameters). redirect url, check with permitted list regular expression. another redirection self-contained attack works firefox opera data protocol. this protocol displays contents directly browser anything from html javascript entire images: data:text/html;base64,phnjcmlwdd5hbgvydcgnwfntjyk8l3njcmlwdd4k this example base64 encoded javascript which displays simple message box. redirection url, attacker could redirect this with malicious code countermeasure, allow user supply (parts redirected"},{"id":648,"title":"Segurança em Aplicações Rails","heading":"4 Redirection and Files","subheading":"4.2 File Uploads","content":"many applications allow users upload files. file names, which user choose (partly), should always filtered attacker could malicious file name overwrite file server. store file uploads /var/www/uploads, user enters file name like \"../../../etc/passwd\", overwrite important file. course, ruby interpreter would need appropriate permissions more reason servers, database servers, other programs less privileged unix user. when filtering user input file names, don't remove malicious parts. think situation where application removes \"../\" file name attacker uses string such \"....//\" result will \"../\". best permitted list approach, which checks validity file name with accepted characters. this opposed restricted list approach which attempts remove allowed characters. case isn't valid file name, reject replace accepted characters), don't remove them. here file name sanitizer from attachment_fu plugin: significant disadvantage synchronous processing file uploads attachment_fu plugin with images), vulnerability denial-of-service attacks. attacker synchronously start image file uploads from many computers which increases server load eventually crash stall server. solution this best process media files asynchronously: save media file schedule processing request database. second process will handle processing file background."},{"id":649,"title":"Segurança em Aplicações Rails","heading":"4 Redirection and Files","subheading":"4.3 Executable Code in File Uploads","content":"popular apache server option called documentroot. this home directory website, everything this directory tree will served server. there files with certain file name extension, code will executed when requested (might require some options set). examples this files. think situation where attacker uploads file \"file.cgi\" with code which will executed when someone downloads file. your apache documentroot points rails' /public directory, file uploads store files least level upwards."},{"id":650,"title":"Segurança em Aplicações Rails","heading":"4 Redirection and Files","subheading":"4.4 File Downloads","content":"just have filter file names uploads, have downloads. send_file() method sends files from server client. file name, that user entered, without filtering, file downloaded: simply pass file name like \"../../../etc/passwd\" download server's login information. simple solution against this, check that requested file expected directory: another (additional) approach store file names database name files disk after database. this also good approach avoid possible code uploaded file executed. attachment_fu plugin does this similar way. intranet administration interfaces popular attack targets, because they allow privileged access. although this would require several extra-security measures, opposite case real world. there first tailor-made trojan which stole information from intranet, namely \"monster employers\" website monster.com, online recruitment application. tailor-made trojans very rare, far, risk quite low, certainly possibility example security client host important, too. however, highest threat intranet admin applications csrf. your application re-displays malicious user input from extranet, application will vulnerable xss. user names, comments, spam reports, order addresses just uncommon examples, where there xss. having single place admin interface intranet, where input been sanitized, makes entire application vulnerable. possible exploits include stealing privileged administrator's cookie, injecting iframe steal administrator's password installing malicious software through browser security holes take over administrator's computer. refer injection section countermeasures against xss. csrf cross-site request forgery (csrf), also known cross-site reference forgery (xsrf), gigantic attack method, allows attacker everything administrator intranet user have already seen above csrf works, here examples what attackers intranet admin interface. real-world example router reconfiguration csrf. attackers sent malicious e-mail, with csrf mexican users. e-mail claimed there e-card waiting user, also contained image that resulted http-get request reconfigure user's router (which popular model mexico). request changed dns-settings that requests mexico-based banking site would mapped attacker's site. everyone accessed banking site through that router attacker's fake website their credentials stolen. another example changed google adsense's e-mail address password. victim logged into google adsense, administration interface google advertisement campaigns, attacker could change credentials victim. another popular attack spam your application, your blog, forum propagate malicious xss. course, attacker know structure, most rails urls quite straightforward they will easy find out, open-source application's admin interface. attacker even 1,000 lucky guesses just including malicious img-tags which every possible combination. countermeasures against csrf administration interfaces intranet applications, refer countermeasures csrf section."},{"id":651,"title":"Segurança em Aplicações Rails","heading":"5 Intranet and Admin Security","subheading":"5.1 Additional Precautions","content":"common admin interface works like this: it's located www.example.com/admin, accessed only admin flag user model, re-displays user input allows admin delete/add/edit whatever data desired. here some thoughts about this: there number authentication plug-ins rails available. good ones, such popular devise authlogic, store only cryptographically hashed passwords, plain-text passwords. since rails also built-in has_secure_password method which supports secure password hashing, confirmation, recovery mechanisms."},{"id":652,"title":"Segurança em Aplicações Rails","heading":"6 User Management","subheading":"6.1 Brute-Forcing Accounts","content":"list usernames your application misused brute-force corresponding passwords, because most people don't sophisticated passwords. most passwords combination dictionary words possibly numbers. armed with list usernames dictionary, automatic program find correct password matter minutes. because this, most applications will display generic error message \"username password correct\", these correct. said \"the username entered been found\", attacker could automatically compile list usernames. however, what most application designers neglect, forgot-password pages. these pages often admit that entered username e-mail address (not) been found. this allows attacker compile list usernames brute-force accounts. order mitigate such attacks, display generic error message forgot-password pages, too. moreover, require enter captcha after number failed logins from certain address. note, however, that this bullet-proof solution against automatic programs, because these programs change their address exactly often. however, raises barrier attack."},{"id":653,"title":"Segurança em Aplicações Rails","heading":"6 User Management","subheading":"6.2 Account Hijacking","content":"many applications make easy hijack user accounts. different make more difficult?. think situation where attacker stolen user's session cookie thus co-use application. easy change password, attacker will hijack account with clicks. change-password form vulnerable csrf, attacker will able change victim's password luring them page where there crafted img-tag which does csrf. countermeasure, make change-password forms safe against csrf, course. require user enter password when changing however, attacker also take over account changing e-mail address. after they change they will forgotten-password page (possibly new) password will mailed attacker's e-mail address. countermeasure require user enter password when changing e-mail address, too. depending your application, there more ways hijack user's account. many cases csrf will help example, csrf vulnerability google mail. this proof-of-concept attack, victim would have been lured website controlled attacker. that site crafted img-tag which results http request that changes filter settings google mail. victim logged google mail, attacker would change filters forward e-mails their e-mail address. this nearly harmful hijacking entire account. countermeasure, review your application logic eliminate csrf vulnerabilities."},{"id":654,"title":"Segurança em Aplicações Rails","heading":"6 User Management","subheading":"6.3 CAPTCHAs","content":"popular positive captcha recaptcha which displays distorted images words from books. also adds angled line, rather than distorted background high levels warping text earlier captchas did, because latter were broken. bonus, using recaptcha helps digitize books. recaptcha also rails plug-in with same name api. will keys from api, public private key, which have into your rails environment. after that recaptcha_tags method view, verify_recaptcha method controller. verify_recaptcha will return false validation fails. problem with captchas that they have negative impact user experience. additionally, some visually impaired users have found certain kinds distorted captchas difficult read. still, positive captchas best methods prevent kinds bots from submitting forms. most bots really naive. they crawl their spam into every form's field they find. negative captchas take advantage that include \"honeypot\" field form which will hidden from human user javascript. note that negative captchas only effective against naive bots won't suffice protect critical applications from targeted bots. still, negative positive captchas combined increase performance, e.g., \"honeypot\" field empty (bot detected), won't need verify positive captcha, which would require https request google recaptcha before computing response. here some ideas hide honeypot fields javascript and/or css: most simple negative captcha hidden honeypot field. server side, will check value field: contains text, must bot. then, either ignore post return positive result, saving post database. this will satisfied moves find more sophisticated negative captchas batchelder's blog post: note that this protects only from automatic bots, targeted tailor-made bots cannot stopped this. negative captchas might good protect login forms."},{"id":655,"title":"Segurança em Aplicações Rails","heading":"6 User Management","subheading":"6.4 Logging","content":"default, rails logs requests being made application. files huge security issue, they contain login credentials, credit card numbers cetera. when designing application security concept, should also think about what will happen attacker (full) access server. encrypting secrets passwords database will quite useless, files list them clear text. filter certain request parameters from your files appending them config.filter_parameters application configuration. these parameters will marked [filtered] log."},{"id":656,"title":"Segurança em Aplicações Rails","heading":"6 User Management","subheading":"6.5 Regular Expressions","content":"ruby uses slightly different approach than many other languages match beginning string. that even many ruby rails books this wrong. this security threat? wanted loosely validate field used simple regular expression like this: this work fine some languages. however, ruby match line beginning line end. thus like this passes filter without problems: this passes filter because regular expression matches second line, rest does matter. imagine view that showed like this: link looks innocent visitors, when it's clicked, will execute javascript function \"exploit_code\" other javascript attacker provides. regular expression, should used instead like since this frequent mistake, format validator (validates_format_of) raises exception provided regular expression starts with ends with need instead (which rare), :multiline option true, like note that this only protects against most common mistake when using format validator always need keep mind that match line beginning line ruby, beginning string."},{"id":657,"title":"Segurança em Aplicações Rails","heading":"6 User Management","subheading":"6.6 Privilege Escalation","content":"most common parameter that user might tamper with, parameter, http://www.domain.com/project/1, whereas will available params controller. there, will most likely something like this: this alright some applications, certainly user authorized view projects. user changes they allowed that information, they will have access anyway. instead, query user's access rights, too: depending your application, there will many more parameters user tamper with. rule thumb, user input data secure, until proven otherwise, every parameter from user potentially manipulated. don't fooled security obfuscation javascript security. developer tools review change every form's hidden fields. javascript used validate user input data, certainly prevent attackers from sending malicious requests with unexpected values. firebug addon mozilla firefox logs every request repeat change them. that easy bypass javascript validations. there even client-side proxies that allow intercept request response from internet. injection very tricky, because same code parameter malicious context, totally harmless another. context scripting, query, programming language, shell, ruby/rails method. following sections will cover important contexts where injection attacks happen. first section, however, covers architectural decision connection with injection."},{"id":658,"title":"Segurança em Aplicações Rails","heading":"7 Injection","subheading":"7.1 Permitted lists versus Restricted lists","content":"restricted list list e-mail addresses, non-public actions html tags. this opposed permitted list which lists good e-mail addresses, public actions, good html tags, although sometimes possible create permitted list spam filter, example), prefer permitted list approaches: permitted lists also good approach against human factor forgetting something restricted list."},{"id":659,"title":"Segurança em Aplicações Rails","heading":"7 Injection","subheading":"7.2 SQL Injection","content":"injection attacks influencing database queries manipulating application parameters. popular goal injection attacks bypass authorization. another goal carry data manipulation reading arbitrary data. here example user input data query: this could search action user enter project's name that they want find. malicious user enters resulting query will dashes start comment ignoring everything after query returns records from projects table including those blind user. this because condition true records. usually application includes access control. user enters their login credentials application tries find matching record users table. application grants access when finds record. however, attacker possibly bypass this check with injection. following shows typical database query rails find first record users table which matches login credentials parameters supplied user. attacker enters '1'='1 name, '2'>'1 password, resulting query will this will simply find first record database, grants access this user. union statement connects queries returns data set. attacker read arbitrary data from database. let's take example from above: let's inject another query using union statement: this will result following query: result won't list projects (because there project with empty name), list usernames their password. hopefully securely hashed passwords database! only problem attacker that number columns same both queries. that's second query includes list ones (1), which will always value order match number columns first query. also, second query renames some columns with statement that application displays values from user table. sure update your rails least 2.1.1. ruby rails built-in filter special characters, which will escape null character, line breaks. using model.find(id) model.find_by_some thing(something) automatically applies this countermeasure. fragments, especially conditions fragments (where(\"...\")), connection.execute() model.find_by_sql() methods, applied manually. instead passing string, positional handlers sanitize tainted strings like this: first parameter fragment with question marks. second third parameter will replace question marks with value variables. also named handlers, values will taken from hash used: additionally, split chain conditionals valid your case: note previous mentioned countermeasures only available model instances. sanitize_sql() elsewhere. make habit think about security consequences when using external string sql."},{"id":660,"title":"Segurança em Aplicações Rails","heading":"7 Injection","subheading":"7.3 Cross-Site Scripting (XSS)","content":"entry point vulnerable parameters where attacker start attack. most common entry points message posts, user comments, guest books, project titles, document names, search result pages have also been vulnerable just about everywhere where user input data. input does necessarily have come from input boxes websites, parameter obvious, hidden internal. remember that user intercept traffic. applications client-site proxies make easy change requests. there also other attack vectors like banner advertisements. attacks work like this: attacker injects some code, application saves displays page, later presented victim. most examples simply display alert box, more powerful than that. steal cookie, hijack session, redirect victim fake website, display advertisements benefit attacker, change elements website confidential information install malicious software through security holes browser. during second half 2007, there were vulnerabilities reported mozilla browsers, safari, opera. symantec global internet security threat report also documented browser plug-in vulnerabilities last months mpack very active up-to-date attack framework which exploits these vulnerabilities. criminal hackers, very attractive exploit sql-injection vulnerability application framework insert malicious code every textual table column. april more than 510,000 sites were hacked like this, among them british government, united nations, many more high profile targets. most common language course most popular client-side scripting language javascript, often combination with html. escaping user input essential. here most straightforward test check xss: this javascript code will simply display alert box. next examples exactly same, only very uncommon places: these examples don't harm far, let's attacker steal user's cookie (and thus hijack user's session). javascript document.cookie property read write document's cookie. javascript enforces same origin policy, that means script from domain cannot access cookies another domain. document.cookie property holds cookie originating server. however, read write this property, embed code directly html document happens with xss). inject this anywhere your application your cookie result page: attacker, course, this useful, victim will their cookie. next example will load image from http://www.attacker.com/ plus cookie. course this does exist, browser displays nothing. attacker review their server's access files victim's cookie. files www.attacker.com will read like this: mitigate these attacks obvious way) adding httponly flag cookies, that document.cookie read javascript. http only cookies used from v6.sp1, firefox v2.0.0.5, opera 9.5, safari chrome 1.0.154 onwards. other, older browsers (such webtv mac) actually cause page fail load. warned that cookies will still visible using ajax, though. with page defacement attacker things, example, present false information lure victim attackers website steal cookie, login credentials, other sensitive data. most popular include code from external sources iframes: this loads arbitrary html and/or javascript from external source embeds part site. this iframe taken from actual attack legitimate italian sites using mpack attack framework. mpack tries install malicious software through security holes browser very successfully, attacks succeed. more specialized attack could overlap entire website display login form, which looks same site's original, transmits username password attacker's site. could and/or javascript hide legitimate link application, display another place which redirects fake website. reflected injection attacks those where payload stored present victim later included url. especially search forms fail escape search string. following link presented page which stated that \"george bush appointed year chairperson...\": very important filter malicious input, also important escape output application. especially xss, important permitted input filtering instead restricted. permitted list filtering states values allowed opposed values allowed. restricted lists never complete. imagine restricted list deletes \"script\" from user input. attacker injects \"<scrscriptipt>\", after filter, \"<script>\" remains. earlier versions rails used restricted list approach strip_tags(), strip_links() sanitize() method. this kind injection possible: this returned \"some<script>alert('hello')</script>\", which makes attack work. that's permitted list approach better, using updated rails method sanitize(): this allows only given tags does good job, even against kinds tricks malformed tags. second step, good practice escape output application, especially when re-displaying user input, which hasn't been input-filtered search form example earlier on). escapehtml() alias h()) method replace html input characters their uninterpreted representations html (&amp;, &quot;, &lt;, &gt;). network traffic mostly based limited western alphabet, character encodings, such unicode, emerged, transmit characters other languages. but, this also threat applications, malicious code hidden different encodings that browser might able process, application might not. here attack vector utf-8 encoding: this example pops message box. will recognized above sanitize() filter, though. great tool obfuscate encode strings, thus \"get know your enemy\", hackvertor. rails' sanitize() method does good fend encoding attacks. order understand today's attacks applications, it's best take look some real-world attack vectors. following excerpt from js.yamanner@m yahoo! mail worm. appeared june first webmail interface worm: worms exploit hole yahoo's html/javascript filter, which usually filters targets onload attributes from tags (because there javascript). filter applied only once, however, onload attribute with worm code stays place. this good example restricted list filters never complete hard allow html/javascript application. another proof-of-concept webmail worm nduja, cross-domain worm four italian webmail services. find more details rosario valotta's paper. both webmail worms have goal harvest email addresses, something criminal hacker could make money with. december 2006, 34,000 actual usernames passwords were stolen myspace phishing attack. idea attack create profile page named \"login_home_index_html\", looked very convincing. specially-crafted html used hide genuine myspace content from page instead display login form."},{"id":661,"title":"Segurança em Aplicações Rails","heading":"7 Injection","subheading":"7.4 CSS Injection","content":"injection explained best well-known myspace samy worm. this worm automatically sent friend request samy (the attacker) simply visiting profile. within several hours over million friend requests, which created much traffic that myspace went offline. following technical explanation that worm. myspace blocked many tags, allowed css. worm's author javascript into like this: payload style attribute. there quotes allowed payload, because single double quotes have already been used. javascript handy eval() function which executes string code. eval() function nightmare restricted list input filters, allows style attribute hide word \"innerhtml\": next problem myspace filtering word \"javascript\", author used \"java<newline>script\" around this: another problem worm's author csrf security tokens. without them couldn't send friend request over post. around sending page right before adding user parsing result csrf token. end, worm, which injected into profile page. moz-binding property proved another introduce javascript gecko-based browsers (firefox, example). this example, again, showed that restricted list filter never complete. however, custom applications quite rare feature, hard find good permitted filter. want allow custom colors images, allow user choose them build application. rails' sanitize() method model permitted filter, really need one."},{"id":662,"title":"Segurança em Aplicações Rails","heading":"7 Injection","subheading":"7.5 Textile Injection","content":"want provide text formatting other than html (due security), mark-up language which converted html server-side. redcloth such language ruby, without precautions, also vulnerable xss. example, redcloth translates _test_ <em>test<em>, which makes text italic. however, current version 3.0.4, still vulnerable xss. all-new version that removed serious bugs. however, even that version some security bugs, countermeasures still apply. here example version 3.0.4: :filter_html option remove html which created textile processor. however, this does filter html, tags will left design), example <a>: recommended redcloth combination with permitted input filter, described countermeasures against section."},{"id":663,"title":"Segurança em Aplicações Rails","heading":"7 Injection","subheading":"7.6 Ajax Injection","content":"in_place_editor plugin, actions that return string, rather than rendering view, have escape return value action. otherwise, return value contains string, malicious code will executed upon return browser. escape input value using method."},{"id":664,"title":"Segurança em Aplicações Rails","heading":"7 Injection","subheading":"7.7 Command Line Injection","content":"your application execute commands underlying operating system, there several methods ruby: system(command), exec(command), spawn(command) `command`. will have especially careful with these functions user enter whole command, part this because most shells, execute another command first one, concatenating them with semicolon vertical (|). countermeasure system(command, parameters) method which passes command line parameters safely. kernel#open executes command argument starts with vertical (|). countermeasures file.open, io.open uri#open instead. they don't execute command."},{"id":665,"title":"Segurança em Aplicações Rails","heading":"7 Injection","subheading":"7.8 Header Injection","content":"http request headers have referer, user-agent (client software), cookie field, among others. response headers example have status code, cookie, location (redirection target url) field. them user-supplied manipulated with more less effort. remember escape these header fields, too. example when display user agent administration area. besides that, important know what doing when building response headers partly based user input. example want redirect user back specific page. that introduced \"referer\" field form redirect given address: what happens that rails puts string into location header field sends (redirect) status browser. first thing malicious user would this: (ruby and) rails version 2.1.2 (excluding it), hacker inject arbitrary header fields; example like this: note that %0d%0a url-encoded \\r\\n which carriage-return line-feed (crlf) ruby. resulting http header second example will following because second location header field overwrites first. attack vectors header injection based injection crlf characters header field. what could attacker with false redirection? they could redirect phishing site that looks same yours, login again (and sends login credentials attacker). they could install malicious software through browser security holes that site. rails 2.1.2 escapes these characters location field redirect_to method. make sure yourself when build other header fields with user input. header injection possible, response splitting might too. http, header block followed crlfs actual data (usually html). idea response splitting inject crlfs into header field, followed another response with malicious html. response will under certain circumstances this would present malicious html victim. however, this only seems work with keep-alive connections (and many browsers using one-time connections). can't rely this. case this serious bug, should update your rails version 2.0.5 2.1.2 eliminate header injection (and thus response splitting) risks. active record interprets parameters combination with that rack parses query parameters possible issue unexpected database queries with null where clauses. response that security issue (cve-2012-2660, cve-2012-2694 cve-2013-0155) deep_munge method introduced solution keep rails secure default. example vulnerable code that could used attacker, deep_munge wasn't performed when params[:token] [nil], [nil, nil, ...] ['foo', nil] will bypass test nil, null ('foo', null) where clauses still will added query. keep rails secure default, deep_munge replaces some values with nil. below table shows what parameters look like based json sent request: possible return behavior disable deep_munge configuring your application aware risk know handle every http response from your rails application receives following default security headers. configure default headers config/application.rb. remove them. here list common headers:"},{"id":666,"title":"Segurança em Aplicações Rails","heading":"9 Default Headers","subheading":"9.1 Content Security Policy","content":"rails provides that allows configure content security policy your application. configure global default policy then override per-resource basis even lambdas inject per-request values into header such account subdomains multi-tenant application. example global policy: example controller overrides: content_security_policy_report_only configuration attribute content-security-policy-report-only order report only content violations migrating legacy content enable automatic nonce generation: then automatic nonce value passing nonce: true part html_options. example: same works with javascript_include_tag: csp_meta_tag helper create meta \"csp-nonce\" with per-session nonce value allowing inline <script> tags. this used rails helper create dynamically loaded inline <script> elements. beyond scope this guide inform secure your application code environments. however, please secure your database configuration, e.g. config/database.yml, master credentials.yml, other unencrypted secrets. want further restrict access, using environment-specific versions these files others that contain sensitive information."},{"id":667,"title":"Segurança em Aplicações Rails","heading":"10 Environmental Security","subheading":"10.1 Custom Credentials","content":"rails stores secrets config/credentials.yml.enc, which encrypted hence cannot edited directly. rails uses config/master.key alternatively looks environment variable env[\"rails_master_key\"] encrypt credentials file. because credentials file encrypted, stored version control, long master kept safe. default, credentials file contains application's secret_key_base. also used store other secrets such access keys external apis. edit credentials file, bin/rails credentials:edit. this command will create credentials file does exist. additionally, this command will create config/master.key master defined. secrets kept credentials file accessible rails.application.credentials. example, with following decrypted config/credentials.yml.enc: rails.application.credentials.some_api_key returns \"somekey\". rails.application.credentials.system.access_key_id returns \"1234ab\". want exception raised when some blank, bang version: don’t bump dependencies just encourage versions, including security issues. this because application owners need manually update their gems regardless efforts. bundle update --conservative gem_name safely update vulnerable dependencies. security landscape shifts important keep date, because missing vulnerability catastrophic. find additional resources about (rails) security here: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":668,"title":"Webpacker","heading":"1 What Is Webpacker?","subheading":"1 What Is Webpacker?","content":"webpacker rails wrapper around webpack build system that provides standard webpack configuration reasonable defaults."},{"id":669,"title":"Webpacker","heading":"1 What Is Webpacker?","subheading":"1.1 What is webpack?","content":"goal webpack, front-end build system, allow write your front-end code that convenient developers then package that code that convenient browsers. with webpack, manage javascript, css, static assets like images fonts. webpack will allow write your code, reference other code your application, transform your code, combine your code into easily downloadable packs. webpack documentation information."},{"id":670,"title":"Webpacker","heading":"1 What Is Webpacker?","subheading":"1.2 How is Webpacker Different from Sprockets?","content":"rails also ships with sprockets, asset-packaging tool whose features overlap with webpacker. both tools will compile your javascript into browser-friendly files also minify fingerprint them production. development environment, sprockets webpacker allow incrementally change files. sprockets, which designed used with rails, somewhat simpler integrate. particular, code added sprockets ruby gem. however, webpack better integrating with more current javascript tools packages allows wider range integration. rails apps configured webpack javascript sprockets css, although webpack. should choose webpacker over sprockets project want packages and/or want access most current javascript features tools. should choose sprockets over webpacker legacy applications where migration might costly, want integrate using gems, have very small amount code package. familiar with sprockets, following guide might give some idea translate. please note that each tool slightly different structure, concepts don't directly onto each other. webpacker, must install yarn package manager, version must have node.js installed, version 10.13.0 include webpacker project, --webpack rails command. webpacker existing project, webpacker project's gemfile, bundle install, then bin/rails webpacker:install. installing webpacker creates following local files: installation also calls yarn package manager, creates package.json file with basic packages listed, uses yarn install these dependencies."},{"id":671,"title":"Webpacker","heading":"3 Usage","subheading":"3.1 Using Webpacker for JavaScript","content":"with webpacker installed, javascript file app/javascript/packs directory will compiled pack file default. have file called app/javascript/packs/application.js, webpacker will create pack called application, your rails application with code javascript_pack_tag \"application\" with that place, development, rails will recompile application.js file every time changes, load page that uses that pack. typically, file actual packs directory will manifest that mostly loads other files, also have arbitrary javascript code. default pack created webpacker will link rails' default javascript packages they have been included project: you'll need include pack that requires these packages them your rails application. important note that only webpack entry files should placed app/javascript/packs directory; webpack will create separate dependency graph each entry point, large number packs will increase compilation overhead. rest your asset source code should live outside this directory though webpacker does place restrictions make suggestions structure your source code. here example: typically, pack file itself largely manifest that uses import require load necessary files also some initialization. want change these directories, adjust source_path (default app/javascript) source_entry_path (default packs) config/webpacker.yml file. within source files, import statements resolved relative file doing import, import from \"./foo\" finds foo.js file same directory current file, while import from \"../src/foo\" finds file sibling directory named src."},{"id":672,"title":"Webpacker","heading":"3 Usage","subheading":"3.2 Using Webpacker for CSS","content":"box, webpacker supports scss using postcss processor. include code your packs, first include your files your top-level pack file though javascript file. your top-level manifest app/javascript/styles/styles.scss, import with import styles/styles. this tells webpack include your file download. actually load page, include stylesheet_pack_tag \"application\" view, where application same pack name that were using. using framework, webpacker following instructions load framework module using yarn, typically yarn <framework>. framework should have instructions importing into scss file."},{"id":673,"title":"Webpacker","heading":"3 Usage","subheading":"3.3 Using Webpacker for Static Assets","content":"default webpacker configuration should work static assets. configuration includes several image font file format extensions, allowing webpack include them generated manifest.json file. with webpack, static assets imported directly javascript files. imported value represents asset. example: need reference webpacker static assets from rails view, assets need explicitly required from webpacker-bundled javascript files. unlike sprockets, webpacker does import your static assets default. default app/javascript/packs/application.js file template importing files from given directory, which uncomment every directory want have static files directories relative app/javascript. template uses directory images, anything app/javascript: static assets will output into directory under public/packs/media. example, image located imported app/javascript/images/my-image.jpg will output public/packs/media/images/my-image-abcd1234.jpg. render image this image rails view, image_pack_tag 'media/images/my-image.jpg. webpacker actionview helpers static assets correspond asset pipeline helpers according following table: also, generic helper asset_pack_path takes local location file returns webpacker location rails views. also access image directly referencing file from file app/javascript."},{"id":674,"title":"Webpacker","heading":"3 Usage","subheading":"3.4 Webpacker in Rails Engines","content":"webpacker version webpacker \"engine-aware,\" which means webpacker does have feature-parity with sprockets when comes using within rails engines. authors rails engines wish support consumers using webpacker encouraged distribute frontend assets package addition itself provide instructions installer) demonstrate host apps should integrate. good example this approach alchemy cms."},{"id":675,"title":"Webpacker","heading":"3 Usage","subheading":"3.5 Hot Module Replacement (HMR)","content":"webpacker out-of-the-box supports with webpack-dev-server, toggle setting dev_server/hmr option inside webpacker.yml. check webpack's documentation devserver more information. support with react, would need react-hot-loader. check react loader's getting started guide. don't forget disable running webpack-dev-server; otherwise, will \"not found error\" stylesheets. webpacker three environments default development, test, production. additional environment configurations webpacker.yml file different defaults each environment. webpacker will also load file config/webpack/<environment>.js additional environment setup. webpacker ships with binstub files development: ./bin/webpack ./bin/webpack-dev-server. both thin wrappers around standard webpack.js webpack-dev-server.js executables ensure that right configuration files environmental variables loaded based your environment. default, webpacker compiles automatically demand development when rails page loads. this means that don't have separate processes, compilation errors will logged standard rails log. change this changing compile: false config/webpacker.yml file. running bin/webpack will force compilation your packs. want live code reloading have enough javascript that on-demand compilation slow, you'll need ./bin/webpack-dev-server ruby ./bin/webpack-dev-server. this process will watch changes app/javascript/packs/*.js files automatically recompile reload browser match. windows users will need these commands terminal separate from bundle exec rails server. once start this development server, webpacker will automatically start proxying webpack asset requests this server. when stop server, it'll revert on-demand compilation. webpacker documentation gives information environment variables control webpack-dev-server. additional notes rails/webpacker docs webpack-dev-server usage."},{"id":676,"title":"Webpacker","heading":"5 Running Webpacker in Development","subheading":"5.1 Deploying Webpacker","content":"webpacker adds webpacker:compile task assets:precompile rake task, existing deploy pipeline that using assets:precompile should work. compile task will compile packs place them public/packs. more information advanced topics, such using webpacker with popular frameworks, consult webpacker documentation. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":677,"title":"Contribuindo para o Ruby on Rails","heading":"1 Relatando uma Issue","subheading":"1 Relatando uma Issue","content":"ruby rails utiliza github issue tracking rastrear problemas (principalmente bugs contribuições novo código). você encontrou ruby rails, este lugar onde começar. você precisará criar conta (gratuita) github enviar issue, fazer comentários issues, criar pull requests."},{"id":678,"title":"Contribuindo para o Ruby on Rails","heading":"1 Relatando uma Issue","subheading":"1.1 Criando um aviso de Bug","content":"você encontrou problema ruby rails risco segurança, faça pesquisa github issues, caso tenha sido relatado. você conseguir encontrar nenhuma issue aberta github resolva problema encontrou, próximo passo será abrir nova issue. (consulte próxima seção relatar problemas segurança.) relatório issue deve conter, mínimo, título descrição clara problema. você deve incluir máximo possível informações relevantes postar exemplo código demonstre problema. seria ainda melhor você pudesse incluir teste unidade falhando mostra como comportamento esperado está ocorrendo. objetivo deve tornar mais fácil você outros reproduzir descobrir correção. então, tenha muitas esperanças! menos você tenha tipo \"código vermelho, estado crítico, mundo está chegando fim\", espere relatório issue veja automaticamente qualquer atividade outras pessoas corram corrigí-lo. você está criando issue pessoas mesmo problema possam confirmar colaborar corrigir problema."},{"id":679,"title":"Contribuindo para o Ruby on Rails","heading":"1 Relatando uma Issue","subheading":"1.2 Crie um Caso de Teste Executável","content":"maneira reproduzir problema será útil outras pessoas ajudem confirmar, investigar fim, corrigir problema. você pode fazer isso fornecendo caso teste executável. facilitar esse processo, preparamos vários modelos relatório você utilizar como ponto partida: esses templates incluem código padrão (boilerplate) configurar caso teste tanto versão estável rails (*_gem.rb) quanto edge rails (*_main.rb). copie conteúdo template apropriado arquivo faça alterações necessárias demonstrar problema. você pode executá-lo rodando ruby nome_do_arquivo.rb terminal. tudo correr bem, você verá caso teste falhou. você pode então compartilhar caso teste executável como gist, colar conteúdo descrição issue."},{"id":680,"title":"Contribuindo para o Ruby on Rails","heading":"1 Relatando uma Issue","subheading":"1.3 Tratamento Especial para Questões de Segurança","content":""},{"id":681,"title":"Contribuindo para o Ruby on Rails","heading":"1 Relatando uma Issue","subheading":"1.4 E quanto às Solicitações de Funcionalidade (Feature Requests)?","content":"favor, coloque itens feature request issues github. houver nova feature você deseja adicionada ruby rails, você precisará escrever código conta própria convencer alguém fazer parceria você escrever código. posteriormente neste guia, você encontrará instruções detalhadas propor patch ruby rails. você inserir item você deseja issues github código, pode esperar será marcado como \"inválido\" assim revisado. vezes, difícil traçar linha entre 'bug' 'feature'. normalmente, feature qualquer coisa adiciona novo comportamento, enquanto qualquer coisa causa comportamento incorreto. vezes, equipe principal terá fazer julgamento. dito isso, distinção geralmente determina qual versão patch entrará; amamos submissões features! elas simplesmente serão transportadas branches manutenção. você deseja obter feedback sobre ideia feature antes começá-la fazer patch, envie email lista discussão rails-core. você pode receber resposta, significa todos indiferentes. você pode encontrar alguém também esteja interessado criar essa feature. você pode receber \"isso será aceito\". lugar certo discutir novas ideias. issues github local particularmente discussões vezes longas complicadas novas features exigem. próxima etapa além relatar issues, você pode ajudar equipe principal resolver existentes fornecendo feedback sobre elas. você novo desenvolvimento núcleo rails, essa pode ótima maneira primeiros passos, você familiarizar base código processos. você verificar lista issues issues github, você encontrará muitas issues requerem atenção. você pode fazer ajudar? bastante coisa, verdade:"},{"id":682,"title":"Contribuindo para o Ruby on Rails","heading":"2 Ajudando a Resolver Issues Existentes","subheading":"2.1 Verificar Bug Reports","content":"começar, ajuda apenas verificar relatórios bugs. você pode reproduzir issue relatada computador? nesse caso, você pode adicionar comentário issue dizendo está vendo mesma coisa. issue muito vaga, você pode ajudar restringí-la algo mais específico? talvez você possa fornecer informações adicionais reproduzir eliminando etapas desnecessárias demonstrar problema. você encontrar relatório teste, muito útil contribuir teste falha. essa também ótima forma explorar código-fonte: examinar arquivos testes ensinar escrever mais testes. novos testes melhor contribuídos forma patch, como explicado mais tarde seção \"contribuindo código rails\" qualquer coisa você possa fazer tornar relatórios bugs mais sucintos mais fáceis reproduzir ajuda pessoas tentarem escrever código corrigir esses bugs independentemente você mesmo acabar escrevendo código não."},{"id":683,"title":"Contribuindo para o Ruby on Rails","heading":"2 Ajudando a Resolver Issues Existentes","subheading":"2.2 Testar Patches","content":"você também pode ajudar examinando pull requests foram enviados ruby rails github. aplicar alterações alguém, primeiro criar branch dedicada: então, você pode usar branch remota pessoa pull request atualizar base código. exemplo, digamos usuário johnsmith tenha feito fork enviado branch \"orange\" localizada https://github.com/johnsmith/rails. depois aplicar branch, teste-a! aqui estão algumas coisa atentar: você estiver satisfeito fato pull request possui alteração, comente issue github indicando aprovação. comentário deve indicar você gostou mudança você gostou nela. algo como: comentário apenas \"+1\", provável outros revisores levem muito sério. mostre você dedicou tempo revisar pull request. ruby rails possui dois conjuntos principais documentação: guias, ajudam aprender sobre ruby rails, api, serve como referência. você pode ajudar melhorar guias rails referência tornando-os mais coerentes, consistentes legíveis, adicionando informações ausentes, corrigindo erros factuais, corrigindo erros digitação atualizando-os rails mais recentes. isso, faça alterações arquivos-fonte guias rails (localizados aqui github) comentários rdoc código fonte. então abra pull request aplicar suas mudanças branch principal (main). trabalhar documentação, leve consideração diretrizes documentação diretrizes guias ruby rails. happy have people volunteer translate rails guides. just follow these steps: note that translations submitted rails repository; your work lives your fork, described above. this because, practice, documentation maintenance patches only sustainable english. generate guides html format, will need install guides dependencies, into guides directory, then (e.g., it-it): this will generate guides output directory. translation efforts know about (various versions):"},{"id":684,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.1 Setting Up a Development Environment","content":"move from submitting bugs helping resolve existing issues contributing your code ruby rails, must able test suite. this section guide, you'll learn tests your computer. start github codespace from repository start developing right away from browser your local vscode. codespace initialized with required dependencies allows tests. easiest recommended development environment ready hack rails-dev-box. case can't rails development box, this other guide."},{"id":685,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.2 Clone the Rails Repository","content":"able contribute code, need clone rails repository: create dedicated branch: doesn't matter much what name because this branch will only exist your local computer your personal repository github. won't part rails repository."},{"id":686,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.3 Bundle install","content":"install required gems."},{"id":687,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.4 Running an Application Against Your Local Branch","content":"case need dummy rails test changes, --dev flag rails generates application that uses your local branch: application generated ~/my-test-app runs against your local branch and, particular, sees modifications upon server reboot. javascript packages, yarn link source your local branch generated application:"},{"id":688,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.5 Write Your Code","content":"busy add/edit code. you're your branch now, write whatever want (make sure you're right branch with branch -a). you're planning submit your change back inclusion rails, keep things mind: rails follows simple coding style conventions: above guidelines please your best judgment using them. additionally, have rubocop rules defined codify some coding conventions. rubocop locally against file that have modified before submitting pull request: rails-ujs coffeescript javascript files, lint actionview folder. running misspell which mainly written golang check spelling with github actions. correct commonly misspelled english words quickly with misspell. misspell different from most other spell checkers because doesn't custom dictionary. misspell locally against files with: notable misspell help options flags are: also codespell with github actions check spelling codespell runs against small custom dictionary. codespell written python with:"},{"id":689,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.6 Benchmark Your Code","content":"changes that might have impact performance, please benchmark your code measure impact. please share benchmark script used well results. should consider including this information your commit message, allow future contributors easily verify your findings determine they still relevant. (for example, future optimizations ruby might render certain optimizations unnecessary.) when optimizing specific scenario that care about, easy regress performance other common cases. therefore, should test your change against list representative scenarios, ideally extracted from real-world production applications. benchmark template starting point. includes boilerplate code benchmark using benchmark-ips gem. template designed testing relatively self-contained changes that inlined into script."},{"id":690,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.7 Running Tests","content":"customary rails full test suite before pushing changes. railties test suite, particular, takes long time, will take especially long time source code mounted /vagrant happens recommended workflow with rails-dev-box. compromise, test what your code obviously affects, change railties, whole test suite affected component. tests passing, that's enough propose your contribution. have buildkite safety catching unexpected breakages elsewhere. tests, tests only particular component (e.g., action pack). example, action mailer tests: tests only specific directory particular component (e.g., models active storage). example, tests /activestorage/test/models: tests particular file: single test name using option: test execution randomized with randomization seed. experiencing random test failures, more accurately reproduce failing test scenario specifically setting randomization seed. running tests component: running single test file: action pack action view unit tests parallel default. experiencing random test failures, randomization seed these unit tests serial setting parallel_workers=1 first, create databases you'll need. find list required table names, usernames, passwords activerecord/test/config.example.yml. mysql postgresql, sufficient run:  this necessary sqlite3. this active record test suite only sqlite3: tests sqlite3. tasks respectively: finally, will three them turn. also single test separately: single test against adapters, use: invoke test_jdbcmysql, test_jdbcsqlite3 test_jdbcpostgresql also. file activerecord/running_unit_tests.rdoc information running more targeted database tests."},{"id":691,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.8 Warnings","content":"test suite runs with warnings enabled. ideally, ruby rails should issue warnings, there few, well some from third-party libraries. please ignore fix!) them, any, submit patches that issue warnings."},{"id":692,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.9 Updating the Documentation","content":"ruby rails guides provide high-level overview rails' features, while documentation delves into specifics. your adds feature, changes existing feature behaves, check relevant documentation, update necessary. example, modify active storage's image analyzer metadata field, should update analyzing files section active storage guide reflect that."},{"id":693,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.10 Updating the CHANGELOG","content":"changelog important part every release. keeps list changes every rails version. should entry changelog framework modified you're adding removing feature, committing fix, adding deprecation notices. refactorings documentation changes generally should changelog. changelog entry should summarize what changed should with author's name. multiple lines need more space, attach code examples indented with spaces. change related specific issue, should attach issue's number. here example changelog entry: your name added directly after last word there code examples multiple paragraphs. otherwise, it's best make paragraph."},{"id":694,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.11 Ignoring Files Created by Your Editor / IDE","content":"some editors ides will create hidden files folders inside rails folder. instead manually excluding those from each commit adding them rails' .gitignore, should them your global gitignore file."},{"id":695,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.12 Updating the Gemfile.lock","content":"some changes require dependency upgrades. these cases, make sure bundle update correct version dependency commit gemfile.lock file within your changes."},{"id":696,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.13 Commit Your Changes","content":"when you're happy with code your computer, need commit changes git: this should fire your editor write commit message. when have finished, save, close continue. well-formatted descriptive commit message very helpful others understanding change made, please take time write good commit message looks like this:"},{"id":697,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.14 Update Your Branch","content":"it's pretty likely that other changes main have happened while were working. them: reapply your patch latest changes: conflicts? tests still pass? change still seems reasonable you? then move"},{"id":698,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.15 Fork","content":"navigate rails github repository press \"fork\" upper right-hand corner. remote your local repository your local machine: have cloned your local repository from rails/rails, have cloned from your forked repository. following commands assume that have made \"rails\" remote that points rails/rails. download commits branches from official repository: merge content: update your fork:"},{"id":699,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.16 Issue a Pull Request","content":"navigate rails repository just pushed (e.g. https://github.com/your-user-name/rails) click \"pull requests\" (just above code). next page, click \"new pull request\" upper right-hand corner. pull request should target base repository rails/rails branch main. head repository will your work (your-user-name/rails), branch will whatever name gave your branch. click \"create pull request\" when you're ready. ensure changesets introduced included. fill some details about your potential patch, using pull request template provided. when finished, click \"create pull request\". rails core team will notified about your submission."},{"id":700,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.17 Get some Feedback","content":"most pull requests will through iterations before they merged. different contributors will sometimes have different opinions, often patches will need revised before they merged. some contributors rails have email notifications from github turned others not. furthermore, (almost) everyone works rails volunteer, take days your first feedback pull request. don't despair! sometimes it's quick; sometimes it's slow. such open source life. it's been over week, haven't heard anything, might want nudge things along. rubyonrails-core mailing list this. also leave another comment pull request. while you're waiting feedback your pull request, open other pull requests give someone else some! they'll appreciate same that appreciate feedback your patches. note that your pull request marked \"approved\" somebody does have access merge further changes still required before members core committer teams accept prevent confusion, when giving feedback someone else's pull request, please avoid marking \"approved.\""},{"id":701,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.18 Iterate as Necessary","content":"it's entirely possible that feedback will suggest changes. don't discouraged: whole point contributing active open source project into community's knowledge. people encourage tweak your code, then it's worth making tweaks resubmitting. feedback that your code doesn't belong core, might still think about releasing gem. things that \"squash your commits\", which will combine your commits into single commit. prefer pull requests that single commit. this makes easier backport changes stable branches, squashing makes easier revert commits, history easier follow. rails large project, bunch extraneous commits noise. should able refresh pull request github that been updated. sometimes will asked make some changes code have already committed. this include amending existing commits. this case will allow push changes pushed branch local branch match. instead opening pull request, force push your branch github described earlier squashing commits section: this will update branch pull request github with your code. force pushing with --force-with-lease, will more safely update remote than with typical which delete work from remote that don't already have."},{"id":702,"title":"Contribuindo para o Ruby on Rails","heading":"5 Contributing to the Rails Code","subheading":"5.19 Older Versions of Ruby on Rails","content":"want older versions ruby rails, you'll need switch your local tracking branch. here example switch 4-0-stable branch: changes that merged into main intended next major release rails. sometimes, might beneficial propagate your changes back older stable branches inclusion maintenance releases. generally, security fixes fixes good candidates backport, while features patches that change expected behavior will accepted. when doubt, best consult rails team member before backporting your changes avoid wasted effort. simple fixes, easiest backport your changes extract diff from your changes main apply them target branch. first, make sure your changes only difference between your current branch main: then extract diff: switch over target branch apply your changes: this works well simple changes. however, your changes complicated code main deviated significantly from your target branch, might require more work your part. difficulty backport varies greatly from case case, sometimes simply worth effort. once have resolved conflicts made sure tests passing, push your changes open separate pull request your backport. also worth noting that older branches might have different build targets than main. when possible, best first test your backport locally against oldest ruby version permitted target branch's rails.gemspec before submitting your pull request. then... think about your next contribution! todas contribuições recebem crédito contribuintes rails. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":703,"title":"Action Mailbox Basics","heading":"1 What is Action Mailbox?","subheading":"1 What is Action Mailbox?","content":"action mailbox routes incoming emails controller-like mailboxes processing rails. ships with ingresses mailgun, mandrill, postmark, sendgrid. also handle inbound mails directly built-in exim, postfix, qmail ingresses. inbound emails turned into inboundemail records using active record feature lifecycle tracking, storage original email cloud storage active storage, responsible data handling with on-by-default incineration. these inbound emails routed asynchronously using active several dedicated mailboxes, which capable interacting directly with rest your domain model. install migrations needed inboundemail ensure active storage"},{"id":704,"title":"Action Mailbox Basics","heading":"3 Configuration","subheading":"3.1 Exim","content":"tell action mailbox accept emails from smtp relay: generate strong password that action mailbox authenticate requests relay ingress. bin/rails credentials:edit password your application's encrypted credentials under action_mailbox.ingress_password, where action mailbox will automatically find alternatively, provide password rails_inbound_email_password environment variable. configure exim pipe inbound emails bin/rails action_mailbox:ingress:exim, providing relay ingress ingress_password previously generated. your application lived https://example.com, full command would look like this:"},{"id":705,"title":"Action Mailbox Basics","heading":"3 Configuration","subheading":"3.2 Mailgun","content":"give action mailbox your mailgun signing (which find under settings security users security mailgun), authenticate requests mailgun ingress. bin/rails credentials:edit your signing your application's encrypted credentials under action_mailbox.mailgun_signing_key, where action mailbox will automatically find alternatively, provide your signing mailgun_ingress_signing_key environment variable. tell action mailbox accept emails from mailgun: configure mailgun forward inbound emails /rails/action_mailbox/mailgun/inbound_emails/mime. your application lived https://example.com, would specify fully-qualified https://example.com/rails/action_mailbox/mailgun/inbound_emails/mime."},{"id":706,"title":"Action Mailbox Basics","heading":"3 Configuration","subheading":"3.3 Mandrill","content":"give action mailbox your mandrill key, authenticate requests mandrill ingress. bin/rails credentials:edit your your application's encrypted credentials under action_mailbox.mandrill_api_key, where action mailbox will automatically find alternatively, provide your mandrill_ingress_api_key environment variable. tell action mailbox accept emails from mandrill: configure mandrill route inbound emails /rails/action_mailbox/mandrill/inbound_emails. your application lived https://example.com, would specify fully-qualified https://example.com/rails/action_mailbox/mandrill/inbound_emails."},{"id":707,"title":"Action Mailbox Basics","heading":"3 Configuration","subheading":"3.4 Postfix","content":"tell action mailbox accept emails from smtp relay: generate strong password that action mailbox authenticate requests relay ingress. bin/rails credentials:edit password your application's encrypted credentials under action_mailbox.ingress_password, where action mailbox will automatically find alternatively, provide password rails_inbound_email_password environment variable. configure postfix pipe inbound emails bin/rails action_mailbox:ingress:postfix, providing postfix ingress ingress_password previously generated. your application lived https://example.com, full command would look like this:"},{"id":708,"title":"Action Mailbox Basics","heading":"3 Configuration","subheading":"3.5 Postmark","content":"tell action mailbox accept emails from postmark: generate strong password that action mailbox authenticate requests postmark ingress. bin/rails credentials:edit password your application's encrypted credentials under action_mailbox.ingress_password, where action mailbox will automatically find alternatively, provide password rails_inbound_email_password environment variable. configure postmark inbound webhook forward inbound emails /rails/action_mailbox/postmark/inbound_emails with username actionmailbox password previously generated. your application lived https://example.com, would configure postmark with following fully-qualified url:"},{"id":709,"title":"Action Mailbox Basics","heading":"3 Configuration","subheading":"3.6 Qmail","content":"tell action mailbox accept emails from smtp relay: generate strong password that action mailbox authenticate requests relay ingress. bin/rails credentials:edit password your application's encrypted credentials under action_mailbox.ingress_password, where action mailbox will automatically find alternatively, provide password rails_inbound_email_password environment variable. configure qmail pipe inbound emails bin/rails action_mailbox:ingress:qmail, providing relay ingress ingress_password previously generated. your application lived https://example.com, full command would look like this:"},{"id":710,"title":"Action Mailbox Basics","heading":"3 Configuration","subheading":"3.7 SendGrid","content":"tell action mailbox accept emails from sendgrid: generate strong password that action mailbox authenticate requests sendgrid ingress. bin/rails credentials:edit password your application's encrypted credentials under action_mailbox.ingress_password, where action mailbox will automatically find alternatively, provide password rails_inbound_email_password environment variable. configure sendgrid inbound parse forward inbound emails /rails/action_mailbox/sendgrid/inbound_emails with username actionmailbox password previously generated. your application lived https://example.com, would configure sendgrid with following url: configure basic routing: then mailbox: default, inboundemail that been successfully processed will incinerated after days. this ensures you're holding people's data willy-nilly after they have canceled their accounts deleted their content. intention that after you've processed email, should have extracted data needed turned into domain models content your side application. inboundemail simply stays system extra time provide debugging forensics options. actual incineration done incinerationjob that's scheduled after config.action_mailbox.incinerate_after time. this value default 30.days, change your production.rb configuration. (note that this far-future incineration scheduling relies your queue being able hold jobs that long.) it's helpful able test incoming emails development without actually sending receiving real emails. accomplish this, there's conductor controller mounted /rails/conductor/action_mailbox/inbound_emails, which gives index inboundemails system, their state processing, form create inboundemail well. example: please refer actionmailbox::testhelper further test helper methods. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":711,"title":"Action Cable Overview","heading":"1 O que é o Action Cable?","subheading":"1 O que é o Action Cable?","content":"action cable integra-se perfeitamente websockets resto aplicação rails. permite recursos tempo real sejam escritos ruby mesmo estilo forma resto aplicação rails, mesmo tempo possui desempenho escabilidade. isso oferta full-stack fornece framework javascript lado cliente (client-side) framework ruby lado servidor (server-side). você acesso model domínio completo escrito active record escolha. action cable utiliza websockets invés protocolo requisição-resposta http. tanto action cable quanto websockets apresentam terminologia menos familiar:"},{"id":712,"title":"Action Cable Overview","heading":"2 Terminologia","subheading":"2.1 Conexões","content":"conexões formam base relacionamento cliente-servidor. único servidor action cable pode lidar várias instâncias conexão. possui instância conexão cada conexão websocket. único usuário pode vários websockets abertos aplicação utilizar várias abas navegador dispositivos."},{"id":713,"title":"Action Cable Overview","heading":"2 Terminologia","subheading":"2.2 Consumidores","content":"client conexão websocket chamado consumidor. action cable, consumidor criado pelo framework javascript lado cliente."},{"id":714,"title":"Action Cable Overview","heading":"2 Terminologia","subheading":"2.3 Canais","content":"cada consumidor pode, vez, inscrever vários canais. cada canal encapsula unidade lógica trabalho, semelhante controller configuração regular. exemplo, você pode chatchannel appearanceschannel, consumidor pode inscrito ambos canais. consumidor deve inscrever pelo menos, canal."},{"id":715,"title":"Action Cable Overview","heading":"2 Terminologia","subheading":"2.4 Assinantes","content":"quando consumidor está inscrito canal, como assinante. conexão entre assinante canal adivinhe, chamada assinatura. consumidor pode atuar como assinante determinado canal qualquer número vezes. exemplo, consumidor pode inscrever várias salas chat mesmo tempo. lembre-se usuário físico pode vários consumidores, aba/dispositivo aberto conexão)."},{"id":716,"title":"Action Cable Overview","heading":"2 Terminologia","subheading":"2.5 Pub/Sub","content":"pub/sub publish-subscribe, refere-se paradigma fila mensageria qual remetentes informação (publishers) enviam dados classe abstrata destinatários (subscribers) especificar destinatário individual. action cable utiliza essa abordagem manter comunicação entre servidor diversos clientes."},{"id":717,"title":"Action Cable Overview","heading":"2 Terminologia","subheading":"2.6 Broadcastings","content":"transmissão (broadcasting) link pub/sub qualquer coisa transmitida pela emissora enviada diretamente assinantes (subscribers) canal estão transmitindo essa transmissão. cada canal pode transmitir zero mais transmissões."},{"id":718,"title":"Action Cable Overview","heading":"3 Componentes Server-Side","subheading":"3.1 Connections","content":"cada websocket aceito pelo servidor, objeto connection instanciado. esse objeto torna todos channel subscriptions criados dali frente. connection lida nenhuma lógica específica aplicação além autenticação autorização. cliente websocket connection chamado consumer. usuário individual criará consumer-connection cada navegador, janela dispositivo tiver aberto. connections instâncias applicationcable::connection, estendem actioncable::connection::base. applicationcable::connection, você autoriza connection recebida procede estabelecê-la, caso usuário possa identificado. aqui, identified_by designa identificador connection pode usado encontrar connection específica mais tarde. note qualquer coisa marcada como identificador criará automaticamente delegate pelo mesmo nome qualquer instância channel criada partir connection. esse exemplo baseia fato você lidou autenticação usuário algum outro lugar aplicação essa autenticação sucedida definiu cookie criptografado usuário. cookie então enviado automaticamente instância connection quando tentativa criar nova connection, você definir current_user. identificar connection mesmo usuário, você também garante você pode retornar todas connections aberto usuário específico potencialmente desconectá-los, caso usuário seja deletado desautorizado). abordagem autenticação inclui sessão (session), você armazenamento cookies sessão, cookie sessão denominado _session chave usuário user_id você pode usar esta abordagem: padrão, exceções tratadas capturadas registradas logger rails. você gostaria interceptar globalmente essas exceções relatá-las serviço externo rastreamento bugs, exemplo, você pode fazer isso rescue_from:"},{"id":719,"title":"Action Cable Overview","heading":"3 Componentes Server-Side","subheading":"3.2 Channels","content":"channel encapsula unidade lógica trabalho, parecido controller comum. padrão, rails cria classe applicationcable::channel (que estende actioncable::channel::base) encapsular lógica compartilhada entre seus channels. então, você criaria suas próprias classes channel. exemplo, você poderia chatchannel appearancechannel: consumer poderia então inscrito qualquer ambos channels. consumers inscrevem channels, agindo como subscribers. connection deles chamada subscription. mensagens produzidas então roteadas esses channel subscriptions baseados identificador enviado pelo channel consumer. como acontece applicationcable::connection, você também pode usar rescue_from canal específico lidar exceções levantadas:"},{"id":720,"title":"Action Cable Overview","heading":"4 Componentes Client-Side","subheading":"4.1 Conexões","content":"consumidores precisam instância conexão lado. esta conexão pode estabelecida usando seguinte javascript, gerado padrão pelo rails: isto preparar consumidor conectará /cable servidor padrão. conexão estabelecida você também tenha especificado menos inscrição você interesse ter. consumidor pode optar receber argumento especifica conectar. pode string função retorna string chamada quando websocket aberto. consumidor torna assinante criando assinatura canal: enquanto isto cria assinatura, funcionalidade necessária responder dados recebidos será descrita mais tarde. consumidor pode agir como assinante dado canal qualquer número vezes. exemplo, consumidor pode assinar várias salas chat mesmo tempo."},{"id":721,"title":"Action Cable Overview","heading":"5 Interações Cliente-Servidor","subheading":"5.1 Streams","content":"streams fornecem mecanismo onde channels direcionam conteúdo publicado (broadcasts) seus assinantes. exemplo, código seguir stream_from inscrever transmissão (broadcasting) chamada chat_best room quando valor parâmetro :room \"best room\": então, outro lugar aplicação rails, possível transmitir essa room chamando broadcast: você possui stream está relacionada model, então nome transmissão pode gerada partir channel model. exemplo, código seguir stream_for inscrever transmissão como comments:z2lkoi8vvgvzdefwcc9qb3n0lze, onde z2lkoi8vvgvzdefwcc9qb3n0lze corresponde global model post. você pode agora transmitir esse channel chamando broadcast_to:"},{"id":722,"title":"Action Cable Overview","heading":"5 Interações Cliente-Servidor","subheading":"5.2 Broadcastings","content":"broadcasting link pub/sub qualquer coisa transmitida publisher encaminhada diretamente assinantes channel, este, está transmitindo broadcasting mesmo nome. cada channel pode estar transmitindo zero mais broadcastings. broadcastings puramente filas espera online dependentes tempo. consumidor estiver transmitindo (assinante determinado channel), receber broadcast caso conecte mais tarde."},{"id":723,"title":"Action Cable Overview","heading":"5 Interações Cliente-Servidor","subheading":"5.3 Subscriptions","content":"quando consumidor está inscrito channel, como assinante (subscriber). essa conexão chamada assinatura (subscription). mensagens recebidas então direcionadas esses inscritos channel baseadas identificador enviado pelo cable consumer"},{"id":724,"title":"Action Cable Overview","heading":"5 Interações Cliente-Servidor","subheading":"5.4 Passando Parâmetros para Channel","content":"você pode passar parâmetros lado cliente lado servidor quando cria subscription. exemplo: objeto passado como primeiro argumento subscriptions.create torna-se hash params cable channel. keyword channel obrigatória:"},{"id":725,"title":"Action Cable Overview","heading":"5 Interações Cliente-Servidor","subheading":"5.5 Retransmitindo uma Mensagem","content":"caso comum retransmitir mensagem enviada cliente qualquer outro cliente conectado retransmissão recebida todos clientes conectados, incluindo cliente enviou mensagem. note params mesmos quando você inscreveu channel seguintes etapas configuração comuns ambos exemplos:"},{"id":726,"title":"Action Cable Overview","heading":"6 Full-Stack Exemplos","subheading":"6.1 Exemplo 1: Aspectos do usuário","content":"aqui está exemplo simples canal rastreia usuário está online página está (isso útil criar recursos presença, como mostrar ponto verde lado nome usuário estiver online). criando canal aspectos back-end: quando inscrição inicializada, callback subscribed acionado aproveitamos oportunidade dizer usuário atual realmente apareceu\". essa aparecer/desaparecer pode apoiada redis, banco dados, qualquer outro. criando inscrição canal aspectos lado cliente:"},{"id":727,"title":"Action Cable Overview","heading":"6 Full-Stack Exemplos","subheading":"6.2 Exemplo 2: Recebendo novas notificações da web","content":"exemplo aspectos todo sobre expor funcionalidade servidor cliente pela conexão websocket. melhor websockets dupla. portanto, agora vamos mostrar exemplo servidor invoca ação cliente. este canal notificação permite acionar notificações lado cliente quando você transmite streams certos: criando canal notificações lado servidor: criando assinatura canal notificações lado cliente transmite conteúdo instância canal notificação qualquer lugar aplicação: chamada webnotificationschannel.broadcast_to coloca mensagem fila pubsub adaptador assinaturas atual nome transmissão separado cada usuário. exemplo, usuário nome transmissão seria web_notifications:1. canal instruído transmitir tudo chegar web_notifications:1 diretamente cliente, invocando callback received. dados passados como argumento hash enviado como segundo parâmetro chamada transmissão lado servidor, json codificado, transição, também descompactado, argumento dados chega como received."},{"id":728,"title":"Action Cable Overview","heading":"6 Full-Stack Exemplos","subheading":"6.3 Exemplos Mais Completos","content":"veja repositório rails/actioncable-examples exemplo completo como configurar action cable aplicação rails, adicionar canais. action cable duas configurações necessárias: adaptador assinatura (subscription) origens requisição (request) permitidas."},{"id":729,"title":"Action Cable Overview","heading":"7 Configuração","subheading":"7.1 Adaptador de assinatura","content":"padrão, action cable procura arquivo configuração config/cable.yml. arquivo deve especificar adaptador (adapter) cada ambiente rails. veja dependências seção obter informações adicionais sobre adaptadores. abaixo está lista adaptadores assinatura disponíveis usuários finais. adaptador assíncrono destina-se desenvolvimento teste deve usado produção. adaptador redis requer usuários forneçam apontando servidor redis. além disso, channel_prefix pode fornecido evitar colisões nome canal usar mesmo servidor redis vários aplicativos. veja documentação redis pubsub mais detalhes. adaptador redis também oferece suporte conexões ssl/tls. parâmetros ssl/tls necessários podem passados chave ssl_params arquivo yaml configuração. opções passadas ssl_params enviadas diretamente método openssl::ssl::sslcontext#set_params podem qualquer atributo válido contexto ssl. consulte documentação openssl::ssl::sslcontext outros atributos disponíveis. você estiver usando certificados autoassinados adaptador redis atrás firewall optar ignorar verificação certificado, verify_mode deve definido como openssl::ssl::verify_none. adaptador postgresql pool conexão active record portanto, configuração banco dados config/database.yml aplicativo, conexão. isso pode mudar futuro. #27214"},{"id":730,"title":"Action Cable Overview","heading":"7 Configuração","subheading":"7.2 Origens de Requisição Permitidas","content":"action cable aceitará requisições origens especificadas, passado configuração servidor como array. origens podem instâncias strings expressões regulares, contra quais verificação correspondência será realizada. desativar permitir requisições qualquer origem: padrão, action cable permite todas requisições localhost:3000 durante execução ambiente desenvolvimento."},{"id":731,"title":"Action Cable Overview","heading":"7 Configuração","subheading":"7.3 Configuração do Consumidor","content":"configurar url, adicione chamada action_cable_meta_tag layout html head. isso caminho (path) normalmente definido config.action_cable.url arquivos configuração ambiente."},{"id":732,"title":"Action Cable Overview","heading":"7 Configuração","subheading":"7.4 Configuração do Worker Pool","content":"pool workers usado executar retornos (callbacks) conexão ações channel isolamento thread principal servidor. action cable permite aplicação configure número threads processados ​​simultaneamente worker pool. além disso, observe servidor deve fornecer pelo menos mesmo número conexões banco dados você workers. tamanho worker pool trabalho padrão definido como então isso significa você deve disponibilizar pelo menos conexões banco dados. você pode mudar isso config/database.yml através atributo pool."},{"id":733,"title":"Action Cable Overview","heading":"7 Configuração","subheading":"7.5 Log no lado do client","content":"client side desabilitado padrão. você pode habilitar essa configuração actioncable.logger.enable trocando true."},{"id":734,"title":"Action Cable Overview","heading":"7 Configuração","subheading":"7.6 Outras Configurações","content":"outra opção comum configurar tags aplicadas logger conexão. aqui está exemplo conta usuário, disponível, senão \"sem conta\" durante marcação: obter lista completa todas opções configuração, consulte classe actioncable::server::configuration."},{"id":735,"title":"Action Cable Overview","heading":"8 Executando Servidores Cable Autônomos","subheading":"8.1 Na Aplicação","content":"action cable pode executado junto aplicação rails. exemplo, escutar requisições websocket /websocket, especifique esse caminho config.action_cable.mount_path: você pode usar actioncable.createconsumer() conectar cable server action_cable_meta_tag invocado layout. caso contrário, caminho especificado como primeiro argumento createconsumer (e.g. actioncable.createconsumer(\"/websocket\")). cada instância servidor você cria cada worker servidor instancia, você também terá nova instância action cable, adaptador redis postgresql mantém mensagens sincronizadas entre conexões."},{"id":736,"title":"Action Cable Overview","heading":"8 Executando Servidores Cable Autônomos","subheading":"8.2 Autônomo","content":"cable servers cabo podem separados servidor aplicação normal. este ainda aplicação rack, própria aplicação rack. recomendado configuração básica seguinte: então você inicia servidor usando binstub bin/cable ala: código iniciar cable server porta"},{"id":737,"title":"Action Cable Overview","heading":"8 Executando Servidores Cable Autônomos","subheading":"8.3 Notas","content":"servidor websocket acesso sessão, acesso cookies. isso pode usado quando você precisa lidar autenticação. você pode maneira fazer isso devise neste artigo. action cable fornece interface adaptador assinatura processar seus pubsub internos. padrão, adaptadores assíncronos, inline, postgresql redis estão incluídos. adaptador padrão novas aplicações rails adaptador assíncrono (async). lado ruby coisas construído cima websocket-driver, nio4r concurrent-ruby. action cable alimentado combinação websockets threads. tanto plumbing framework trabalho channel especificado pelo usuário tratados internamente, usando suporte thread nativo ruby. isso significa você pode usar todos seus models rails problemas, contanto você tenha cometido nenhum pecado thread-safety. servidor action cable implementa rack socket hijacking api, permitindo assim padrão multithread gerenciamento conexões internamente, independentemente servidor aplicativos multiencadeado não. assim, action cable funciona servidores populares como unicorn, puma passenger. você pode encontrar instruções detalhadas como testar funcionalidade action cable guia teste. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":738,"title":"Layouts e Renderização no Rails","heading":"1 Visão Geral: Como as peças se encaixam","subheading":"1 Visão Geral: Como as peças se encaixam","content":"este guia concentra-se interação entre controller view triângulo model-view-controller. como você sabe, controller responsável orquestrar todo processo como lidar requisição rails, embora normalmente entregue qualquer código pesado model. porém, hora enviar resposta volta usuário, controller transfere informações view. essa transferência assunto deste guia. linhas gerais, isso envolve decidir deve enviado como resposta chamar método apropriado criar essa resposta. resposta view completa, rails também fará trabalho extra encapsular view layout possivelmente, obter partials. você verá todos esses caminhos posteriormente neste guia. ponto vista controller, três maneiras criar resposta http:"},{"id":739,"title":"Layouts e Renderização no Rails","heading":"2 Criando respostas","subheading":"2.1 Renderização por padrão: Convenção sobre configuração em ação","content":"você ouviu falar rails promove \"convenção sobre configuração\". renderização padrão excelente exemplo disso. padrão, controllers rails renderizam automaticamente views nomes correspondem rotas válidas. exemplo, você tiver esse código classe bookscontroller: seguinte arquivo rotas: você arquivo exibição app/views/books/index.html.erb: rails renderizará automaticamente app/views/books/index.html.erb quando você navegar /books verá livros chegarão breve!\" tela. entanto, tela breve apenas minimamente útil; portanto, breve você criará modelo book adicionará action index bookscontroller: observe temos render explícito final action index, acordo princípio \"convenção sobre configuração\". regra que, você renderizar explicitamente algo final action controller, rails procurará automaticamente template action_name.html.erb caminho view controller renderizará. portanto, neste caso, rails renderizará arquivo app/views/books/index.html.erb. queremos exibir propriedades todos livros nossa view, podemos fazer isso template como este:"},{"id":740,"title":"Layouts e Renderização no Rails","heading":"2 Criando respostas","subheading":"2.2 Usando render","content":"maioria casos, método actioncontroller::base#render trabalho pesado renderizar conteúdo aplicativo utilizado navegador. existem várias maneiras personalizar comportamento render. você pode renderizar view padrão template rails, template específico, arquivo, código embutido, nada. você pode renderizar text, json xml. você também pode especificar tipo conteúdo status http resposta renderizada. você deseja renderizar view corresponde modelo diferente dentro mesmo controller, você pode usar render nome view: chamada update falhar, action update neste controller renderizará template edit.html.erb pertencente mesmo controller. preferir, você pode usar símbolo string especificar action renderizada: você quiser renderizar template controller totalmente diferente daquele contém código action? você também pode fazer isso render, aceita caminho completo (relativo app/views) template renderizado. exemplo, você estiver executando código adminproductscontroller fica emapp/controllers/admin, você pode renderizar resultados action template app/views/products desta maneira: rails sabe essa view pertence controller diferente devido caractere barra contido string. você quer explícito, você pode usar opção :template (necessária rails versões anteriores): duas maneiras acima renderizar (renderizar template outra action dentro mesmo controller renderizar template outra action dentro outro controller) verdade variantes mesma operação. fato, classe bookscontroller, dentro action update qual queremos renderizar template edit, livro atualizado êxito, todas seguintes chamadas render renderizarão template edit.html.erb diretório views/books: qual deles você realmente questão estilo convenção, regra geral usar mais simples faça sentido código você está escrevendo. método render pode ficar completamente view você estiver disposto usar opção :inline fornecer como parte chamada método. isso perfeitamente válido: padrão, renderização inline erb. como alternativa, você pode forçá-lo usar builder opção :type: você pode enviar texto formatação nenhuma marcação volta navegador usando opção :plain emrender: você pode enviar string html volta navegador usando opção :html render: json formato dados javascript usado muitas bibliotecas ajax. rails possui suporte interno converter objetos json renderizar esse json volta navegador: rails também possui suporte interno converter objetos renderizar esse volta quem chamou: rails pode renderizar javascript convencional: isso enviará string fornecida navegador mime type text/javascript. você pode enviar conteúdo bruto volta navegador, definir nenhum tipo conteúdo, usando opção :body render: rails pode renderizar arquivo bruto partir caminho absoluto. isso útil condicionalmente renderizar arquivos estáticos, como páginas erro. isso renderiza arquivo bruto (não suporta outros manipuladores). padrão renderizado layout atual. rails pode renderizar objetos respondem método :render_in. isso chama render_in objeto contexto view (view context) atual. chamadas método render geralmente aceitam seis opções: padrão, rails exibirá resultados renderização tipo conteúdo mime como text/html application/json você usar opção :json ouapplication/xml opção :xml.). momentos você pode alterar isso, pode fazê-lo definindo opção :content_type: maioria opções render, conteúdo renderizado exibido como parte layout atual. você aprenderá mais sobre layouts como usá-los posteriormente neste guia. você pode usar opção :layout rails arquivo específico como layout action atual: você também pode dizer rails renderizar nenhum layout: você pode usar opção :location definir cabeçalho http location: rails gerará automaticamente resposta código status http correto maioria casos, isso ok). você pode usar opção :status alterar isso: rails entende códigos númericos status símbolos correspondentes mostrados abaixo. rails formato especificado solicitação :html padrão). você pode mudar isso passando opção :formats símbolo array: template formato especificado existir, será gerado erro actionview::missingtemplate. isso rails procurar variações template mesmo formato. você pode especificar lista variações passando opção :variants símbolo array. exemplo seria este. esse conjunto variantes, rails procurará conjunto modelos seguir usará primeiro encontrar. template formato especificado existir, será gerado erro actionview::missingtemplate. definir variação chamada renderização, você também pode configurá-la objeto solicitação action controller. encontrar layout atual, rails primeiro procura arquivo app/views/layouts mesmo nome base controller. exemplo, renderizar actions classe photoscontroller usam app/views/layouts/photos.html.erb app/views/layouts/photos.builder). houver esse layout específico controller, rails usará app/views/layouts/application.html.erb ouapp/views/layouts/application.builder. houver layout .erb, rails usará layout.builder, houver. rails também fornece várias maneiras atribuir layouts específicos mais precisão controllers actions individuais. você pode substituir convenções layout padrão seus controllers usando declaração layout. exemplo: esta declaração, todas views renderizadas pelo productscontroller usarãoapp/views/layouts/inventário.html.erb como layout. atribuir layout específico toda aplicação, declare layout classeapplicationcontroller: esta declaração, todas views, toda aplicação, usarão app/views/layouts/main.html.erb layout. você pode usar símbolo adiar escolha layout requisição seja processada: agora, usuário atual usuário especial, receberá layout especial visualizar produto. você pode usar método inline, como proc, determinar layout. exemplo, você passar objeto proc, bloco você fornecer proc receberá instância controller, layout possa determinado base solicitação atual: layouts especificados nível controller suportam opções :only e:except. essas opções recebem nome método array nomes métodos correspondem nomes métodos controller: esta declaração, layout product seria usado tudo, menos métodosrss index. declarações layout cascateam hierarquia, declarações layout mais específicas sempre substituem mais gerais. exemplo: nesta aplicação: similar lógica herança layout, template partial encontrado caminho convencional, controller procurará template partial renderizar cadeia herança. exemplo: ordem busca action admin/products#index será: isso torna app/views/application/ ótimo lugar suas partials compartilhadas, podem renderizadas seguinte forma: mais cedo mais tarde, maioria pessoas desenvolvedoras rails verá mensagem erro pode renderizar redirecionar ação\" (\"can only render redirect once action\"). embora isso seja irritante, relativamente fácil corrigir. geralmente isso ocorre devido mal-entendido sobre modo como render funciona. exemplo, aqui está código acionará esse erro: @book.special? avaliado como true, rails iniciará processo renderização despejar variável @book view special_show. isso interrompe execução restante código action show, quando rails chegar final ação, começará renderizar view regular_show gerará erro. solução simples: verifique você apenas chamada render redirect único fluxo código. coisa pode ajudar return. aqui está versão corrigida método: certifique-se usar return return, porque return funcionará devido precedência operador linguagem ruby. observe renderização implícita feita pelo actioncontroller detecta render chamado, portanto, seguinte código funcionará erros: isso renderizará livro special? configurado template special_show, enquanto outros livros serão renderizados template padrão show."},{"id":741,"title":"Layouts e Renderização no Rails","heading":"2 Criando respostas","subheading":"2.3 Usando redirect_to","content":"outra maneira lidar retorno respostas requisição http redirect_to. como você viu, render rails qual view outro asset) deve usado construção resposta. método redirect_to algo completamente diferente: navegador enviar nova requisição diferente. exemplo, você pode redirecionar onde quer esteja código index fotos aplicação esta chamada: você pode usar redirect_back retornar usuário página onde eles vieram. este local extraído cabeçalho http_referer, garante esteja definido pelo navegador, portanto, você deve fornecer fallback_location usar neste caso. rails código status http 302, redirecionamento temporário, quando você chama redirect_to. você quiser usar código status diferente, talvez 301, redirecionamento permanente, opção :status: assim como opção :status pararender, :status redirect_to aceita designações numéricas simbólicas cabeçalho vezes, pessoas desenvolvedoras inexperientes pensam redirect_to como espécie comando goto, movendo execução lugar outro código rails. isso está correto. código executado aguarda nova requisição navegador. acontece você informou navegador qual requisição deve acontecer seguida, enviando volta código status http considere estas ações diferença: código neste formulário, provavelmente haverá problema variável @book nil. lembre-se render: action executa nenhum código action destino, então nada configurará variável @books view index provavelmente exigirá. maneira corrigir isso redirecionar renderizar: esse código, navegador fará nova requisição página índice, código método index será executado tudo ficará bem. única desvantagem desse código requer navegador faça volta: navegador solicitou action show /books/1 controller descobre livros, portanto controller envia resposta redirecionamento navegador dizendo /books/, navegador obedece envia nova requisição volta controller solicitando agora action index, controller obtém todos livros banco dados renderiza template index, enviando-o volta navegador, exibe tela. enquanto aplicação pequena essa latência adicional pode problema, algo pensar tempo resposta preocupação. podemos demonstrar maneira lidar isso exemplo: isso detectaria livros especificado, define variável instância @books todos livros modelo depois renderiza diretamente template index.html.erb, retornando-o navegador mensagem alerta flash informar usuário aconteceu."},{"id":742,"title":"Layouts e Renderização no Rails","heading":"2 Criando respostas","subheading":"2.4 Usando head para criar respostas com apenas o cabeçalho (Header-Only)","content":"método head pode usado enviar respostas apenas cabeçalhos navegador. método head aceita número símbolo (consulte tabela referência) representando código status http. argumento options interpretado como hash nomes valores cabeçalho. exemplo, você pode retornar apenas cabeçalho erro: isso produziria seguinte cabeçalho: você pode usar outros cabeçalhos http transmitir outras informações: produziria: quando rails renderiza view como resposta, isso combinando view layout atual, usando regras achar layout atual foram mencionadas neste guia. dentro layout, você acesso três ferramentas combinar pedaços diferentes saídas formar resposta geral:"},{"id":743,"title":"Layouts e Renderização no Rails","heading":"3 Estruturando Layouts","subheading":"3.1 Helpers de Asset Tags","content":"helpers asset tags fornecem métodos gerar html liga views feeds, javascript, stylesheets, imagens, vídeos, áudios. seis helpers asset tags disponíveis rails: você pode usar essas tags layouts outras views, embora métodos auto_discovery_link_tag, javascript_include_tag stylesheet_link_tag apareçam mais seção <head> layout. helper auto_discovery_link_tag monta html maioria navegadores leitores feeds conseguem usar detectar presenta feeds rss, atom, json. recebe tipo link (:rss, :atom, :json), hash opções encaminhados url_for, hash opções tag: três opções tags disponíveis método auto_discovery_link_tag: helper javascript_include_tag retorna html script cada fonte fornecida. você está usando rails asset pipeline habilitada, este helper criará link /assets/javascripts/ invés public/javascripts usado versões anteriores rails. este link será disponibilizado pelo asset pipeline. arquivo javascript dentro aplicação engine rails pode dentro entre três possíveis pastas: app/assets, lib/assets vendor/assets. estas pastas explicadas detalhes seção organização assets guia asset pipeline. você pode especificar caminho completo relativo raiz documento, url, você preferir. exemplo, ligar arquivo javascript está dentro diretório chamado javascripts dentro deapp/assets, lib/assets vendor/assets, você faria isto: rails criará então script como esta: requisição este asset será então disponibilizada pela sprockets. incluir vários arquivos como app/assets/javascripts/main.js app/assets/javascripts/columns.js mesmo tempo: incluir app/assets/javascripts/main.js app/assets/javascripts/photos/columns.js: incluir http://example.com/main.js: helper stylesheet_link_tag retorna html <link> cada fonte fornecida. você está usando rails \"asset pipeline\" habilitada, este helper criará link /assets/stylesheets/. este link então será processado pela sprockets. arquivo stylesheet pode armazenado três endereços: app/assets, lib/assets vendor/assets. você pode especificar caminho completo relativo raiz documento, url. exemplo, ligar arquivo stylesheet está dentro diretório chamado stylesheets dentro app/assets, lib/assets vendor/assets, você faria isto: incluir app/assets/stylesheets/main.css app/assets/stylesheets/columns.css: incluir app/assets/stylesheets/main.css app/assets/stylesheets/photos/columns.css: incluir http://example.com/main.css: padrão, método stylesheet_link_tag cria links rel=\"stylesheet\". você pode sobrescrever este padrão especificando opção apropriada (:rel): helper image_tag monta <img aponta arquivo especificado. padrão, arquivos carregados partir public/images. você pode fornecer caminho imagem preferir: você pode fornecer hash opções adicionais html: você pode fornecer texto alternativo imagem será utilizado pessoa usuária estiver imagens desabilitadas navegador. você especificar texto alternativo forma explícita, valor padrão será nome arquivo, inicial maiúscula extensão. exemplo, estas duas imagens devolvem mesmo código: você também pode especificar size especial, formato \"{largura}x{altura}\": além especial acima, você pode fornecer hash final opções html padrão, como :class, :name: helper video_tag monta html <video> apontando arquivo especificado. padrão, arquivos carregados partir public/videos. produz como método image_tag, você pode fornecer caminho absoluto relativo diretório public/videos. além disso você pode especificar opção size: \"#{width}x#{height}\" assim como método image_tag. tags vídeo também podem qualquer opções html especificadas método (id, class al). método video_tag também suporta todas opções html <video> através hash opções html, incluindo: você também pode especificar vários vídeos reprodução consecutiva passando array vídeos método video_tag: isto produzir: helper audio_tag monta html <audio> apontando arquivo especificado. padrão, arquivos carregados partir public/audios. você pode fornecer caminho arquivo áudio preferir: você também pode fornecer hash opções adicionais, como :id, :class etc. como método video_tag, método audio_tag opções especiais:"},{"id":744,"title":"Layouts e Renderização no Rails","heading":"3 Estruturando Layouts","subheading":"3.2 Entendendo yield","content":"dentro contexto layout, yield identifica seção onde conteúdo view deve inserido. maneira mais simples utilizar isto colocar único yield, dentro qual todo conteúdo view renderizada momento inserido: você também pode criar layout várias regiões yield: body principal view sempre manda conteúdo dentro yield nome. direcionar conteúdo tags yield nome, usa-se método content_for."},{"id":745,"title":"Layouts e Renderização no Rails","heading":"3 Estruturando Layouts","subheading":"3.3 Usando o Método content_for","content":"método content_for permite inserir conteúdo dentro bloco yield nome layout. exmeplo, esta view funcionaria layout você acabou ver: resultado renderização desta página dentro layout fornecido seria este html: método content_for ajuda muito quando layout contém regiões distintas como sidebars rodapés precisam receber blocos conteúdo próprios. também útil inserir tags carregam javascript arquivos dentro cabeçalho layout seria genérico outro cenário."},{"id":746,"title":"Layouts e Renderização no Rails","heading":"3 Estruturando Layouts","subheading":"3.4 Usando Partials","content":"templates parciais normalmente chamados \"partials\" outro dispositivo quebrar processo renderização pedaços menores. partial, você pode mover código renderizar pedaço específico resposta arquivo próprio. renderizar partial como parte view, usa-se método render dentro view: isto inclui conteúdo arquivo chamado _menu.html.erb neste ponto dentro view renderizada. note underscore inicial nome arquivo: partials recebem nomes underscore inicial distingui-los views regulares, mesmo usar esta notação casos mais comuns. isso continua sendo verdade mesmo quando você incluir partial outro diretório: este código puxará partial app/views/shared/_menu. jeito usar partials tratá-los como algo equivalente sub-rotinas: como jeito mover detalhes fora view forma você entenda está acontecendo forma mais fácil. exemplo, você pode view estava assim: aqui, partials _ad_banner.html.erb _footer.html.erb podem conteúdo compartilhado muitas páginas aplicação. você precisa detalhes destas seções quando concentrar atenção página particular. como seções anteriores deste guia, yield ferramenta muito poderosa fazer faxina seus layouts. tenha mente isto ruby puro, então possível usar isto quase qualquer lugar. exemplo, podemos usar yield remover duplicação definições layout formulário vários recursos similares: partial pode usar próprio arquivo, assim como view pode usar layout. exemplo, você pode chamar partial assim: isto procura partial chamado _link_area.html.erb renderiza usando layout _graybar.html.erb. note layouts partials seguem mesma nomenclatura underscore inicial partials comuns, ficam mesmo diretório partial qual pertencem (não diretório principal layouts). note também necessário especificar :partial forma explícita quando passar opções adicionais como :layout. você também pode passar variáveis locais partials, tornando-os ainda mais poderosos flexíveis. exemplo, você pode utilizar esta técnica reduzir duplicação entre páginas edit, enquanto mantém pouco conteúdo distinto: mesmo mesma partial renderizado dentro duas views, helper submit retorna \"create zone\" ação \"update zone\" ação edit. passar variável local partial apenas casos específicos usa-se local_assigns. desta forma possível utilizar partial necessidade declarar todas variáveis locais. toda partial também variável local mesmo nome partial (sem underscore inicial). você pode passar objeto esta variável local opção :object. dentro partial customer, variável customer refere @new_customer partir view superior. você instância model renderizar dentro partial, você pode usar sintaxe reduzida: presumindo variável instância @customer contém instância model customer, isto utilizará _customer.html.erb renderizá-la passará variável local customer dentro partial refere variável instância @customer view superior. partials muito úteis renderizar coleções. quando você passa coleção partial através opção :collection, partial será inserido cada membro coleção: quando partial chamado coleção pluralizada, então instâncias individuais partial acesso membro coleção renderizado variável nomeada base partial. neste caso, partial _product, dentro partial _product, você pode referir product pegar instância renderizada. também sintaxe reduzida isto. presumindo question @products coleção instâncias product, você pode simplesmente escrever isto dentro index.html.erb produzir mesmo resultado: rails determina nome partial utilizar olhando nome model coleção. aliás, você pode criar coleção heterogênea fazer renderização deste jeito, rails escolherá partial apropriado cada membro coleção: neste caso, rails utilizará partials cliente empregado situações apropriadas cada membro coleção. caso coleção esteja vazia, render retornará nil, então deve haver dificuldades fornecer conteúdo alternativo. usar variável local personalizada dentro partial, especifique opção chamada partial: esta mudança, você pode acessar instância coleção @products como variável local item dentro partial. você também pode passar variáveis locais arbitrárias qualquer partial você renderizar opção locals: neste caso, partial terá acesso variável local title valor \"products page\". você também pode especificar segunda partial renderizar entre instâncias partial principal usando opção :spacer_template: rails renderizar partial _product_ruler (sem dados encaminhados ele) entre cada partials _product. possível usar opção :layout quando renderizar coleções: layout será renderizado junto partial cada item coleção. variáveis objeto atual object_counter ficam disponíveis layout também, mesma forma ficam dentro partial."},{"id":747,"title":"Layouts e Renderização no Rails","heading":"3 Estruturando Layouts","subheading":"3.5 Usando Layouts Aninhados","content":"pode aplicação necessite layout seja ligeiramente diferente layout aplicação suporte controller particular. invés repetir layout principal editá-lo, possível fazer isso através layouts aninhados (algumas vezes chamados sub-templates). segue exemplo: suponha você este layout applicationcontroller: páginas geradas pelo newscontroller, você quer esconder menu topo colocar menu direita: isto. view news utilizar novo layout, menu topo menu novo direita dentro \"content\". vários jeitos conseguir resultados similares esquemas diferentes sub-templates através desta técnica. note limite nível aninhamento. possível utilizar método actionview::render render template: 'layouts/news' criar novo layout base layout news. você certeza criará outros templates partir layout news, você pode substituir content_for?(:news_content) yield(:news_content) yield simplesmente yield. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":748,"title":"Interface de Consulta do Active Record","heading":"1 O que é a Interface do Active Record para Queries?","subheading":"1 O que é a Interface do Active Record para Queries?","content":"você está acostumado puro encontrar registros banco dados, então você provavelmente encontrará maneiras melhores realizar mesmas operações rails. active record isola necessidade usar maioria casos. active record fará consultas banco dados você compatível maioria sistemas banco dados, incluindo mysql, mariadb, postgresql sqlite. independentemente qual sistema banco dados você está usando, formato métodos active record será sempre mesmo. exemplos código longo desse guia irão referir mais seguintes modelos:  recuperar objetos banco dados, active record fornece diversos métodos localização. cada método localização permite você passe argumentos mesmo executar determinada consulta banco dados necessidade escrever puro. métodos são: métodos localização retornam coleção, como where group, retornam instância activerecord::relation. métodos localizam única entidade, como find first, retornam única instância model. principal operação model.find(options) pode resumida como:"},{"id":749,"title":"Interface de Consulta do Active Record","heading":"2 Recuperando Objetos do Banco de Dados","subheading":"2.1 Retornando um Único Objeto","content":"active record possui diferentes formas retornar único objeto. utilizando método find, você pode retornar objeto correspondente primary especificada corresponde opções fornecidas. exemplo: equivalente cima, sql, seria: método find gerar exceção activerecord::recordnotfound nenhum registro correspondente encontrado. você pode, também, utilizar este método consultar múltiplos objetos. chame método find passe array primary keys. será retornado array contendo todos registros correspondentes primary keys fornecidas. exemplo: equivalente cima, sql, seria: método take retorna registro nenhuma ordem implícita. exemplo: equivalente cima, sql, seria: método take retorna nenhum registro encontrado nenhuma exceção será disparada. você pode passar argumento numérico método take retornar mesmo número resultados. exemplo: equivalente cima, sql, seria: método take! comporta exatamente como take, exceto gerar exceção activerecord::recordnotfound caso encontre nenhum registro correspondente. método first encontra primeiro registro ordenado pela primary (padrão). exemplo: equivalente cima, sql, seria: método first retorna encontrado nenhum registro correspondente nenhuma exceção gerada. default scope contém método ordenação, first retornar primeiro registro acordo essa ordenação. você pode passar argumento número métoddo first retornar mesmo número resultados. exemplo: equivalente cima, sql, seria: coleção ordenada utilizando order, first retornar primeiro registro ordenado atributo especificado order. equivalente cima, sql, seria: método first! comporta exatamente como first, exceto gerar exceção activerecord::recordnotfound nenhum registro correspondente encontrado. método last encontra último registro ordenado pela primary (padrão). exemplo: equivalente cima, sql, seria: método last retorna encontrar nenhum registro correspondente nenhuma exceção será disparada. default scope contém método ordenação, last retornar último registro acordo essa ordenação. você pode passar argumento número método last retornar mesmo número resultados. exemplo: equivalente cima, sql, seria: coleção ordenada utilizando order, last retornar último registro ordenado atributo especificado order. equivalente cima, sql, seria: método last! comporta exatamente como last, exceto gerar exceção activerecord::recordnotfound nenhum registro correspondente encontrado. método find_by retornar primeiro registro corresponde condições. exemplo: equivalente escrever: equivalente cima, sql, seria observe 'order acima. suas condição find_by puderem corresponder vários registros, você deve aplicar ordenação garantir resultado determinístico. método find_by comporta exatamente como find_by, exceto gerar exceção activerecord::recordnotfound nenhum registro correspondente encontrado. exemplo: isto equivalente escrever:"},{"id":750,"title":"Interface de Consulta do Active Record","heading":"2 Recuperando Objetos do Banco de Dados","subheading":"2.2 Retornando Múltiplos Objetos em Lotes","content":"frequentemente precisamos iterar sobre grande número registros, seja quando precisamos enviar newsletter grande número clientes, quando vamos exportar dados. isso pode parecer simples: essa abordagem torna cada mais impraticável medida tamanho tabela aumenta, pois customer.all.each instrui active record buscar tabela inteira única passagem, cria model objeto linha mantém todo array objetos model memória. fato, você grande número registros, coleção inteira pode exceder quantidade memória disponível. rails fornece dois métodos solucionar esse problema, dividindo registros lotes memory-friendly processamento. primeiro método, find_each, retorna lote registros depois submete cada registro individualmente bloco como model. segundo método, find_in_batches, retorna lote registros depois submete lote inteiro bloco como array models. método find_each retorna registros lotes depois aloca cada bloco. exemplo seguir, find_each retorna customers lotes aloca bloco esse processo repetido, buscando mais lotes sempre preciso, todos registros tenham sido processados. find_each funciona classes model, como visto acima, assim como relações: contanto tenha nenhuma ordenação, pois método necessita forçar ordem interna iterar. houver ordem presente receptor, comportamento depende flag config.active_record.error_on_ignored_order. verdadeiro, argumenterror disparada, caso contrário ordem será ignorada aviso gerado, padrão. isto pode substituído opção :error_on_ignore, explicado abaixo. :batch_size opção :batch_size permite você especifique número registros serem retornados cada lote, antes serem passados, individualmente, bloco. exemplo, retornar registros lote 5000: :start padrão, registros buscados ordem ascendente primary key. opção :start permite você configure primeiro sequência sempre menor seja você precisa. isto pode útil, exemplo, você quer retomar processo interrompido lotes, desde você tenha salvo último processado como ponto retorno. exemplo, enviar newsletters apenas clientes primary começando 2000: :finish similar opção :start, :finish permite você configure último sequência sempre maior seja você necessite. isso pode útil, exemplo, você quer executar processo lotes utilizando subconjuntos registros baseados :start :finish exemplo, enviar newsletters apenas clientes primary começando indo 10000: outro exemplo seria você queira múltiplos workers manipulando mesma fila processamento. você pode cada worker lidando registros atribuindo opção :start finish apropriadas cada worker :error_on_ignore sobrescreve configurações aplicação especificar erro deve disparada quando ordem está presente relação. método find_in_batches similar find_each, pois ambos retornam lotes registros. diferença find_in_batches fornece lotes bloco como array models, individualmente. exemplo seguir produzir bloco fornecido array notas fiscais vez, bloco final contendo quaisquer clientes remanescente: find_in_batches funcional classes model, como visto acima, também relações: contanto ordenação, pois método forçar ordem interna iteração. método find_in_batches aceita mesmas opção find_each: :batch_size assim como find_each, batch_size estabelece quantos registros serão recuperados cada grupo. exemplo, recuperação lotes registros pode especificada como: :start opção start permite especificar inicial onde registros serão selecionados. conforme mencionado antes, padrão, registros buscados ordem crescente chave primária. exemplo, recuperar clientes começando lotes registros, seguinte código pode usado: :finish opção finish permite especificar identificação final registros serem recuperados. código abaixo mostra caso recuperação clientes lotes, cliente 7000: :error_on_ignore opção error_on_ignore sobrescreve configuração aplicação especificar erro deve disparado quando ordem específica está presente relação. método where permite você especifique condições limitar registros retornados, representando parte where instrução sql. condições podem especificadas como string, array, hash."},{"id":751,"title":"Interface de Consulta do Active Record","heading":"3 Condições","subheading":"3.1 Condições de Strings Puras","content":"você gostaria adicionar condições busca, poderia apenas especificá-las, como, exemplo book.where(\"title 'introdução algoritmos'\"). isso encontrará todos livros campo title tenha valor igual \"introdução algoritmos\"."},{"id":752,"title":"Interface de Consulta do Active Record","heading":"3 Condições","subheading":"3.2 Condições de Array","content":"agora, esse título pudesse variar, digamos como argumento algum lugar? comando busca então levaria forma: active record tomará primeiro argumento como string condições quaisquer argumentos adicionais substituir pontos interrogação nele. você quer especificar múltiplas condições: neste exemplo, primeiro ponto interrogação será substituído valor params[:title] segundo será substituído representação false, depende adaptador. este código altamente preferível: este código: devido segurança argumento. colocando variável dentro condição string, passará variável banco dados como encontra. isto significa será variável escape diretamente usuário pode intenções maliciosas. você fizer isso, coloca todo banco dados risco, porque usuário descobre pode explorar banco dados, pode fazer qualquer coisa ele. nunca, jamais, coloque seus argumentos diretamente dentro condição string. similar estilo substituição parâmetros, você também pode especificar chaves condição string junto hash chaves/valores (keys/values) correspondentes: isso torna legibilidade mais clara você grande número condições variáveis."},{"id":753,"title":"Interface de Consulta do Active Record","heading":"3 Condições","subheading":"3.3 Condições de Hash","content":"active record também permite você passe condições hash pode aumentar legibilidade suas sintaxes condições. condições hash, você passa hash chaves (keys) campos deseja qualificados valores (values) como deseja qualificá-los: isso gerar como este: nome campo também pode string: caso relacionamento belongs_to, chave associação pode usada especificar model objeto active record usado como valor. este método também funciona relacionamentos polimórficos. isso encontrar todos livros criados ontem usando instrução between: isso demonstra sintaxe mais curta exemplos condições array você deseja procurar registros usando expressão pode passar array hash condições: esse código gerar como este:"},{"id":754,"title":"Interface de Consulta do Active Record","heading":"3 Condições","subheading":"3.4 Condições NOT","content":"consultas podem construídas where.not: outras palavras, essa consulta pode gerada chamando where nenhum argumento, então imediatamente encadeie condições passando where. isso gerar como este:"},{"id":755,"title":"Interface de Consulta do Active Record","heading":"3 Condições","subheading":"3.5 Condições OR","content":"condições entre duas relações podem construídas chamando primeira relação, passando segundo como argumento."},{"id":756,"title":"Interface de Consulta do Active Record","heading":"3 Condições","subheading":"3.6 Condições AND","content":"condições podem construídas encadeando condições where. condições interseção lógica entre relações podem construídas chamando primeira relação passando segunda como argumento. recuperar registros banco dados ordem específica, você pode usar método order. exemplo, você deseja obter conjunto registros ordená-los ordem crescente pelo campo created_at tabela: você também pode especificar oudesc: ordenar campos diversos: você quiser chamar order várias vezes, ordens subsequentes serão anexados primeira: padrão, model.find seleciona todos campos conjunto resultado usando select selecionar somente subconjunto campos conjunto resultado, você pode especificar subconjunto método select. exemplo, selecionar somente colunas isbn out_of_print: query usada esta chamada busca algo como: tome cuidado pois isso também significa você está inicializando objeto model somente campos você selecionou. você tentar acessar campo está registro inicializado, você receber: onde <attribute> atributo você pediu. método lançar activerecord::missingattributeerror, então fique atento quando estiver trabalhando associações, pois elas precisam método funcionar corretamente. você quiser pegar somente registro valor único certo campo, você pode usar distinct: isso gerar query como: você pode também remover restrição unicidade: aplicar limit disparado pelo método model.find, você pode especificar limit usando métodos limit offset relação. você pode utilizar limit especificar número registros buscar, usar offset especificar número registros pular antes retornar registros. exemplo retornará máximo clientes devido método especificar nenhum offset retornará primeiros registros tabela. método executa será parecido com: adicionar offset chamada retornará lugar máximo clientes iniciando trigésimo-primeiro. será parecido com: aplicar cláusula group disparado pelo localizador, você pode utilizar método group. exemplo, você quer encontrar coleção datas pedidos foram criados: isso dará único objeto order cada data pedidos banco dados. será executado parecerá algo como isso:"},{"id":757,"title":"Interface de Consulta do Active Record","heading":"7 Agrupando","subheading":"7.1 Total de itens agrupados","content":"pegar total itens agrupados única query, chame count depois group. será executado parecerá algo como isso: cláusula having especificar condições campos group você pode adicionar cláusula having disparado pelo model.find adicionar método having busca. exemplo: será executado será parecido isso: isso retorna data preço total cada objeto pedido, agrupado pelo foram criados preço maior $200. você quiser acessar total_price cada objeto order retornado pode fazer assim:"},{"id":758,"title":"Interface de Consulta do Active Record","heading":"9 Condições de Substituição","subheading":"9.1 unscope","content":"você pode especificar certas condições serem removidas usando método unscope. exemplo: será executado: você também pode remover escopo cláusulas where específicas. exemplo, isto remover condição cláusula where: relação usou unscope afetará quaisquer relações quais unida:"},{"id":759,"title":"Interface de Consulta do Active Record","heading":"9 Condições de Substituição","subheading":"9.2 only","content":"você também pode substituir condições método only. exemplo: será executado:"},{"id":760,"title":"Interface de Consulta do Active Record","heading":"9 Condições de Substituição","subheading":"9.3 reselect","content":"método reselect substitui declaração select existente. exemplo: será executado: compare cláusula reselect utilizado: executado será:"},{"id":761,"title":"Interface de Consulta do Active Record","heading":"9 Condições de Substituição","subheading":"9.4 reorder","content":"método reorder substitui ordem escopo padrão. exemplo: você executa assim: será executado: você pode usar método reorder especificar jeito diferente ordenar livros: será executado:"},{"id":762,"title":"Interface de Consulta do Active Record","heading":"9 Condições de Substituição","subheading":"9.5 reverse_order","content":"método reverse_order reverte ordem cláusula, especificado. será executado: nenhuma cláusula ordenação especificada query, reverse_order ordena pela chave primária ordem reversa. será executado: método reverse_order aceita argumentos."},{"id":763,"title":"Interface de Consulta do Active Record","heading":"9 Condições de Substituição","subheading":"9.6 rewhere","content":"método rewhere substitui existente, nomeada condição where. exemplo: será executado: cláusula rewhere utilizada, cláusulas where juntadas usando and: será: método none retorna relação encadeada registros. quaisquer condições subsequentes encadeadas relação retornada continuarão gerando relações vazias. isso útil cenários onde você precisa resposta encadeada método escopo pode retornar zero resultados. active record provê método readonly relação desabilitar modificações explicitamente qualquer objetos retornados. qualquer tentativa alterar registro readonly ocorrerá, disparando exceção activerecord::readonlyrecord. como customer explicitamente configurado objeto readonly, código acima disparando exceção activerecord::readonlyrecord chamar client.save valor atualizado visits. bloqueio útil prevenir condições corrida alterar registros banco dados garantir alterações atômicas. active record provê dois mecanismos bloqueio:"},{"id":764,"title":"Interface de Consulta do Active Record","heading":"12 Bloqueando registros para alteração","subheading":"12.1 Bloqueio Otimista","content":"bloqueio otimista permite múltiplos usuários acessem mesmo registro edição presume mínimo conflitos dados. isto feito verificando outro processo mudanças registro desde aberto. exceção activerecord::staleobjecterror disparada isso ocorreu alteração ignorada. coluna bloqueio otimista usar bloqueio otimista, tabela precisa coluna chamada lock_version tipo inteiro. cada registro alterado, active record incrementa valor coluna lock_version. requisição alteração feita valor menor campo lock_version valor está atualmente coluna lock_version banco dados, requisição alteração falhará activerecord::staleobjecterror. exemplo: você fica então responsável lidar conflito tratando exceção desfazendo alterações, agrupando-as aplicando lógica negócio necessária resolver conflito. este comportamento pode desativado definindo activerecord::base.lock_optimistically false. usar outro nome coluna lock_version, activerecord::base oferece atributo classe chamado locking_column:"},{"id":765,"title":"Interface de Consulta do Active Record","heading":"12 Bloqueando registros para alteração","subheading":"12.2 Bloqueio pessimista","content":"bloqueio pessimista mecansimo bloqueio fornecido pelo banco dados subjacente. usar lock quando relation (objeto tipo activerecord::relation) criada, obtém-se bloqueio exclusivo linhas selecionadas. relations usando lock normalmente executadas dentro transação permitir condições deadlock. exemplo: sessão acima produz seguinte banco dados mysql: você também pode passar diretamente método lock permitir diferentes tipos bloqueio. exemplo, mysql expressão chamada lock share mode permite bloquear registro ainda assim permitir outras consultas leiam. especificar esta expressão, basta passá-la método lock: você instância modelo, você pode iniciar transação obter bloqueio usando código seguinte: active record fornece dois métodos busca especificar cláusulas join resultante: joins left_outer_joins. enquanto joins deve utilizado inner join consultas personalizadas, left_outer_joins usado consultas usando left outer join."},{"id":766,"title":"Interface de Consulta do Active Record","heading":"13 Associando Tabelas","subheading":"13.1 joins","content":"múltiplas maneiras usar método joins. você pode apenas fornecer literal especificando cláusula join joins: isso resultará seguinte sql: active record permite você nomes associações definidos model como atalho especificar cláusulas join essas associações quando estiver usando método joins. todas seguintes irão produzir query join usando inner join: isso produz: português: \"retorne objeto book todos livros avalições\". observe você verá livros duplicados livro tiver mais avalição. você quiser livros únicos, pode usar book.joins(:reviews).distinct. isso produz: português: \"retorne todos livros autor mínimo avalição\". observe novamente livros múltiplas avalições aparecerão múltiplas vezes. isso produz: português: \"retorne todos livros avaliações cliente\". isso produz: português: \"retorne todas autores livros avalições pedidos clientes, fornecedores esses livros.\" você pode especificar condições tabelas associadas condições array string. hash conditions fornecem sintaxe especial especificar condições tabelas associadas: isso encontrará todos clientes pedidos criados ontem, usando expressão between comparar created_at. sintaxe alternativa mais limpa aninhar condições hash: condições mais avançadas reutilizar escopo nomeado existente, relation#merge pode usado. primeiro, vamos adicionar novo escopo nomeado modelo order: agora podemos usar relation#merge juntar escopo created_in_time_range: isso encontrará todos clientes pedidos criados ontem, novamente usando expressão between."},{"id":767,"title":"Interface de Consulta do Active Record","heading":"13 Associando Tabelas","subheading":"13.2 left_outer_joins","content":"você deseja selecionar conjunto registros tendo registros associados, você pode usar método left_outer_joins. resulta significa: \"retorne todos clientes suas contagens avaliações, tenham eles avaliações não\" eager loading rápido mecanismo carregar registros associados objetos retornados model.find usando mínimo consultas possível. problema consultas considere seguinte código, encontra livros imprime último nome seus autores: este código parece primeira vista. problema está número total consultas executadas. código acima executa (para encontrar livros) cada livro carregar autor) consultas total. solução problemas consultas active record permite você especifique antecedência todas associações serão carregadas. isso possível especificando método includes chamada model.find. includes, active record garante todas associações especificadas sejam carregadas usando número mínimo possível consultas. métodos são:"},{"id":768,"title":"Interface de Consulta do Active Record","heading":"14 Associations com Eager Loading","subheading":"14.1 includes","content":"includes, active record garante todas associações especificadas sejam carregadas usando número mínimo possível consultas. revisitando caso acima, usando método includes, poderíamos reescrever book.limit(10) carregamento antecipado autores: código acima executará apenas consultas, oposição consultas caso anterior: active record permite você carregue rapidamente qualquer número associações única chamada model.find usando array, hash, hash aninhado array hash método includes. isso carrega todos clientes pedidos avaliações associados. isso encontrará cliente carregará antecipadamente todos pedidos associados, livros aqueles pedidos autores fornecedores cada livros. mesmo active record permita você especifique condições associações carregadas antecipadamente como joins, maneira recomendada usar joins invés. entanto, você deve fazer isso, você pode usar where como faria normalmente. isso geraria consulta contém left outer join enquanto método joins geraria usando função inner join. houvesse condição where, isso geraria conjunto normal duas consultas. nota: usar where assim funcionará quando você passar hash. fragmentos você precisa usar references forçar tabelas unidas: caso desta consulta includes, houver livros qualquer autor, todos autores ainda seriam carregados. usando joins inner join), condições junção devem corresponder, caso contrário, nenhum registro será devolvido."},{"id":769,"title":"Interface de Consulta do Active Record","heading":"14 Associations com Eager Loading","subheading":"14.2 preload","content":"preload, active record garante seja carregado usando consulta cada associação especificada. revisitando caso ocorreu usando método preload, poderíamos reescrever book.limit(10) autores: código acima executará apenas consultas, contrário consultas caso anterior:"},{"id":770,"title":"Interface de Consulta do Active Record","heading":"14 Associations com Eager Loading","subheading":"14.3 eager_load","content":"eager_load, active record garante force carregamento antecipado usando left outer join todas associações especificadas. revisitando caso ocorreu usando método eager_load, poderíamos reescrever book.limit(10) autores: código acima executará apenas consultas, contrário consultas caso anterior: definição escopo permite você especifique consultas comumente usadas, podem referenciadas como chamadas método objetos modelos associados. esses escopos, você pode usar todos métodos cobertos anteriormente, como where, joins includes. todos corpos escopo devem retornar activerecord::relation permitir métodos adicionais (como outros escopos) sejam chamados nele. definir escopo simples, usamos método scope dentro classe, passando consulta gostaríamos executar quando este escopo chamado: chamar este escopo out_of_print podemos chama-lo tanto classe: numa associação consistida objetos book: escopos também podem encadeados dentro escopos:"},{"id":771,"title":"Interface de Consulta do Active Record","heading":"15 Scopes","subheading":"15.1 Transmitindo argumentos","content":"escopo pode receber argumentos: chame escopo como fosse método classe: entanto, isso apenas duplicação funcionalidade seria fornecida você método classe. esses métodos ainda estarão acessíveis objetos associação:"},{"id":772,"title":"Interface de Consulta do Active Record","heading":"15 Scopes","subheading":"15.2 Usando condicionais","content":"escopo pode utilizar condicionais: como outros exemplos, isso comportará maneira semelhante método classe. entanto, advertência importante: escopo sempre retornará objeto activerecord::relation, mesmo condicional avaliada como false, enquanto método classe retornará nil. isso pode causar nomethoderror encadear métodos classe condicionais, qualquer condicionais retornar false."},{"id":773,"title":"Interface de Consulta do Active Record","heading":"15 Scopes","subheading":"15.3 Aplicando um escopo padrão","content":"desejarmos escopo seja aplicado todas consultas model, podemos usar método default_scope dentro próprio model. quando consultas executadas neste model, consulta agora será semelhante isto: você precisa fazer coisas mais complexas escopo padrão, você pode alternativamente defini-lo como método classe: esteja ciente que, quando fornecido formato array, argumentos consulta default_scope pode convertido hash atribuição atributo padrão. e.g.:"},{"id":774,"title":"Interface de Consulta do Active Record","heading":"15 Scopes","subheading":"15.4 Mesclagem de escopos","content":"assim como escopos cláusulas where mesclados usando condições and. podemos misturar combinar condições scope where final terá todas condições unidas and. quisermos última cláusula where vença, então merge pode usado. advertência importante default_scope será anexado condições scope where. como você pode acima, default_scope está sendo mesclado ambos condições scope where."},{"id":775,"title":"Interface de Consulta do Active Record","heading":"15 Scopes","subheading":"15.5 Removendo todo o escopo","content":"desejarmos remover escopo qualquer motivo, podemos usar método unscoped. isto especialmente útil default_scope especificado model deve aplicado esta consulta particular. este método remove todo escopo fará consulta normal tabela. unscoped também pode aceitar bloco: cada campo (também conhecido como atributo) você define tabela, active record fornece método localizador. você tiver campo chamado first_name model customer exemplo, você terá graça método find_by_first_name fornecido pelo active record. você tiver campo locked model customer, você também receberá método find_by_locked. você pode especificar ponto exclamação final localizador dinâmico levante erro activerecord::recordnotfound caso seja retornado nenhum registro, exemplo customer.find_by_name!(\"ryan\") você deseja localizar name locked, você pode encadear esses localizadores juntos simplesmente digitando \"and\" entre campos. exemplo, customer.find_by_first_name_and_locked(\"ryan\", true). enum permite você defina array valores atributo refira eles pelo nome. valor presente banco dados inteiro mapeado valores. declarar enum irá: todos possíveis valores enum. exemplo, dada essa declaração enum: esses scopes criados automaticamente podem usados todos objetos valor específico status: esses métodos instância criados automaticamente consultam model esse valor enum status: esses métodos instância criados automaticamente atualizarão primeiro valor status valor nomeado seguida, consultar status definido sucesso valor: documentação completa sobre enums pode encontrada aqui. active record implementa padrão encadeamento métodos (method chaining) permite usar vários métodos active record juntos maneira simples direta. você pode encadear métodos numa sentença quando método chamado anteriormente retorna activerecord::relation, como all, where joins. métodos retornam único objeto (veja seção retornando único objeto) devem estar sentença. alguns exemplos abaixo. esse guia mostrar todas possibilidades, alguns exemplos. quando método active record chamado, consulta imediatamente gerada enviada banco dados. query enviada quando você precisa dados. então cada exemplo abaixo gera única consulta."},{"id":776,"title":"Interface de Consulta do Active Record","heading":"18 Entendendo Encadeamento de Métodos","subheading":"18.1 Buscando dados filtrados de múltiplas tabelas","content":"resultado deve algo parecido isso:"},{"id":777,"title":"Interface de Consulta do Active Record","heading":"18 Entendendo Encadeamento de Métodos","subheading":"18.2 Buscando dados específicos de múltiplas tabelas","content":"comando acima deve gerar: comum você precise localizar registro criá-lo existir. você pode fazer isso métodos find_or_create_by find_or_create_by!."},{"id":778,"title":"Interface de Consulta do Active Record","heading":"19 Encontrando ou Construindo um Novo Objeto","subheading":"19.1 find_or_create_by","content":"método find_or_create_by verifica existe registro atributos especificados. não, então create chamado. vejamos exemplo. suponha você queira encontrar cliente chamado 'andy' houver nenhum, crie você pode fazer isso executando: gerado esse método parece isso: find_or_create_by retorna registro existe novo registro. nosso caso, ainda tínhamos cliente chamado andy, então registro criado retornado. novo registro pode salvo banco dados; isso depende validações foram aprovadas (assim como create). suponha queremos definir atributo 'bloqueado (locked)' false estamos criando novo registro, queremos incluí-lo consulta. então queremos encontrar cliente chamado \"andy\", esse cliente existir, crie cliente chamado \"andy\" esteja bloqueado. podemos conseguir isso duas maneiras. primeira usar create_with: segunda maneira usar bloco: bloco será executado cliente estiver sendo criado. segunda rodarmos este código, todo bloco será ignorado."},{"id":779,"title":"Interface de Consulta do Active Record","heading":"19 Encontrando ou Construindo um Novo Objeto","subheading":"19.2 find_or_create_by!","content":"você também pode usar find_or_create_by! disparar exceção novo registro inválido. validações abordadas neste guia, vamos supor momento você adiciona temporariamente model customer. você tentar criar novo customer passar orders_count, registro será inválido exceção será disparada:"},{"id":780,"title":"Interface de Consulta do Active Record","heading":"19 Encontrando ou Construindo um Novo Objeto","subheading":"19.3 find_or_initialize_by","content":"método find_or_initialize_by funcionará como find_or_create_by chamará invés create. isso significa nova instância model será criada memória, será salva banco dados. continuando exemplo find_or_create_by, agora queremos cliente chamado 'nick': como objeto ainda está armazenado banco dados, gerado seguinte aparência: quando você quiser salvar banco, apenas chame save: você quiser usar próprio encontrar registros tabela você pode usar find_by_sql. método find_by_sql retornar array objetos mesmo consulta subjacente retorne apenas único registro. exemplo, você poderia rodar consulta: find_by_sql fornece forma simples fazer chamadas personalizadas banco dados recuperar objetos instanciados."},{"id":781,"title":"Interface de Consulta do Active Record","heading":"20 Encontrando por SQL","subheading":"20.1 select_all","content":"find_by_sql parente próximo chamado connection.select_all. select_all recuperar objetos banco dados usando personalizado como find_by_sql, instanciá-los. esse método retornar instância classe activerecord::result chamar to_a neste objeto retornaria array hashes, onde cada hash indica registro."},{"id":782,"title":"Interface de Consulta do Active Record","heading":"20 Encontrando por SQL","subheading":"20.2 pluck","content":"pluck pode usado consultar múltiplas colunas tabela model. aceita lista nomes colunas como argumento retorna array valores colunas especificadas tipo dado correspondente. pluck possibilita substituir código como: com: diferentemente select, pluck converte diretamente resultados banco dados array ruby, construir objetos activerecord. isso pode significar melhor performance consultas grandes frequentemente rodadas. entanto, qualquer método model sobrescrito estará disponível. exemplo: suas buscas ficam limitadas campos única tabela, você também pode consultar múltiplas tabelas. além disso, diferente select outros escopos relation, pluck desencadeia consulta imediata, portanto pode encadeado outros escopos, apesar poder funcionar escopos construídos anteriormente. maneira evitar isso usar unscope includes:"},{"id":783,"title":"Interface de Consulta do Active Record","heading":"20 Encontrando por SQL","subheading":"20.3 ids","content":"pode usado obter todos relação usando chave primária tabela. você simplesmente quer checar existência objeto, existe método chamado exists?. este método consultar banco dados usando mesma consulta find, invés retornar objeto coleção objetos, retornar true false. método exists? também assume valores múltiplos, problema retornará true algum desses registros existirem. possível usar exists? algum argumento model relação. código acima retorna true existir menos cliente first_name 'ryan' false caso exista. código acima retorna false tabela customers estiver vazia true caso esteja. você também pode usar any? many? verificar existência model relação. many? usar count determinar item existe. essa seção count como exemplo método nessa introdução, opções descritas aplicam todas subseções. todos métodos cálculo funcionam diretamente model: relação: você também pode utilizar vários métodos busca relação fazer cálculos complexos: executar: assumindo classe order tenha enum status: :shipped, :being_packed, :cancelled"},{"id":784,"title":"Interface de Consulta do Active Record","heading":"22 Cálculos","subheading":"22.1 Contar (count)","content":"você quiser saber quantos registros estão tabela model você pode chamar customer.count isso retornar número. você quiser mais específico encontrar todos clientes idade presente banco dados, você pode utilizar customer.count(:age) mais opções, veja seção pai, cálculos."},{"id":785,"title":"Interface de Consulta do Active Record","heading":"22 Cálculos","subheading":"22.2 Média (average)","content":"você quiser saber média certo número suas tabelas, você pode chamar método average classe relaciona essa tabela. essa chamada método parecer desse jeito: isso retornar número (possivelmente número ponto flutuante como 3.14159265) representando valor médio desse campo. mais opções, veja seção pai, cálculos."},{"id":786,"title":"Interface de Consulta do Active Record","heading":"22 Cálculos","subheading":"22.3 Mínimo (minimum)","content":"você quiser encontrar valor mínimo campo tabela, você pode chamar método minimum classe relaciona tabela. essa chamada método parecer desse jeito: mais opções, veja seção pai, cálculos."},{"id":787,"title":"Interface de Consulta do Active Record","heading":"22 Cálculos","subheading":"22.4 Máximo (maximum)","content":"você quiser encontrar valor máximo campo tabela, você pode chamar método maximum classe relaciona tabela. essa chamada método parecer desse jeito: mais opções, veja seção pai, cálculos."},{"id":788,"title":"Interface de Consulta do Active Record","heading":"22 Cálculos","subheading":"22.5 Soma (sum)","content":"você quiser encontrar soma todos registros tabela, você pode chamar método classe relaciona tabela. essa chamada método parecer desse jeito: mais opções, veja seção pai, cálculos. você pode executar explain queries disparadas relações. retorno explain varia entre banco dados. exemplo, executar pode produzir mysql mariadb. active record exibe impressão simula shell banco dados correspondente. então, mesma query sendo executada quando usado adaptador postgresql poderá produzir seguinte: eager loading pode disparar mais query debaixo panos, algumas queries podem necessitar resultados prévios. causa disso, explain verdade executa query somente depois solicita query planeja. exemplo, produz isso mysql mariadb. isso postgresql:"},{"id":789,"title":"Interface de Consulta do Active Record","heading":"23 Executando o EXPLAIN","subheading":"23.1 Interpretando o EXPLAIN","content":"interpretação saída explain está além escopo deste guia. links seguir podem servir ajuda: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":790,"title":"Ruby on Rails 4.2 Release Notes","heading":"1 Upgrading to Rails 4.2","subheading":"1 Upgrading to Rails 4.2","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting upgrade rails 4.2. list things watch when upgrading available guide upgrading ruby rails."},{"id":791,"title":"Ruby on Rails 4.2 Release Notes","heading":"2 Major Features","subheading":"2.1 Active Job","content":"active framework rails 4.2. common interface queuing systems like resque, delayed job, sidekiq, more. jobs written with active supported queues thanks their respective adapters. active comes pre-configured with inline runner that executes jobs right away. jobs often need take active record objects arguments. active passes object references uris (uniform resource identifiers) instead marshalling object itself. global library builds uris looks objects they reference. passing active record objects arguments just works using global internally. example, trashable active record object, then this runs just fine with serialization involved: active basics guide more information."},{"id":792,"title":"Ruby on Rails 4.2 Release Notes","heading":"2 Major Features","subheading":"2.2 Asynchronous Mails","content":"building active job, action mailer comes with deliver_later method that sends emails queue, doesn't block controller model queue asynchronous (the default inline queue blocks). sending emails right away still possible with deliver_now."},{"id":793,"title":"Ruby on Rails 4.2 Release Notes","heading":"2 Major Features","subheading":"2.3 Adequate Record","content":"adequate record performance improvements active record that makes common find find_by calls some association queries faster. works caching common queries prepared statements reusing them similar calls, skipping most query-generation work subsequent calls. more details, please refer aaron patterson's blog post. active record will automatically take advantage this feature supported operations without user involvement code changes. here some examples supported operations: it's important highlight that, examples above suggest, prepared statements cache values passed method calls; rather, they have placeholders them. caching used following scenarios:"},{"id":794,"title":"Ruby on Rails 4.2 Release Notes","heading":"2 Major Features","subheading":"2.4 Web Console","content":"applications generated with rails come with console default. console adds interactive ruby console every error page provides console view controller helpers. interactive console error pages lets execute code context place where exception originated. console helper, called anywhere view controller, launches interactive console with final context, once rendering completed."},{"id":795,"title":"Ruby on Rails 4.2 Release Notes","heading":"2 Major Features","subheading":"2.5 Foreign Key Support","content":"migration supports adding removing foreign keys. they dumped schema.rb well. this time, only mysql, mysql2 postgresql adapters support foreign keys. documentation add_foreign_key remove_foreign_key full description. previously deprecated functionality been removed. please refer individual components deprecations this release. following changes require immediate action upon upgrade."},{"id":796,"title":"Ruby on Rails 4.2 Release Notes","heading":"3 Incompatibilities","subheading":"3.1 render with a String Argument","content":"previously, calling render \"foo/bar\" controller action equivalent render file: \"foo/bar\". rails 4.2, this been changed mean render template: \"foo/bar\" instead. need render file, please change your code explicit form (render file: \"foo/bar\") instead."},{"id":797,"title":"Ruby on Rails 4.2 Release Notes","heading":"3 Incompatibilities","subheading":"3.2 respond_with / Class-Level respond_to","content":"respond_with corresponding class-level respond_to have been moved responders gem. 'responders', 2.0' your gemfile instance-level respond_to unaffected:"},{"id":798,"title":"Ruby on Rails 4.2 Release Notes","heading":"3 Incompatibilities","subheading":"3.3 Default Host for rails server","content":"change rack, rails server listens localhost instead 0.0.0.0 default. this should have minimal impact standard development workflow both http://127.0.0.1:3000 http://localhost:3000 will continue work before your machine. however, with this change will longer able access rails server from different machine, example your development environment virtual machine would like access from host machine. such cases, please start server with rails server 0.0.0.0 restore behavior. this, sure configure your firewall properly such that only trusted machines your network access your development server."},{"id":799,"title":"Ruby on Rails 4.2 Release Notes","heading":"3 Incompatibilities","subheading":"3.4 Changed status option symbols for render","content":"change rack, symbols that render method accepts :status option have changed: keep mind that calling render with unknown symbol, response status will default"},{"id":800,"title":"Ruby on Rails 4.2 Release Notes","heading":"3 Incompatibilities","subheading":"3.5 HTML Sanitizer","content":"html sanitizer been replaced with new, more robust, implementation built upon loofah nokogiri. sanitizer more secure sanitization more powerful flexible. algorithm, sanitized output different certain pathological inputs. have particular need exact output sanitizer, rails-deprecated_sanitizer gemfile, have behavior. does issue deprecation warnings because opt-in. rails-deprecated_sanitizer will supported rails only; will maintained rails 5.0. this blog post more details changes sanitizer."},{"id":801,"title":"Ruby on Rails 4.2 Release Notes","heading":"3 Incompatibilities","subheading":"3.6 assert_select","content":"assert_select based nokogiri. result, some previously-valid selectors unsupported. your application using these spellings, will need update them: furthermore substitutions have changed syntax. have :match css-like selector: additionally regexp substitutions look different when assertion fails. notice /hello/ here: becomes \"(?-mix:hello)\": rails testing documentation more assert_select. please refer changelog detailed changes."},{"id":802,"title":"Ruby on Rails 4.2 Release Notes","heading":"4 Railties","subheading":"4.1 Removals","content":""},{"id":803,"title":"Ruby on Rails 4.2 Release Notes","heading":"4 Railties","subheading":"4.2 Deprecations","content":""},{"id":804,"title":"Ruby on Rails 4.2 Release Notes","heading":"4 Railties","subheading":"4.3 Notable changes","content":"please refer changelog detailed changes."},{"id":805,"title":"Ruby on Rails 4.2 Release Notes","heading":"5 Action Pack","subheading":"5.1 Removals","content":""},{"id":806,"title":"Ruby on Rails 4.2 Release Notes","heading":"5 Action Pack","subheading":"5.2 Deprecations","content":""},{"id":807,"title":"Ruby on Rails 4.2 Release Notes","heading":"5 Action Pack","subheading":"5.3 Notable changes","content":"please refer changelog detailed changes."},{"id":808,"title":"Ruby on Rails 4.2 Release Notes","heading":"6 Action View","subheading":"6.1 Deprecations","content":""},{"id":809,"title":"Ruby on Rails 4.2 Release Notes","heading":"6 Action View","subheading":"6.2 Notable changes","content":"please refer changelog detailed changes."},{"id":810,"title":"Ruby on Rails 4.2 Release Notes","heading":"7 Action Mailer","subheading":"7.1 Deprecations","content":""},{"id":811,"title":"Ruby on Rails 4.2 Release Notes","heading":"7 Action Mailer","subheading":"7.2 Notable changes","content":"please refer changelog detailed changes."},{"id":812,"title":"Ruby on Rails 4.2 Release Notes","heading":"8 Active Record","subheading":"8.1 Removals","content":""},{"id":813,"title":"Ruby on Rails 4.2 Release Notes","heading":"8 Active Record","subheading":"8.2 Deprecations","content":""},{"id":814,"title":"Ruby on Rails 4.2 Release Notes","heading":"8 Active Record","subheading":"8.3 Notable changes","content":"please refer changelog detailed changes."},{"id":815,"title":"Ruby on Rails 4.2 Release Notes","heading":"9 Active Model","subheading":"9.1 Removals","content":""},{"id":816,"title":"Ruby on Rails 4.2 Release Notes","heading":"9 Active Model","subheading":"9.2 Deprecations","content":""},{"id":817,"title":"Ruby on Rails 4.2 Release Notes","heading":"9 Active Model","subheading":"9.3 Notable changes","content":"please refer changelog detailed changes."},{"id":818,"title":"Ruby on Rails 4.2 Release Notes","heading":"10 Active Support","subheading":"10.1 Removals","content":""},{"id":819,"title":"Ruby on Rails 4.2 Release Notes","heading":"10 Active Support","subheading":"10.2 Deprecations","content":""},{"id":820,"title":"Ruby on Rails 4.2 Release Notes","heading":"10 Active Support","subheading":"10.3 Notable changes","content":"full list contributors rails many people spent many hours making rails stable robust framework today. kudos them. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":821,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"1 First Contact","subheading":"1 First Contact","content":"when create application using rails command, fact using rails generator. after that, list available generators just invoking bin/rails generate: will list generators that come with rails. need detailed description helper generator, example, simply since rails 3.0, generators built thor. thor provides powerful options parsing great manipulating files. instance, let's build generator that creates initializer file named initializer.rb inside config/initializers. first step create file lib/generators/initializer_generator.rb with following content: generator quite simple: inherits from rails::generators::base method definition. when generator invoked, each public method generator executed sequentially order that defined. finally, invoke create_file method that will create file given destination with given content. familiar with rails application templates api, you'll feel right home with generators api. invoke generator, just need before let's brand generator description: rails usually able generate good descriptions generator namespaced, activerecord::generators::modelgenerator, this particular case. solve this problem ways. first calling desc inside generator: description invoking --help generator. second description creating file named usage same directory generator. going that next step. generators themselves have generator: this generator just created: first, notice that inheriting from rails::generators::namedbase instead rails::generators::base. this means that generator expects least argument, which will name initializer, will available code variable name. that invoking description this generator (don't forget delete generator file): also that generator class method called source_root. this method points where generator templates will placed, any, default points created directory lib/generators/initializer/templates. order understand what generator template means, let's create file lib/generators/initializer/templates/initializer.rb with following content: let's change generator copy this template when invoked: let's execute generator: that initializer named core_extensions created config/initializers/core_extensions.rb with contents template. that means that copy_file copied file source root destination path gave. method file_name automatically created when inherit from rails::generators::namedbase. methods that available generators covered final section this guide. when bin/rails generate initializer core_extensions rails requires these files turn until found: none found error message. rails generators flexible enough customize scaffolding. they configured config/application.rb, these some defaults: before customize workflow, let's first what scaffold looks like: looking this output, it's easy understand generators work rails above. scaffold generator doesn't actually generate anything, just invokes others work. this allows add/replace/remove those invocations. instance, scaffold generator invokes scaffold_controller generator, which invokes erb, test_unit helper generators. since each generator single responsibility, they easy reuse, avoiding code duplication. next customization workflow will stop generating stylesheet test fixture files scaffolds altogether. achieve that changing configuration following: generate another resource with scaffold generator, that stylesheet, javascript, fixture files created anymore. want customize further, example datamapper rspec instead active record testunit, it's just matter adding their gems your application configuring your generators. demonstrate this, going create helper generator that simply adds some instance variable readers. first, create generator within rails namespace, this where rails searches generators used hooks: after that, delete both templates directory source_root class method call from generator, because going need them. method below, generator looks like following: generator creating helper products: will generate following helper file app/helpers: which what expected. tell scaffold helper generator editing config/application.rb once again: action when invoking generator: notice output that helper invoked instead rails default. however thing missing, which tests generator that, going reuse helpers test generators. since rails 3.0, this easy hooks concept. helper does need focused specific test framework, simply provide hook test framework just needs implement this hook order compatible. that, change generator this way: now, when helper generator invoked testunit configured test framework, will invoke both rails::testunitgenerator testunit::myhelpergenerator. since none those defined, tell generator invoke testunit::generators::helpergenerator instead, which defined since it's rails generator. that, just need add: re-run scaffold another resource generating tests well! step above simply wanted line generated helper, without adding extra functionality. there simpler that, it's replacing templates already existing generators, that case rails::generators::helpergenerator. rails above, generators don't just look source root templates, they also search templates other paths. them lib/templates. since want customize rails::generators::helpergenerator, that simply making template copy inside lib/templates/rails/helper with name helper.rb. let's create that file with following content: revert last change config/application.rb: generate another resource, that exactly same result! this useful want customize your scaffold templates and/or layout just creating edit.html.erb, index.html.erb inside lib/templates/erb/scaffold. scaffold templates rails frequently tags; these tags need escaped that generated output valid code. example, following escaped would needed template (note extra %)... ...to generate following output: last feature about generators which quite useful plugin generators fallbacks. example, imagine that want feature testunit like shoulda does. since testunit already implements generators required rails shoulda just wants overwrite part there need shoulda reimplement some generators again, simply tell rails testunit generator none found under shoulda namespace. easily simulate this behavior changing config/application.rb once again: now, create comment scaffold, will that shoulda generators being invoked, end, they just falling back testunit generators: fallbacks allow your generators have single responsibility, increasing code reuse reducing amount duplication. that you've seen generators used inside application, know they also used generate applications too? this kind generator referred \"template\". this brief overview templates api. detailed documentation rails application templates guide. above template specify that application relies rspec-rails cucumber-rails these will added test group gemfile. then pose question user about whether they would like install devise. user replies \"yes\" this question, then template will devise gemfile outside group then runs devise:install generator. this template then takes users input runs devise generator, with user's answer from last question being passed this generator. imagine that this template file called template.rb. modify outcome rails command using option passing filename: this command will generate thud application, then apply template generated output. templates don't have stored local system, option also supports online templates: whilst final section this guide doesn't cover generate most awesome template known man, will take through methods available your disposal that develop yourself. these same methods also available generators. rails generators easily modified accept custom command line arguments. this functionality comes from thor: generator invoked follows: command line arguments accessed through options method inside generator class. e.g: following methods available both generators templates rails."},{"id":822,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.1 gem","content":"specifies dependency application. available options are: additional options passed this method line: above code will following line into gemfile:"},{"id":823,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.2 gem_group","content":"wraps entries inside group:"},{"id":824,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.3 add_source","content":"adds specified source gemfile: this method also takes block:"},{"id":825,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.4 inject_into_file","content":"injects block code into defined position your file."},{"id":826,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.5 gsub_file","content":"replaces text inside file. regular expressions used make this method more precise. also append_file prepend_file same place code beginning file respectively."},{"id":827,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.6 application","content":"adds line config/application.rb directly after application class definition. this method also take block: available options are:"},{"id":828,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.7 git","content":"runs specified command: values hash here being arguments options passed specific command. final example shown here, multiple commands specified time, order their running guaranteed same order that they were specified"},{"id":829,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.8 vendor","content":"places file into vendor which contains specified code. this method also takes block:"},{"id":830,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.9 lib","content":"places file into which contains specified code. this method also takes block:"},{"id":831,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.10 rakefile","content":"creates rake file lib/tasks directory application. this method also takes block:"},{"id":832,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.11 initializer","content":"creates initializer config/initializers directory application: this method also takes block, expected return string:"},{"id":833,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.12 generate","content":"runs specified generator where first argument generator name remaining arguments passed directly generator."},{"id":834,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.13 rake","content":"runs specified rake task. available options are:"},{"id":835,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.14 route","content":"adds text config/routes.rb file:"},{"id":836,"title":"Criando e Personalizando Geradores Rails e Templates","heading":"10 Generator methods","subheading":"10.15 readme","content":"output contents file template's source_path, usually readme. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":837,"title":"Orientações para Documentação de API","heading":"1 RDoc","subheading":"1 RDoc","content":"documentação rails gerada rdoc. gerá-la, certifique-se você está diretório raiz rails, execute bundle install seguida: arquivos html gerados podem encontrados diretório ./doc/rdoc. favor consulte documentação rdoc ajuda marcação, leve consideração esses direcionamentos adicionais. rails documentation meant viewed github therefore links should rdoc link markup relative current api. this differences between github markdown generated rdoc that published api.rubyonrails.org edgeapi.rubyonrails.org. example, [link:classes/activerecord/base.html] create link activerecord::base class generated rdoc. this preferred over absolute urls such [https://api.rubyonrails.org/classes/activerecord/base.html], which would take reader outside their current documentation version (e.g. edgeapi.rubyonrails.org). write simple, declarative sentences. brevity plus: point. write present tense: \"returns hash that...\", rather than \"returned hash that...\" \"will return hash that...\". start comments upper case. follow regular punctuation rules: communicate reader current doing things, both explicitly implicitly. idioms recommended edge. reorder sections emphasize favored approaches needed, etc. documentation should model best practices canonical, modern rails usage. documentation concise comprehensive. explore document edge cases. what happens module anonymous? what collection empty? what argument nil? proper names rails components have space between words, like \"active support\". activerecord ruby module, whereas active record orm. rails documentation should consistently refer rails components their proper name, your next blog post presentation remember this tidbit take into account that'd phenomenal. spell names correctly: arel, minitest, rspec, html, mysql, javascript, erb. when doubt, please have look some authoritative source like their official documentation. article \"an\" \"sql\", statement\". also sqlite database\". prefer wordings that avoid \"you\"s \"your\"s. example, instead this style: that said, when using pronouns reference hypothetical person, such user with session cookie\", gender neutral pronouns (they/their/them) should used. instead please american english (color, center, modularize, etc). list american british english spelling differences here. please oxford comma (\"red, white, blue\", instead \"red, white blue\"). choose meaningful examples that depict cover basics well interesting points gotchas. spaces indent chunks code--that markup purposes, spaces with respect left margin. examples themselves should rails coding conventions. short docs need explicit \"examples\" label introduce snippets; they just follow paragraphs: other hand, chunks structured documentation have separate \"examples\" section: results expressions follow them introduced vertically aligned: line long, comment placed next line: avoid using printing methods like puts that purpose. other hand, regular comments arrow: predicates flags prefer documenting boolean semantics over exact values. when \"true\" \"false\" used defined ruby regular font. singletons true false need fixed-width font. please avoid terms like \"truthy\", ruby defines what true false language, thus those words have technical meaning need substitutes. rule thumb, document singletons unless absolutely necessary. that prevents artificial constructs like ternaries, allows refactors, code does need rely exact values returned methods being called implementation. example: user does need know which actual default value flag, only document boolean semantics. example with predicate: careful commit particular value, method predicate semantics, that's enough. rule thumb, filenames relative application root:"},{"id":838,"title":"Orientações para Documentação de API","heading":"9 Fonts","subheading":"9.1 Fixed-width Font","content":"fixed-width fonts for: quickly test rdoc output with following command:"},{"id":839,"title":"Orientações para Documentação de API","heading":"9 Fonts","subheading":"9.2 Regular Font","content":"when \"true\" \"false\" english words rather than ruby keywords regular font: lists options, parameters, etc. hyphen between item description (reads better than colon because normally options symbols): description starts upper case ends with full stop-it's standard english. methods created with (module|class)_eval(string) have comment their side with instance generated code. that comment spaces away from template: resulting lines wide, columns more, comment above call: when writing documentation rails, it's important understand difference between public user-facing internal api. rails, like most libraries, uses private keyword from ruby defining internal api. however, public follows slightly different convention. instead assuming public methods designed user consumption, rails uses :nodoc: directive annotate these kinds methods internal api. this means that there methods rails with public visibility that aren't meant user consumption. example this activerecord::core::classmethods#arel_table: thought, \"this method looks like public class method activerecord::core\", were right. actually rails team doesn't want users rely this method. they mark :nodoc: it's removed from public documentation. reasoning behind this allow team change these methods according their internal needs across releases they fit. name this method could change, return value, this entire class disappear; there's guarantee shouldn't depend this your plugins applications. otherwise, risk your breaking when upgrade newer release rails. contributor, it's important think about whether this meant end-user consumption. rails team committed making breaking changes public across releases without going through full deprecation cycle. it's recommended that :nodoc: your internal methods/classes unless they're already private (meaning visibility), which case it's internal default. once stabilizes visibility change, changing public much harder backwards compatibility. class module marked with :nodoc: indicate that methods internal should never used directly. summarize, rails team uses :nodoc: mark publicly visible methods classes internal use; changes visibility should considered carefully discussed over pull request first. when documenting parts rails api, it's important remember pieces that into rails stack. this means that behavior change depending scope context method class you're trying document. various places there different behavior when take entire stack into account, such example actionview::helpers::assettaghelper#image_tag: although default behavior #image_tag always return /images/icon.png, take into account full rails stack (including asset pipeline) result seen above. we're only concerned with behavior experienced when using full default rails stack. this case, want document behavior framework, just this specific method. have question rails team handles certain api, don't hesitate open ticket send patch issue tracker. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":840,"title":"The Rails Initialization Process","heading":null,"subheading":null,"content":"this guide goes through every method call that required boot ruby rails stack default rails application, explaining each part detail along way. this guide, will focusing what happens when execute bin/rails server boot your app. let's start boot initialize app. rails application usually started running bin/rails console bin/rails server."},{"id":841,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.1 bin/rails","content":"this file follows: app_path constant will used later rails/commands. config/boot file referenced here config/boot.rb file application which responsible loading bundler setting"},{"id":842,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.2 config/boot.rb","content":"config/boot.rb contains: standard rails application, there's gemfile which declares dependencies application. config/boot.rb sets env['bundle_gemfile'] location this file. gemfile exists, then bundler/setup required. require used bundler configure load path your gemfile's dependencies. standard rails application depends several gems, specifically:"},{"id":843,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.3 rails/commands.rb","content":"once config/boot.rb finished, next file that required rails/commands, which helps expanding aliases. current case, argv array simply contains server which will passed over: used rather than server, rails would have used aliases defined here find matching command."},{"id":844,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.4 rails/command.rb","content":"when types rails command, invoke tries lookup command given namespace executes command found. rails doesn't recognize command, hands reins over rake task same name. shown, rails::command displays help output automatically namespace empty. with server command, rails will further following code: this file will change into rails root directory path directories from app_path which points config/application.rb), only config.ru file isn't found. this then starts rails::server class."},{"id":845,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.5 actionpack/lib/action_dispatch.rb","content":"action dispatch routing component rails framework. adds functionality like routing, session, common middlewares."},{"id":846,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.6 rails/commands/server/server_command.rb","content":"rails::server class defined this file inheriting from rack::server. when rails::server.new called, this calls initialize method rails/commands/server/server_command.rb: firstly, super called which calls initialize method rack::server."},{"id":847,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.7 Rack: lib/rack/server.rb","content":"rack::server responsible providing common server interface rack-based applications, which rails part initialize method rack::server simply sets several variables: this case, return value rails::command::servercommand#server_options will assigned options. when lines inside statement evaluated, couple instance variables will set. server_options method rails::command::servercommand defined follows: value will assigned instance variable @options. after super finished rack::server, jump back rails/commands/server/server_command.rb. this point, set_environment called within context rails::server object. after initialize finished, jump back into server command where app_path (which earlier) required."},{"id":848,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.8 config/application","content":"when require app_path executed, config/application.rb loaded (recall that app_path defined bin/rails). this file exists your application it's free change based your needs."},{"id":849,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.9 Rails::Server#start","content":"after config/application loaded, server.start called. this method defined like this: this method creates trap signals, ctrl-c server, will exit process. from code here, will create tmp/cache, tmp/pids, tmp/sockets directories. then enables caching development bin/rails server called with --dev-caching. finally, calls wrapped_app which responsible creating rack app, before creating assigning instance activesupport::logger. super method will call rack::server.start which begins definition follows: interesting part rails last line, server.run. here encounter wrapped_app method again, which this time we're going explore more (even though executed before, thus memoized now). method here defined like options[:config] value defaults config.ru which contains this: rack::builder.parse_file method here takes content from this config.ru file parses using this code: initialize method rack::builder will take block here execute within instance rack::builder. this where majority initialization process rails happens. require line config/environment.rb config.ru first run:"},{"id":850,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.10 config/environment.rb","content":"this file common file required config.ru (bin/rails server) passenger. this where these ways server meet; everything before this point been rack rails setup. this file begins with requiring config/application.rb:"},{"id":851,"title":"The Rails Initialization Process","heading":"1 Launch!","subheading":"1.11 config/application.rb","content":"this file requires config/boot.rb: only hasn't been required before, which would case bin/rails server wouldn't case with passenger. then begins! next line config/application.rb"},{"id":852,"title":"The Rails Initialization Process","heading":"2 Loading Rails","subheading":"2.1 railties/lib/rails/all.rb","content":"this file responsible requiring individual frameworks rails: this where rails frameworks loaded thus made available application. won't into detail what happens inside each those frameworks, you're encouraged explore them your own. now, just keep mind that common functionality like rails engines, i18n rails configuration being defined here."},{"id":853,"title":"The Rails Initialization Process","heading":"2 Loading Rails","subheading":"2.2 Back to config/environment.rb","content":"rest config/application.rb defines configuration rails::application which will used once application fully initialized. when config/application.rb finished loading rails defined application namespace, back config/environment.rb. here, application initialized with rails.application.initialize!, which defined rails/application.rb."},{"id":854,"title":"The Rails Initialization Process","heading":"2 Loading Rails","subheading":"2.3 railties/lib/rails/application.rb","content":"initialize! method looks like this: only initialize once. railtie initializers through run_initializers method which defined railties/lib/rails/initializable.rb: run_initializers code itself tricky. what rails doing here traversing class ancestors looking those that respond initializers method. then sorts ancestors name, runs them. example, engine class will make engines available providing initializers method them. rails::application class, defined railties/lib/rails/application.rb defines bootstrap, railtie, finisher initializers. bootstrap initializers prepare application (like initializing logger) while finisher initializers (like building middleware stack) last. railtie initializers initializers which have been defined rails::application itself between bootstrap finishers. note: confuse railtie initializers overall with load_config_initializers initializer instance associated config initializers config/initializers. after this done back rack::server."},{"id":855,"title":"The Rails Initialization Process","heading":"2 Loading Rails","subheading":"2.4 Rack: lib/rack/server.rb","content":"last time left when method being defined: this point rails itself middleware), what happens next rack will call provided middlewares: remember, build_app called wrapped_app) last line rack::server#start. here's looked like when left: this point, implementation server.run will depend server you're using. example, were using puma, here's what method would look like: won't into server configuration itself, this last piece journey rails initialization process. this high level overview will help understand when your code executed how, overall become better rails developer. still want know more, rails source code itself probably best place next. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":856,"title":"Ruby on Rails 5.2 Release Notes","heading":"1 Upgrading to Rails 5.2","subheading":"1 Upgrading to Rails 5.2","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting update rails 5.2. list things watch when upgrading available upgrading ruby rails guide."},{"id":857,"title":"Ruby on Rails 5.2 Release Notes","heading":"2 Major Features","subheading":"2.1 Active Storage","content":"pull request active storage facilitates uploading files cloud storage service like amazon google cloud storage, microsoft azure storage attaching those files active record objects. comes with local disk-based service development testing supports mirroring files subordinate services backups migrations. read more about active storage active storage overview guide."},{"id":858,"title":"Ruby on Rails 5.2 Release Notes","heading":"2 Major Features","subheading":"2.2 Redis Cache Store","content":"pull request rails ships with built-in redis cache store. read more about this caching with rails: overview guide."},{"id":859,"title":"Ruby on Rails 5.2 Release Notes","heading":"2 Major Features","subheading":"2.3 HTTP/2 Early Hints","content":"pull request rails supports http/2 early hints. start server with early hints enabled pass --early-hints bin/rails server."},{"id":860,"title":"Ruby on Rails 5.2 Release Notes","heading":"2 Major Features","subheading":"2.4 Credentials","content":"pull request added config/credentials.yml.enc file store production secrets. allows saving authentication credentials third-party services directly repository encrypted with config/master.key file rails_master_key environment variable. this will eventually replace rails.application.secrets encrypted secrets introduced rails 5.1. furthermore, rails opens underlying credentials, easily deal with other encrypted configurations, keys, files. read more about this securing rails applications guide."},{"id":861,"title":"Ruby on Rails 5.2 Release Notes","heading":"2 Major Features","subheading":"2.5 Content Security Policy","content":"pull request rails ships with that allows configure content security policy your application. configure global default policy then override per-resource basis even lambdas inject per-request values into header such account subdomains multi-tenant application. read more about this securing rails applications guide. please refer changelog detailed changes."},{"id":862,"title":"Ruby on Rails 5.2 Release Notes","heading":"3 Railties","subheading":"3.1 Deprecations","content":""},{"id":863,"title":"Ruby on Rails 5.2 Release Notes","heading":"3 Railties","subheading":"3.2 Notable changes","content":"please refer changelog detailed changes."},{"id":864,"title":"Ruby on Rails 5.2 Release Notes","heading":"4 Action Cable","subheading":"4.1 Removals","content":""},{"id":865,"title":"Ruby on Rails 5.2 Release Notes","heading":"4 Action Cable","subheading":"4.2 Notable changes","content":"please refer changelog detailed changes."},{"id":866,"title":"Ruby on Rails 5.2 Release Notes","heading":"5 Action Pack","subheading":"5.1 Removals","content":""},{"id":867,"title":"Ruby on Rails 5.2 Release Notes","heading":"5 Action Pack","subheading":"5.2 Deprecations","content":""},{"id":868,"title":"Ruby on Rails 5.2 Release Notes","heading":"5 Action Pack","subheading":"5.3 Notable changes","content":"please refer changelog detailed changes."},{"id":869,"title":"Ruby on Rails 5.2 Release Notes","heading":"6 Action View","subheading":"6.1 Removals","content":""},{"id":870,"title":"Ruby on Rails 5.2 Release Notes","heading":"6 Action View","subheading":"6.2 Deprecations","content":""},{"id":871,"title":"Ruby on Rails 5.2 Release Notes","heading":"6 Action View","subheading":"6.3 Notable changes","content":"please refer changelog detailed changes."},{"id":872,"title":"Ruby on Rails 5.2 Release Notes","heading":"7 Action Mailer","subheading":"7.1 Notable changes","content":"please refer changelog detailed changes."},{"id":873,"title":"Ruby on Rails 5.2 Release Notes","heading":"8 Active Record","subheading":"8.1 Removals","content":""},{"id":874,"title":"Ruby on Rails 5.2 Release Notes","heading":"8 Active Record","subheading":"8.2 Deprecations","content":""},{"id":875,"title":"Ruby on Rails 5.2 Release Notes","heading":"8 Active Record","subheading":"8.3 Notable changes","content":"please refer changelog detailed changes."},{"id":876,"title":"Ruby on Rails 5.2 Release Notes","heading":"9 Active Model","subheading":"9.1 Notable changes","content":"please refer changelog detailed changes."},{"id":877,"title":"Ruby on Rails 5.2 Release Notes","heading":"10 Active Support","subheading":"10.1 Removals","content":""},{"id":878,"title":"Ruby on Rails 5.2 Release Notes","heading":"10 Active Support","subheading":"10.2 Deprecations","content":""},{"id":879,"title":"Ruby on Rails 5.2 Release Notes","heading":"10 Active Support","subheading":"10.3 Notable changes","content":"please refer changelog detailed changes."},{"id":880,"title":"Ruby on Rails 5.2 Release Notes","heading":"11 Active Job","subheading":"11.1 Notable changes","content":"please refer changelog detailed changes."},{"id":881,"title":"Ruby on Rails 5.2 Release Notes","heading":"12 Ruby on Rails Guides","subheading":"12.1 Notable changes","content":"full list contributors rails many people spent many hours making rails, stable robust framework kudos them. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":882,"title":"Threading and Code Execution in Rails","heading":"1 Automatic Concurrency","subheading":"1 Automatic Concurrency","content":"rails automatically allows various operations performed same time. when using threaded server, such default puma, multiple http requests will served simultaneously, with each request provided controller instance. threaded active adapters, including built-in async, will likewise execute several jobs same time. action cable channels managed this too. these mechanisms involve multiple threads, each managing work unique instance some object (controller, job, channel), while sharing global process space (such classes their configurations, global variables). long your code doesn't modify those shared things, mostly ignore that other threads exist. rest this guide describes mechanisms rails uses make \"mostly ignorable\", extensions applications with special needs them. rails executor separates application code from framework code: time framework invokes code you've written your application, will wrapped executor. executor consists callbacks: to_run to_complete. callback called before application code, complete callback called after."},{"id":883,"title":"Threading and Code Execution in Rails","heading":"2 Executor","subheading":"2.1 Default callbacks","content":"default rails application, executor callbacks used prior rails 5.0, some these were handled separate rack middleware classes (such activerecord::connectionadapters::connectionmanagement), directly wrapping code with methods like activerecord::base.connection_pool.with_connection. executor replaces these with single more abstract interface."},{"id":884,"title":"Threading and Code Execution in Rails","heading":"2 Executor","subheading":"2.2 Wrapping application code","content":"you're writing library component that will invoke application code, should wrap with call executor: each thread should wrapped before runs application code, your application manually delegates work other threads, such thread.new concurrent ruby features that thread pools, should immediately wrap block: executor safely re-entrant; already active current thread, wrap no-op. it's impractical wrap application code block (for example, rack makes this problematic), also run! complete! pair:"},{"id":885,"title":"Threading and Code Execution in Rails","heading":"2 Executor","subheading":"2.3 Concurrency","content":"executor will current thread into running mode load interlock. this operation will block temporarily another thread currently either autoloading constant unloading/reloading application. like executor, reloader also wraps application code. executor already active current thread, reloader will invoke you, only need call one. this also guarantees that everything reloader does, including callback invocations, occurs wrapped inside executor. reloader only suitable where long-running framework-level process repeatedly calls into application code, such server queue. rails automatically wraps requests active workers, you'll rarely need invoke reloader yourself. always consider whether executor better your case."},{"id":886,"title":"Threading and Code Execution in Rails","heading":"3 Reloader","subheading":"3.1 Callbacks","content":"before entering wrapped block, reloader will check whether running application needs reloaded example, because model's source file been modified. determines reload required, will wait until it's safe, then before continuing. when application configured always reload regardless whether changes detected, reload instead performed block. reloader also provides to_run to_complete callbacks; they invoked same points those executor, only when current execution initiated application reload. when reload deemed necessary, reloader will invoke wrapped block with other callbacks."},{"id":887,"title":"Threading and Code Execution in Rails","heading":"3 Reloader","subheading":"3.2 Class Unload","content":"most significant part reloading process class unload, where autoloaded classes removed, ready loaded again. this will occur immediately before either complete callback, depending reload_classes_only_on_change setting. often, additional reloading actions need performed either just before just after class unload, reloader also provides before_class_unload after_class_unload callbacks."},{"id":888,"title":"Threading and Code Execution in Rails","heading":"3 Reloader","subheading":"3.3 Concurrency","content":"only long-running \"top level\" processes should invoke reloader, because determines reload needed, will block until other threads have completed executor invocations. this were occur \"child\" thread, with waiting parent inside executor, would cause unavoidable deadlock: reload must occur before child thread executed, cannot safely performed while parent thread mid-execution. child threads should executor instead. rails framework components these tools manage their concurrency needs too. actiondispatch::executor actiondispatch::reloader rack middlewares that wrap requests with supplied executor reloader, respectively. they automatically included default application stack. reloader will ensure arriving http request served with freshly-loaded copy application code changes have occurred. active also wraps executions with reloader, loading latest code execute each comes queue. action cable uses executor instead: because cable connection linked specific instance class, it's possible reload every arriving websocket message. only message handler wrapped, though; long-running cable connection does prevent reload that's triggered incoming request job. instead, action cable uses reloader's before_class_unload callback disconnect connections. when client automatically reconnects, will speaking version code. above entry points framework, they responsible ensuring their respective threads protected, deciding whether reload necessary. other components only need executor when they spawn additional threads."},{"id":889,"title":"Threading and Code Execution in Rails","heading":"4 Framework Behavior","subheading":"4.1 Configuration","content":"reloader only checks file changes when cache_classes false reload_classes_only_on_change true (which default development environment). when cache_classes true production, default), reloader only pass-through executor. executor always important work like database connection management. when cache_classes eager_load both true (production), autoloading class reloading will occur, does need load interlock. either those false (development), then executor will load interlock ensure constants only loaded when safe. load interlock allows autoloading reloading enabled multi-threaded runtime environment. when thread performing autoload evaluating class definition from appropriate file, important other thread encounters reference partially-defined constant. similarly, only safe perform unload/reload when application code mid-execution: after reload, user constant, example, point different class. without this rule, poorly-timed reload would mean user.new.class user, even user user, could false. both these constraints addressed load interlock. keeps track which threads currently running application code, loading class, unloading autoloaded constants. only thread load unload time, either, must wait until other threads running application code. thread waiting perform load, doesn't prevent other threads from loading fact, they'll cooperate, each perform their queued load turn, before resuming running together)."},{"id":890,"title":"Threading and Code Execution in Rails","heading":"5 Load Interlock","subheading":"5.1 permit_concurrent_loads","content":"executor automatically acquires running lock duration block, autoload knows when upgrade load lock, switch back running again afterwards. other blocking operations performed inside executor block (which includes application code), however, needlessly retain running lock. another thread encounters constant must autoload, this cause deadlock. example, assuming user loaded, following will deadlock: prevent this deadlock, outer thread permit_concurrent_loads. calling this method, thread guarantees will dereference possibly-autoloaded constant inside supplied block. safest meet that promise close possible blocking call: another example, using concurrent ruby:"},{"id":891,"title":"Threading and Code Execution in Rails","heading":"5 Load Interlock","subheading":"5.2 ActionDispatch::DebugLocks","content":"your application deadlocking think load interlock involved, temporarily actiondispatch::debuglocks middleware config/application.rb: then restart application re-trigger deadlock condition, /rails/locks will show summary threads currently known interlock, which lock level they holding awaiting, their current backtrace. generally deadlock will caused interlock conflicting with some other external lock blocking call. once find wrap with permit_concurrent_loads. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":892,"title":"Active Support Core Extensions","heading":"1 Como Carregar Core Extensions","subheading":"1.1 Active Support Stand-Alone","content":"menor espaço padrão possível, active support carrega dependências mínimas padrão. quebrado pequenos pedaços apenas extensões desejadas possam carregadas. também possui alguns pontos entrada convenientes carregar extensões relacionadas vez, mesmo tudo. portanto, possível inicializar após simples require como: apenas extensões exigidas pela estrutura active support carregadas. este exemplo mostra como carregar hash#with_indifferent_access. esta extensão permite conversão hash activesupport::hashwithindifferentaccess permite acesso chaves como strings symbols. cada método definido como core extension esse guia possui nota onde método definido. caso with_indifferent_access nota diz: isso significa você pode fazer requires assim: active support cuidadosamente projetado seleções arquivos carreguem somente dependências extremamente necessárias, caso existam. próximo passo simplesmente carregar todas extensões hash. como regra geral, extensões someclass estão disponíveis rápido carregamento active_support/core_ext/some_class. portanto, carregar todas extensões hash (incluindo with_indifferent_access): você pode escolher carregar todas extensões principais, arquivo isso: finalmente, você quer tudo active support fornece, basta apenas: isso inserir todo active support memória antes necessário, algumas funcionalidades configuradas ʻautoload`, então carregadas usadas."},{"id":893,"title":"Active Support Core Extensions","heading":"1 Como Carregar Core Extensions","subheading":"1.2 Active Support Em Uma Aplicação Ruby on Rails","content":"aplicação ruby rails carrega todo active support config.active_support.bare esteja definida como true. neste caso, aplicação carregar apenas próprio framework escolhe como suas próprias necessidades, ainda pode selecionar mesmo qualquer nível granularidade, conforme explicado seção anterior."},{"id":894,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.1 blank? e present?","content":"seguintes valores considerados blank aplicação rails: exemplo, este método actioncontroller::httpauthentication::token::controllermethods blank? checar token está presente: método present? equivalente !blank?. este exemplo disponível actiondispatch::http::cache::response:"},{"id":895,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.2 presence","content":"método presence retorna valor present? true, caso seja. isso muito útil expressões como esta:"},{"id":896,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.3 duplicable?","content":"partir ruby 2.5, maioria objetos podem duplicados clone: active support fornece duplicable? consultar objeto pode duplicado:"},{"id":897,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.4 deep_dup","content":"método deep_dup retorna cópia profunda objeto. normalmente, quando você objeto contêm outros objetos, ruby executa dup, então criada cópia superficial objeto. caso você possua array string, exemplo, terá algo parecido com: como podemos ver, depois duplicar instância array, possuímos agora outro objeto, portanto podemos modificá-lo alterar informações objeto original. isso funciona elementos array, entretanto. desde faça cópia profunda, string dentro array manterá como mesmo objeto. você precisa cópia profunda objeto, pode então usar deep_dup. confira exemplo: objeto duplicável, deep_dup apenas retornará:"},{"id":898,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.5 try","content":"quando você quer chamar método objeto somente nil, forma mais simples conseguir isso através estrutura condicional, adicionando desnecessária desordem. alternativa usar try. como object#public_send exceto retorno seja enviado nil. exemplo: outro exemplo código activerecord::connectionadapters::abstractadapter onde @logger pode nil. você pode código evita verificação desnecessária. pode também chamada argumentos, porém bloco, qual será executado objeto nil: perceba exibirá mensagens erro caso elas ocorram, retornando disso. você quiser proteger possíveis erros digitação, try!:"},{"id":899,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.6 class_eval(*args, &block)","content":"você pode evoluir código contexto singleton qualquer objeto usando class_eval:"},{"id":900,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.7 acts_like?(duck)","content":"método acts_like? fornece meio conferir alguma classe como alguma outra classe baseada simples convenção: classe fornece mesma interface definida como string apenas marcador, corpo valor retorno irrelevantes. então, código cliente pode consultar tipagem desta forma: rails possui classes agem como date time seguem essa linha."},{"id":901,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.8 to_param","content":"todos objetos rails respondem método to_param, qual usado retornar representações valores strings, qual podem usadas consultas, fragmentos url. padrão, to_param apenas chama método to_s: retorno valores to_param deve ignorado: várias classes rails sobrescrevem este método. exemplo nil, true, false retornam mesmo. array#to_param chama to_param cada elemento, exibindo resultado separando elementos \"/\": notavelmente, rotas sistemas rails chamam to_param models obter valor campo :id. activerecord::base#to_param retorna model, você pode redefinir esse método seus models. exemplo, dado temos:"},{"id":902,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.9 to_query","content":"método to_query controi query string associam retorno to_param. exemplo, dado seguinte definição to_param: temos: este método traz necessário, tanto chave, como valor: então esse resultado esta pronto usado string busca. arrays retornam resultado aplicação to_query cada elemento key[] como chave, junta resultado \"&\": hashes tambem respondem to_query diferença. passar argumento chamada gera série ordenada chaves/valores atribuídas chamando to_query(key) seus valores. seguida, resultado mesclado \"&\": método hash#to_query aceita espaço nomear chaves:"},{"id":903,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.10 with_options","content":"método with_options fornece meio agrupar opções comuns série chamada métodos. dado opções default hash, with_options objeto \"ponte\" bloco. dentro bloco, métodos chamados objeto encaminhados receptor suas opções mescladas. exemplo, você livra duplicação desta forma: essa expressão pode transmitir agrupamento leitor também. exemplo, digamos você queira enviar boletim informativo cujo idioma depende usuário. algum lugar mailer você poderá agrupar receptores localidade como exemplo:"},{"id":904,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.11 Suporte ao JSON","content":"active support fornece melhor implementação to_json json normalmente fornece objetos ruby. isso porque algumas classes, como hash, process::status precisam manipulações especiais fornecer representação json adequada."},{"id":905,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.12 Variáveis de Instância","content":"active support fornece vários métodos facilitar acesso variáveis instância. método instance_values retorna hash mapeia variáveis instância nomes seus valores correspondentes. chaves strings: método instance_variable_names retorna array. cada nome inclui sinal \"@\"."},{"id":906,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.13 Silenciando Warnings e Exceções","content":"métodos silence_warnings enable_warnings trocam valor $verbose acordo duração bloco, reiniciam depois: silenciar exceções também possível suppress. este método recebe número arbitrário classes exceção. exceção acionada durante execução bloco kind_of? qualquer argumentos, suppress captura retorna silenciosamente. caso contrário, exceção capturada:"},{"id":907,"title":"Active Support Core Extensions","heading":"2 Extensões para todos os objetos","subheading":"2.14 in?","content":"expressão testa objeto incluído outro objeto. exceção argumenterror será acionada argumento passado responder include?. exemplos in?:"},{"id":908,"title":"Active Support Core Extensions","heading":"3 Extensões de Module","subheading":"3.1 Atributos","content":"atributos models podem lidos, escritos condicionados. você pode criar alias atributo model correspondendo todos três métodos definidos você usando alias_attribute. outro métodos alias, novo nome primeiro argumento, antigo nome segundo (uma forma memorizar pensar eles apresentam mesma ordem como você fizesse atribuição): quando você esta definindo atributo classe pode subclasse, conflitos nomes risco. isso extremamente importante bibliotecas. active support define macros attr_internal_reader, attr_internal_writer, attr_internal_accessor. elas comportam-se como próprio ruby attr_* embutido, exceto pelos nomes variáveis instância conflitos sejam menos comuns. macro attr_internal sinônimo attr_internal_accessor: exemplo anterior, poderia caso :log_level pertença interface pública biblioteca seria usada desenvolvimento. código cliente, sabe potencial conflito, subclasses definições seus próprios :log_level. graças attr_internal conflito. padrão, variável instancia interna nomeada underscore frente, @_log_level exemplo acima. isso configurável module.attr_internal_naming_format apesar disso, você pode passar qualquer tipo sprintf formato string inicial algum lugar, qual onde nome será colocado. padrão \"@_%s\". rails atributos internos alguns pontos, views como exemplo: macros mattr_reader, mattr_writer, mattr_accessor iguais cattr_* macros definidas classe. fato, cattr_* macros apenas aliases mattr_* macros. confira seção atributos classe. exemplo, registrador active storage gerada mattr_accessor:"},{"id":909,"title":"Active Support Core Extensions","heading":"3 Extensões de Module","subheading":"3.2 Parents","content":"método module_parent módulo nomeado aninhado retorna módulo contém constante correspondente: módulo anônimo pertence nível superior, module_parent retorna object. método module_parent_name modulo nomeado aninhado retorna nome completamente qualificado módulo contém constante correspondente: módulos nível superior anônimos module_parent_name retorna nil. método module_parents chama module_parent receptor sobe object alcançado. cadeia retornada matriz, baixo cima:"},{"id":910,"title":"Active Support Core Extensions","heading":"3 Extensões de Module","subheading":"3.3 Anônimo","content":"módulo pode nome: você pode verificar módulo possui nome condicional anonymous?: observe estar inacessível significa anônimo: embora módulo anônimo seja inacessível definição."},{"id":911,"title":"Active Support Core Extensions","heading":"3 Extensões de Module","subheading":"3.4 Delegação de Método","content":"macro delegate oferece maneira fácil encaminhar métodos. vamos imaginar usuários alguma aplicação possuem informações login model user além nome outro dado model profile separado: essa configuração você consegue nome usuários partir classe perfil, user.profile.name, isso poderia conveniente habilitar acesso atributo diretamente: isso delegate você: mais curto intenção mais óbvia. método deve público. macro delegate aceita vários métodos: quando interpolado string, opção deve tornar expressão avalia objeto qual método delegado. normalmente string symbol. expressão avaliada contexto receptor: padrão, delegação resulta nomethoderror objeto exceção propaga. você pode perguntar retornado invés opção :allow_nil: :allow_nil chamada user.name retorna usuário tiver perfil. opção :prefix adiciona prefixo nome método gerado. isso pode útil, exemplo, obter nome melhor: exemplos prévios geram address_street invés street. prefixo customizado pode também configurado: macro exemplos prévios geram avatar_size invés size. opção :private mudam escopo método: métodos delegados públicos padrão. passe private: true mudar isso. imagine você gostaria delegar tudo está faltando objeto user, profile. macro delegate_missing_to permite você implemente isso forma facilitada: destino pode qualquer coisa possa chamada dentro objeto, exemplo: instância variáveis, métodos, constantes etc. somente métodos públicos alvo delegados."},{"id":912,"title":"Active Support Core Extensions","heading":"3 Extensões de Module","subheading":"3.5 Redefinindo Métodos","content":"existem casos onde você precisa definir método define_method, existe método esse nome. caso sim, warning exibido estiverem habilitados. muito perigoso, prática. método redefine_method previne potencial warning, removendo método existente, necessário. você pode também usar silence_redefinition_of_method você precisa definir método substituição (porque você está usando delegate, exemplo)."},{"id":913,"title":"Active Support Core Extensions","heading":"4 Extensões para Class","subheading":"4.1 Atributos de classe","content":"método class_attribute declara mais atributos classe herdáveis podem substituídos qualquer nível abaixo hierarquia. exemplo actionmailer::base define: eles também podem acessados substituídos nível instância. criação método instância escrita pode prevenido configurando opção :instance_writer false. essa opção pode útil prevenir atribuições massa definir atributo. criação método instância leitura pode prevenido configurando opção :instance_reader false. conveniência class_attribute também define predicado instância negação dupla leitor instância retorna. exemplo acima podemos usar quando :instance_reader false, predicado instância retorna nomethoderror assim como método leitura. você quiser predicado instância, passe instance_predicate: false será definido. macros cattr_reader, cattr_writer, cattr_accessor análogas suas attr_* homólogas porém classes. eles inicializam variável classe menos exista, gera métodos classe correspondentes acessá-la: além disso, você pode passar bloco cattr_* configurar atributo valor padrão. métodos instância criados também conveniência, eles apenas forma acesso atributo classe. logo, instâncias podem alterar atributo classe, porém podem substituí-lo mesmo modo ocorre class_attribute (veja acima). exemplo, dado podemos acessar field_error_proc views. geração método leitura instância pode prevenido configurando :instance_reader false geração métodos escrita instância podem prevenidos configurando :instance_writer false. geração ambos métodos podem prevenidos configurando :instance_accessor false. todos casos, valor deve exatamente false qualquer outro valor falso. pode útil configurar :instance_accessor false model como maneira prevenir atribuições massa definir atributo."},{"id":914,"title":"Active Support Core Extensions","heading":"4 Extensões para Class","subheading":"4.2 Subclasses e Descendentes","content":"método subclasses retorna subclasses recebedor: ordem essas classes retornadas especificada. método descendants retorna todas classes pelo recebedor: ordem essas classes retornadas especificada."},{"id":915,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.1 Segurança de saída","content":"inserir dados templates html, necessita cuidados extras. exemplo, você pode apenas literalmente juntar @review.title página html. outro lado, título comentário \"flanagan matz rules!\" retorno será formada porque comercial' precisa usado como \"&amp;\". além mais, dependendo aplicação, isso pode grande falha segurança porque usuários podem injetar configuração html maliciosa título revisão feito mão. confira seção sobre cross-site scripting guia segurança maiores informações sobre riscos. active support possui conceito (html) strings seguras. string segura aquela marcada como sendo inserível html como definida. confiável, importando origem. strings consideradas como inseguras padrão: pode-se obter string segura dado método html_safe: importante entender html_safe executa nenhuma operação, apenas afirmação: responsabilidade garantir chamada html_safe cada string particular. você anexar string segura, concat/<<, resultado string segura. argumentos inseguros ignorados: argumentos seguros anexados diretamente: esses métodos devem usados views comuns. valores inseguros ignorados automaticamente: inserir algo literal, helper invés chamar html_safe: equivalentemente, <%==: helper chama html_safe você: modo geral, exceto talvez concatenação conforme explicado acima, qualquer método possa alterar string fornece string insegura. estes downcase, gsub, strip, chomp, underscore, etc. caso transformações locais, como gsub! próprio receptor torna inseguro. chamando to_s string segura retorna string segura, coerção to_str retorna string insegura. chamando clone strings seguras produz outras strings seguras."},{"id":916,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.2 remove","content":"método remove remover todas ocorrências padrão: também versão destrutiva string#remove!."},{"id":917,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.3 squish","content":"método squish remove espaços branco esquerda direita substitui espaços branco único espaço cada: também versão destrutiva string#squish!. observe lida espaços branco ascii unicode."},{"id":918,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.4 truncate","content":"método truncate retorna cópia receptor truncado após determinado length: reticências podem personalizadas opção :omission: observe particular truncamento leva consideração comprimento string omissão. passe método :separator truncar string pausa natural: opção :separator pode regexp: exemplos acima \"dear\" cortado primeiro, depois :separator impede isso."},{"id":919,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.5 truncate_bytes","content":"método truncate_bytes retorna cópia receptor truncado máximo bytesize bytes: reticências podem personalizadas opção :omission:"},{"id":920,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.6 truncate_words","content":"método truncate_words retorna cópia frase original truncada depois receber determinado número palavras: reticências podem customizadas opção :omission: chame :separator truncar string pausa natural: opção :separator pode regexp:"},{"id":921,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.7 inquiry","content":"método inquiry converte string objeto stringinquirer fazendo verificações igualdade mais elegantes."},{"id":922,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.8 starts_with? e ends_with?","content":"active support define conjugação verbal pessoa string#start_with? string#end_with?:"},{"id":923,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.9 strip_heredoc","content":"método strip_heredoc tira recuo heredocs. exemplo usuário veria mensagem alinhada margem esquerda. tecnicamente, procura linha menos indentada toda string remove essa quantidade espaço branco esquerda."},{"id":924,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.10 indent","content":"método indent indenta linhas receptor: segundo argumento, indent_string, especifica qual string indentação usar. padrão nil, método fazer suposição conferindo primeira linha indentada, recuando espaço houver nenhuma. enquanto indent_string normalmente espaço tabulação, essa pode qualquer string. terceiro argumento, indent_empty_lines, sinalização linhas vazias devem indentadas. padrão false. método indent! realiza recuo local."},{"id":925,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.11 Acesso","content":"método retorna caractere string posição position: método from retorna substring string iniciada posição position: método retorna substring string posição position: método first retorna substring contendo primeiros limit caracteres string. chamada str.first(n) equivalente str.to(n-1) retorna string vazia método last retorna substring contendo últimos limit caracteres string. chamada str.last(n) equivalente str.from(-n) retorna string vazia"},{"id":926,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.12 Inflexões","content":"método pluralize retorna plural receptor: como mostra exemplo anterior, active support conhece alguns plurais irregulares substantivos incontáveis. regras integradas podem estendidas config/initializers/inflections.rb. este arquivo gerado padrão, pelo comando rails instruções comentários. pluralize também pode fazer parâmetro count opcional. count forma singular será retornada. qualquer outro valor count forma plural será retornada: active record esse método computar nome tabela padrão correspondente model: método singularize inverso pluralize: associações calculam nome padrão classe associada correspondente usando este método: método camelize retorna receptor camel case: como regra geral, você pode pensar neste método como aquele transforma pastas nomes classes módulos ruby, barras separam subarquivos: exemplo, action pack este método carregar classe fornece determinado armazenamento sessão: camelize aceita argumento opcional, pode :upper (padrão), :lower. último, primeira letra torna-se minúscula: isso pode útil calcular nomes métodos linguagem segue essa convenção, exemplo, javascript. camelize mesmo usar camelcase. método underscore contrário, camel case pastas: também converte \"::\" back \"/\": entende strings começam start letra minúscula: underscore aceita nenhum argumento. rails underscore inferir nome controller class: exemplo, esse valor aquele você obtém params[:controller]. método titleize coloca cada palavra letra maiúscula: titleize mesmo usar titlecase. método dasherize troca underscores receptor traços: serializer models este método colocar traços nomes seus nós: dado string nome constante módulo, demodulize retorna real nome constante, seja, parte mais direita dela: active record exemplo, este método calcular nome coluna cache contador: dada string expressão referência constante, deconstantize remove segmento mais direita, geralmente deixando nome contêiner constante: método parameterize normaliza receptor forma pode usada urls forma mais elegante. preservar caixa string, defina argumento preserve_case true. padrão, preserve_case será configurado como false. usar separador customizado, sobrescreva argumento separator. método tableize underscore seguido pluralize. como princípio básico, tableize retorna nome tabela corresponde determinado modelo casos simples. implementação real tableize active record verdade direta, porque também desmodulariza nome classe verifica algumas opções podem afetar string retornada. método classify inverso tableize. nome classe correspondente nome tabela: método compreende nomes tabela associadas: note classify retorna nome classe como string. você pode obter objeto classe real invocando constantize sobre isso, será explicado seguir. método constantize resolve expressão referência constante receptor: string avaliada como constante conhecida conteúdo mesmo nome constante válido, constantize executa nameerror. resolução nome constante constantize inicia sempre nível superior object mesmo começar \"::\". general equivalent what ruby would same spot, real constant evaluated. mailer test cases obtain mailer being tested from name test class using constantize: método humanize ajusta nome atributo exibir usuários. especificamente, realiza estas transformações: capitalização primeira palavra pode desativada configurando :capitalize opção false padrão true). \"ssl\" definido como sigla: método helper full_messages humanize como alternativa incluir nomes atributos: método foreign_key fornece nome coluna chave estrangeira partir nome classe. fazer isso, desmoduliza, separa underline adiciona \"_id\": passe false como argumento você quiser underline \"_id\": associações usam este método inferir chaves estrangeiras, exemplo has_one has_many fazem isto:"},{"id":927,"title":"Active Support Core Extensions","heading":"5 Extensões para String","subheading":"5.13 Conversões","content":"métodos to_date, to_time, to_datetime basicamente variações convenientes date._parse: to_time recebe argumento opcional :utc :local, indicar qual fuso horário quer basear: padrão :local. favor, consulte documentação date._parse mais detalhes."},{"id":928,"title":"Active Support Core Extensions","heading":"6 Extensões para Symbol","subheading":"6.1 starts_with? e ends_with?","content":"active support define aliases (nomes simbólicos) terceira pessoa symbol#start_with? symbol#end_with?:"},{"id":929,"title":"Active Support Core Extensions","heading":"7 Extensões para Numeric","subheading":"7.1 Bytes","content":"todos números respondem estes métodos: eles retornam quantidade correspondente bytes, usando fator conversão 1024: formas singulares alias você possa dizer:"},{"id":930,"title":"Active Support Core Extensions","heading":"7 Extensões para Numeric","subheading":"7.2 Time","content":"seguintes métodos: habilitar declarações cálculos tempo, como 45.minutes 2.hours 4.weeks. seus valores retorno também podem adicionados subtraídos objetos time. esses métodos podem combinados from_now, ago, etc, cálculos datas precisos. exemplo:"},{"id":931,"title":"Active Support Core Extensions","heading":"7 Extensões para Numeric","subheading":"7.3 Formatação","content":"permite formatação números várias maneiras. produz representação string número como número telefone: produz representação string número como moeda: produz representação string número como porcentagem: produz representação string número forma delimitada: produz representação string número arredondado precisão: produz representação string número como número bytes legível humanos: produz representação string número palavras legíveis humanos:"},{"id":932,"title":"Active Support Core Extensions","heading":"8 Extensões para Integer","subheading":"8.1 multiple_of?","content":"método multiple_of? testa inteiro múltiplo argumento:"},{"id":933,"title":"Active Support Core Extensions","heading":"8 Extensões para Integer","subheading":"8.2 ordinal","content":"método ordinal retorna string sufixo ordinal correspondente inteiro receptor:"},{"id":934,"title":"Active Support Core Extensions","heading":"8 Extensões para Integer","subheading":"8.3 ordinalize","content":"método ordinalize retorna string ordinal correspondente inteiro receptor. comparação, observe método ordinal retorna apenas string sufixo."},{"id":935,"title":"Active Support Core Extensions","heading":"8 Extensões para Integer","subheading":"8.4 Time","content":"seguintes métodos: habilitar declarações tempo cálculos, como 4.months 5.years. seus valores retorno também podem adicionados subtraídos objetos time. esses métodos podem combinados from_now, ago, etc, cálculos data precisos. exemplo:"},{"id":936,"title":"Active Support Core Extensions","heading":"9 Extensões para BigDecimal","subheading":"9.1 to_s","content":"método to_s fornece especificador padrão \"f\". isso significa simples chamada to_s resultará representação ponto flutuante notação engenharia: especificadores usando symbols também suportados: notação engenharia ainda suportada:"},{"id":937,"title":"Active Support Core Extensions","heading":"10 Extensions to Enumerable","subheading":"10.1 sum","content":"method adds elements enumerable: addition only assumes elements respond empty collection zero default, this customizable: block given, becomes iterator that yields elements collection sums returned values: empty receiver customized this form well:"},{"id":938,"title":"Active Support Core Extensions","heading":"10 Extensions to Enumerable","subheading":"10.2 index_by","content":"method index_by generates hash with elements enumerable indexed some key. iterates through collection passes each element block. element will keyed value returned block:"},{"id":939,"title":"Active Support Core Extensions","heading":"10 Extensions to Enumerable","subheading":"10.3 index_with","content":"method index_with generates hash with elements enumerable keys. value either passed default returned block."},{"id":940,"title":"Active Support Core Extensions","heading":"10 Extensions to Enumerable","subheading":"10.4 many?","content":"method many? shorthand collection.size optional block given, many? only takes into account those elements that return true:"},{"id":941,"title":"Active Support Core Extensions","heading":"10 Extensions to Enumerable","subheading":"10.5 exclude?","content":"predicate exclude? tests whether given object does belong collection. negation built-in include?:"},{"id":942,"title":"Active Support Core Extensions","heading":"10 Extensions to Enumerable","subheading":"10.6 including","content":"method including returns enumerable that includes passed elements:"},{"id":943,"title":"Active Support Core Extensions","heading":"10 Extensions to Enumerable","subheading":"10.7 excluding","content":"method excluding returns copy enumerable with specified elements removed: excluding aliased without."},{"id":944,"title":"Active Support Core Extensions","heading":"10 Extensions to Enumerable","subheading":"10.8 pluck","content":"method pluck extracts given from each element:"},{"id":945,"title":"Active Support Core Extensions","heading":"10 Extensions to Enumerable","subheading":"10.9 pick","content":"method pick extracts given from first element:"},{"id":946,"title":"Active Support Core Extensions","heading":"11 Extensions to Array","subheading":"11.1 Accessing","content":"active support augments arrays ease certain ways accessing them. example, returns subarray elements passed index: similarly, from returns tail from element passed index end. index greater than length array, returns empty array. method including returns array that includes passed elements: method excluding returns copy array excluding specified elements. this optimization enumerable#excluding that uses array#- instead array#reject performance reasons. methods second, third, fourth, fifth return corresponding element, second_to_last third_to_last (first last built-in). thanks social wisdom positive constructiveness around, forty_two also available."},{"id":947,"title":"Active Support Core Extensions","heading":"11 Extensions to Array","subheading":"11.2 Extracting","content":"method extract! removes returns elements which block returns true value. block given, enumerator returned instead."},{"id":948,"title":"Active Support Core Extensions","heading":"11 Extensions to Array","subheading":"11.3 Options Extraction","content":"when last argument method call hash, except perhaps &block argument, ruby allows omit brackets: that syntactic sugar used rails avoid positional arguments where there would many, offering instead interfaces that emulate named parameters. particular very idiomatic trailing hash options. method expects variable number arguments uses declaration, however, such options hash ends being item array arguments, where loses role. those cases, give options hash distinguished treatment with extract_options!. this method checks type last item array. hash pops returns otherwise returns empty hash. let's example definition caches_action controller macro: this method receives arbitrary number action names, optional hash options last argument. with call extract_options! obtain options hash remove from actions simple explicit way."},{"id":949,"title":"Active Support Core Extensions","heading":"11 Extensions to Array","subheading":"11.4 Conversions","content":"method to_sentence turns array into string containing sentence that enumerates items: this method accepts three options: defaults these options localized, their keys are: method to_formatted_s acts like to_s default. array contains items that respond however, symbol passed argument. that's typically used with collections active record objects. returned strings are: integers example above supposed come from respective calls method to_xml returns string containing representation receiver: sends to_xml every item turn, collects results under root node. items must respond to_xml, exception raised otherwise. default, name root element underscored dasherized plural name class first item, provided rest elements belong that type (checked with is_a?) they hashes. example above that's \"contributors\". there's element that does belong type first root node becomes \"objects\": receiver array hashes root element default also \"objects\": name children nodes default name root node singularized. examples above we've seen \"contributor\" \"object\". option :children allows these node names. default builder fresh instance builder::xmlmarkup. configure your builder :builder option. method also accepts options like :dasherize friends, they forwarded builder:"},{"id":950,"title":"Active Support Core Extensions","heading":"11 Extensions to Array","subheading":"11.5 Wrapping","content":"method array.wrap wraps argument array unless already array array-like). specifically: this method similar purpose kernel#array, there some differences: last point particularly worth comparing some enumerables: there's also related idiom that uses splat operator:"},{"id":951,"title":"Active Support Core Extensions","heading":"11 Extensions to Array","subheading":"11.6 Duplicating","content":"method array#deep_dup duplicates itself objects inside recursively with active support method object#deep_dup. works like array#map, sending deep_dup method each object inside."},{"id":952,"title":"Active Support Core Extensions","heading":"11 Extensions to Array","subheading":"11.7 Grouping","content":"method in_groups_of splits array into consecutive groups certain size. returns array with groups: yields them turn block passed: first example shows in_groups_of fills last group with many elements needed have requested size. change this padding value using second optional argument: tell method fill last group passing false: consequence false can't used padding value. method in_groups splits array into certain number groups. method returns array with groups: yields them turn block passed: examples above show that in_groups fills some groups with trailing element needed. group most these extra elements, rightmost any. groups that have them always last ones. change this padding value using second optional argument: tell method fill smaller groups passing false: consequence false can't used padding value. method split divides array separator returns resulting chunks. block passed separators those elements array which block returns true: otherwise, value received argument, which defaults nil, separator:"},{"id":953,"title":"Active Support Core Extensions","heading":"12 Extensions to Hash","subheading":"12.1 Conversions","content":"method to_xml returns string containing representation receiver: method loops over pairs builds nodes that depend values. given pair key, value: default root node \"hash\", that's configurable :root option. default builder fresh instance builder::xmlmarkup. configure your builder with :builder option. method also accepts options like :dasherize friends, they forwarded builder."},{"id":954,"title":"Active Support Core Extensions","heading":"12 Extensions to Hash","subheading":"12.2 Merging","content":"ruby built-in method hash#merge that merges hashes: active support defines more ways merging hashes that convenient. case collision hash argument wins merge. support option hashes with default values compact with this idiom: active support defines reverse_merge case prefer this alternative notation: bang version reverse_merge! that performs merge place: method reverse_update alias reverse_merge!, explained above. previous example found both hashes value argument wins. active support defines hash#deep_merge. deep merge, found both hashes their values hashes turn, then their merge becomes value resulting hash: method deep_merge! performs deep merge place."},{"id":955,"title":"Active Support Core Extensions","heading":"12 Extensions to Hash","subheading":"12.3 Deep duplicating","content":"method hash#deep_dup duplicates itself keys values inside recursively with active support method object#deep_dup. works like enumerator#each_with_object with sending deep_dup method each pair inside."},{"id":956,"title":"Active Support Core Extensions","heading":"12 Extensions to Hash","subheading":"12.4 Working with Keys","content":"method except returns hash with keys argument list removed, present: receiver responds convert_key, method called each arguments. this allows except play nice with hashes with indifferent access instance: there's also bang variant except! that removes keys place. method stringify_keys returns hash that stringified version keys receiver. does sending to_s them: case collision, value will most recently inserted into hash: this method useful example easily accept both symbols strings options. instance actionview::helpers::formhelper defines: second line safely access \"type\" key, user pass either :type \"type\". there's also bang variant stringify_keys! that stringifies keys place. besides that, deep_stringify_keys deep_stringify_keys! stringify keys given hash hashes nested example result method symbolize_keys returns hash that symbolized version keys receiver, where possible. does sending to_sym them: case collision, value will most recently inserted into hash: this method useful example easily accept both symbols strings options. instance actiontext::taghelper defines third line safely access :input key, user pass either :input \"input\". there's also bang variant symbolize_keys! that symbolizes keys place. besides that, deep_symbolize_keys deep_symbolize_keys! symbolize keys given hash hashes nested example result methods to_options to_options! aliases symbolize_keys symbolize_keys!, respectively. method assert_valid_keys receives arbitrary number arguments, checks whether receiver outside that list. does argumenterror raised. active record does accept unknown options when building associations, example. implements that control assert_valid_keys."},{"id":957,"title":"Active Support Core Extensions","heading":"12 Extensions to Hash","subheading":"12.5 Working with Values","content":"method deep_transform_values returns hash with values converted block operation. this includes values from root hash from nested hashes arrays. there's also bang variant deep_transform_values! that destructively converts values using block operation."},{"id":958,"title":"Active Support Core Extensions","heading":"12 Extensions to Hash","subheading":"12.6 Slicing","content":"method slice! replaces hash with only given keys returns hash containing removed key/value pairs."},{"id":959,"title":"Active Support Core Extensions","heading":"12 Extensions to Hash","subheading":"12.7 Extracting","content":"method extract! removes returns key/value pairs matching given keys. method extract! returns same subclass hash that receiver"},{"id":960,"title":"Active Support Core Extensions","heading":"12 Extensions to Hash","subheading":"12.8 Indifferent Access","content":"method with_indifferent_access returns activesupport::hashwithindifferentaccess receiver:"},{"id":961,"title":"Active Support Core Extensions","heading":"13 Extensions to Regexp","subheading":"13.1 multiline?","content":"method multiline? says whether regexp flag set, that whether matches newlines. rails uses this method single place, also routing code. multiline regexps disallowed route requirements this flag eases enforcing that constraint."},{"id":962,"title":"Active Support Core Extensions","heading":"14 Extensions to Range","subheading":"14.1 to_s","content":"active support extends method range#to_s that understands optional format argument. this writing only supported non-default format :db: example depicts, format generates between clause. that used active record support range values conditions."},{"id":963,"title":"Active Support Core Extensions","heading":"14 Extensions to Range","subheading":"14.2 === and include?","content":"methods range#=== range#include? whether some value falls between ends given instance: active support extends these methods that argument another range turn. that case test whether ends argument range belong receiver themselves:"},{"id":964,"title":"Active Support Core Extensions","heading":"14 Extensions to Range","subheading":"14.3 overlaps?","content":"method range#overlaps? says whether given ranges have non-void intersection:"},{"id":965,"title":"Active Support Core Extensions","heading":"15 Extensions to Date","subheading":"15.1 Calculations","content":"active support defines date.current today current time zone. that's like date.today, except that honors user time zone, defined. also defines date.yesterday date.tomorrow, instance predicates past?, today?, tomorrow?, next_day?, yesterday?, prev_day?, future?, on_weekday? on_weekend?, them relative date.current. when making date comparisons using methods which honor user time zone, make sure date.current date.today. there cases where user time zone might future compared system time zone, which date.today uses default. this means date.today equal date.yesterday. methods beginning_of_week end_of_week return dates beginning week, respectively. weeks assumed start monday, that changed passing argument, setting thread local date.beginning_of_week config.beginning_of_week. beginning_of_week aliased at_beginning_of_week end_of_week aliased at_end_of_week. methods monday sunday return dates previous monday next sunday, respectively. method next_week receives symbol with name english (default thread local date.beginning_of_week, config.beginning_of_week, :monday) returns date corresponding that day. method prev_week analogous: prev_week aliased last_week. both next_week prev_week work expected when date.beginning_of_week config.beginning_of_week set. methods beginning_of_month end_of_month return dates beginning month: beginning_of_month aliased at_beginning_of_month, end_of_month aliased at_end_of_month. methods beginning_of_quarter end_of_quarter return dates beginning quarter receiver's calendar year: beginning_of_quarter aliased at_beginning_of_quarter, end_of_quarter aliased at_end_of_quarter. methods beginning_of_year end_of_year return dates beginning year: beginning_of_year aliased at_beginning_of_year, end_of_year aliased at_end_of_year. method years_ago receives number years returns same date those many years ago: years_since moves forward time: such does exist, last corresponding month returned: last_year short-hand #years_ago(1). methods months_ago months_since work analogously months: such does exist, last corresponding month returned: last_month short-hand #months_ago(1). method weeks_ago works analogously weeks: most generic jump other days advance. this method receives hash with keys :years, :months, :weeks, :days, returns date advanced much present keys indicate: note previous example that increments negative. perform computation method first increments years, then months, then weeks, finally days. this order important towards months. example february 2010, want move month forward. method advance advances first month, then day, result while other around result would different: method change allows date which same receiver except given year, month, day: this method tolerant non-existing dates, change invalid argumenterror raised: duration objects added subtracted from dates: they translate calls since advance. example here correct jump calendar reform: method beginning_of_day returns timestamp beginning (00:00:00): method end_of_day returns timestamp (23:59:59): beginning_of_day aliased at_beginning_of_day, midnight, at_midnight. method beginning_of_hour returns timestamp beginning hour (hh:00:00): method end_of_hour returns timestamp hour (hh:59:59): beginning_of_hour aliased at_beginning_of_hour. method beginning_of_minute returns timestamp beginning minute (hh:mm:00): method end_of_minute returns timestamp minute (hh:mm:59): beginning_of_minute aliased at_beginning_of_minute. method receives number seconds argument returns timestamp those many seconds from midnight: similarly, since moves forward:"},{"id":966,"title":"Active Support Core Extensions","heading":"15 Extensions to Date","subheading":"15.2 Conversions","content":""},{"id":967,"title":"Active Support Core Extensions","heading":"16 Extensions to DateTime","subheading":"16.1 Calculations","content":"class datetime subclass date loading active_support/core_ext/date/calculations.rb inherit these methods their aliases, except that they will always return datetimes. following methods reimplemented need load active_support/core_ext/date/calculations.rb these ones: other hand, advance change also defined support more options, they documented below. following methods only implemented active_support/core_ext/date_time/calculations.rb they only make sense when used with datetime instance: active support defines datetime.current like time.now.to_datetime, except that honors user time zone, defined. instance predicates past? future? defined relative datetime.current. method seconds_since_midnight returns number seconds since midnight: method gives same datetime receiver expressed utc. this method also aliased getutc. predicate utc? says whether receiver time zone: most generic jump another datetime advance. this method receives hash with keys :years, :months, :weeks, :days, :hours, :minutes, :seconds, returns datetime advanced much present keys indicate. this method first computes destination date passing :years, :months, :weeks, :days date#advance documented above. after that, adjusts time calling since with number seconds advance. this order relevant, different ordering would give different datetimes some edge-cases. example date#advance applies, extend show order relevance related time bits. first move date bits (that have also relative order processing, documented before), then time bits example following computation: computed them other around, result would different: method change allows datetime which same receiver except given options, which include :year, :month, :day, :hour, :min, :sec, :offset, :start: hours zeroed, then minutes seconds (unless they have given values): similarly, minutes zeroed, then seconds (unless given value): this method tolerant non-existing dates, change invalid argumenterror raised: duration objects added subtracted from datetimes: they translate calls since advance. example here correct jump calendar reform:"},{"id":968,"title":"Active Support Core Extensions","heading":"17 Extensions to Time","subheading":"17.1 Calculations","content":"they analogous. please refer their documentation above take into account following differences: active support defines time.current today current time zone. that's like time.now, except that honors user time zone, defined. also defines instance predicates past?, today?, tomorrow?, next_day?, yesterday?, prev_day? future?, them relative time.current. when making time comparisons using methods which honor user time zone, make sure time.current instead time.now. there cases where user time zone might future compared system time zone, which time.now uses default. this means time.now.to_date equal date.yesterday. method all_day returns range representing whole current time. analogously, all_week, all_month, all_quarter all_year serve purpose generating time ranges. prev_day next_day return time last next day: prev_month next_month return time with same last next month: such does exist, last corresponding month returned: prev_year next_year return time with same day/month last next year: date 29th february leap year, obtain 28th: prev_quarter next_quarter return date with same previous next quarter: such does exist, last corresponding month returned: prev_quarter aliased last_quarter."},{"id":969,"title":"Active Support Core Extensions","heading":"17 Extensions to Time","subheading":"17.2 Time Constructors","content":"active support defines time.current time.zone.now there's user time zone defined, with fallback time.now: analogously datetime, predicates past?, future? relative time.current. time constructed lies beyond range supported time runtime platform, usecs discarded datetime object returned instead. duration objects added subtracted from time objects: they translate calls since advance. example here correct jump calendar reform:"},{"id":970,"title":"Active Support Core Extensions","heading":"18 Extensions to File","subheading":"18.1 atomic_write","content":"with class method file.atomic_write write file that will prevent reader from seeing half-written content. name file passed argument, method yields file handle opened writing. once block done atomic_write closes file handle completes job. example, action pack uses this method write asset cache files like all.css: accomplish this atomic_write creates temporary file. that's file code block actually writes completion, temporary file renamed, which atomic operation posix systems. target file exists atomic_write overwrites keeps owners permissions. however there cases where atomic_write cannot change file ownership permissions, this error caught skipped over trusting user/filesystem ensure file accessible processes that need auxiliary file written standard directory temporary files, pass directory your choice second argument. active support adds missing_name? nameerror, which tests whether exception raised because name passed argument. name given symbol string. symbol tested against bare constant name, string against fully qualified constant name. example, when action articlescontroller called rails tries optimistically articleshelper. that helper module does exist, exception that constant name raised should silenced. could case that articles_helper.rb raises nameerror actual unknown constant. that should reraised. method missing_name? provides distinguish both cases: active support adds is_missing? loaderror. given path name is_missing? tests whether exception raised that particular file (except perhaps \".rb\" extension). example, when action articlescontroller called rails tries load articles_helper.rb, that file exist. that's fine, helper module mandatory rails silences load error. could case that helper module does exist turn requires another library that missing. that case rails must reraise exception. method is_missing? provides distinguish both cases:"},{"id":971,"title":"Active Support Core Extensions","heading":"21 Extensions to Pathname","subheading":"21.1 existence","content":"existence method returns receiver named file exists otherwise returns +nil+. useful idioms like this: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":972,"title":"Classic to Zeitwerk HOWTO","heading":"1 What are classic and zeitwerk Modes?","subheading":"1 What are classic and zeitwerk Modes?","content":"from very beginning, rails rails used autoloader implemented active support. this autoloader known classic still available rails 6.x. rails does include this autoloader anymore. starting with rails rails ships with better autoload, which delegates zeitwerk gem. this zeitwerk mode. default, applications loading framework defaults zeitwerk mode, this only mode available rails classic autoloader been extremely useful, number issues that made autoloading tricky confusing times. zeitwerk developed address this, among other motivations. when upgrading rails 6.x, highly encouraged switch zeitwerk mode because better autoloader, classic mode deprecated. rails ends transition period does include classic mode. don't zeitwerk designed compatible with classic autoloader possible. have working application autoloading correctly today, chances switch will easy. many projects, small, have reported really smooth switches. this guide will help change autoloader with confidence. whatever reason find situation don't know resolve, don't hesitate open issue rails/rails @fxn."},{"id":973,"title":"Classic to Zeitwerk HOWTO","heading":"4 How to Activate zeitwerk Mode","subheading":"4.1 Applications running Rails 5.x or Less","content":"applications running rails version previous 6.0, zeitwerk mode available. need least rails 6.0."},{"id":974,"title":"Classic to Zeitwerk HOWTO","heading":"4 How to Activate zeitwerk Mode","subheading":"4.2 Applications running Rails 6.x","content":"applications running rails there scenarios. application loading framework defaults rails running classic mode, must opting hand. have have something similar this: noted, just delete override, zeitwerk mode default. other hand, application loading framework defaults need enable zeitwerk mode explicitly:"},{"id":975,"title":"Classic to Zeitwerk HOWTO","heading":"4 How to Activate zeitwerk Mode","subheading":"4.3 Applications Running Rails 7","content":"rails there only zeitwerk mode, need anything enable indeed, rails setter config.autoloader= does even exist. config/application.rb uses please delete line. verify application running zeitwerk mode, execute that prints true, zeitwerk mode enabled."},{"id":976,"title":"Classic to Zeitwerk HOWTO","heading":"6 Does my Application Comply with Zeitwerk Conventions?","subheading":"6.1 config.eager_load_paths","content":"compliance test runs only eager loaded files. therefore, order verify zeitwerk compliance, recommended have autoload paths eager load paths. this already case default, project custom autoload paths configured just like this: those eager loaded won't verified. adding them eager load paths easy:"},{"id":977,"title":"Classic to Zeitwerk HOWTO","heading":"6 Does my Application Comply with Zeitwerk Conventions?","subheading":"6.2 zeitwerk:check","content":"once zeitwerk mode enabled configuration eager load paths double-checked, please run: successful check looks like this: there additional output depending application configuration, last \"all good!\" what looking for. double-check explained previous section determined actually there have some custom autoload paths outside eager load paths, task will detect warn about them. however, test suite loads those files successfully, you're good. now, there's file that does define expected constant, task will tell you. does file time, because moved failure loading file could cascade into other failures unrelated check want error report would confusing. there's constant reported, that particular task again. repeat until \"all good!\". take example: european tax. file app/models/vat.rb defines autoloader expects vat, why?"},{"id":978,"title":"Classic to Zeitwerk HOWTO","heading":"6 Does my Application Comply with Zeitwerk Conventions?","subheading":"6.3 Acronyms","content":"this most common kind discrepancy find, with acronyms. let's understand that error message. classic autoloader able autoload because input name missing constant, vat, invokes underscore which yields vat, looks file called vat.rb. works. input autoloader file system. give file vat.rb, zeitwerk invokes camelize vat, which yields vat, expects file define constant vat. that what error message says. fixing this easy, only need tell inflector about this acronym: doing affects active support inflects globally. that fine, prefer also pass overrides inflectors used autoloaders: with this option have more control, because only files called exactly vat.rb directories exactly called will inflected vat. file called vat_rules.rb affected that define vatrules just fine. this handy project this kind naming inconsistencies. with that place, check passes! once good, recommended keep validating project test suite. section check zeitwerk compliance test suite explains this."},{"id":979,"title":"Classic to Zeitwerk HOWTO","heading":"6 Does my Application Comply with Zeitwerk Conventions?","subheading":"6.4 Concerns","content":"autoload eager load from standard structure with concerns subdirectories like default, app/models/concerns belongs autoload paths therefore assumed root directory. default, app/models/concerns/foo.rb should define foo, concerns::foo. your application uses concerns namespace, have options:"},{"id":980,"title":"Classic to Zeitwerk HOWTO","heading":"6 Does my Application Comply with Zeitwerk Conventions?","subheading":"6.5 Having app in the autoload paths","content":"some projects want something like app/api/base.rb define api::base, autoload paths accomplish that. since rails adds subdirectories autoload paths automatically (with exceptions), have another situation which there nested root directories, similar what happens with app/models/concerns. that setup longer works however, keep that structure, just delete app/api from autoload paths initializer: beware subdirectories that have files autoloaded/eager loaded. example, application app/admin with resources activeadmin, need ignore them. same assets friends: without that configuration, application would eager load those trees. would app/admin because files define constants, would define views module, example, unwanted side-effect. see, having autoload paths technically possible, tricky."},{"id":981,"title":"Classic to Zeitwerk HOWTO","heading":"6 Does my Application Comply with Zeitwerk Conventions?","subheading":"6.6 Autoloaded Constants and Explicit Namespaces","content":"namespace defined file, hotel here: hotel constant using class module keywords. example: good. alternatives like  won't work, child objects like hotel::pricing won't found. this restriction only applies explicit namespaces. classes modules defining namespace defined using those idioms."},{"id":982,"title":"Classic to Zeitwerk HOWTO","heading":"6 Does my Application Comply with Zeitwerk Conventions?","subheading":"6.7 One file, one constant (at the same top-level)","content":"classic mode could technically define several constants same top-level have them reloaded. example, given while could autoloaded, autoloading would mark autoloaded too. this case zeitwerk mode, need move file bar.rb. file, top-level constant. this affects only constants same top-level example above. inner classes modules fine. example, consider application reloads foo, will reload foo::innerclass too."},{"id":983,"title":"Classic to Zeitwerk HOWTO","heading":"6 Does my Application Comply with Zeitwerk Conventions?","subheading":"6.8 Globs in config.autoload_paths","content":"beware configurations that wildcards like every element config.autoload_paths should represent top-level namespace (object). that won't work. this, just remove wildcards:"},{"id":984,"title":"Classic to Zeitwerk HOWTO","heading":"6 Does my Application Comply with Zeitwerk Conventions?","subheading":"6.9 Spring and the test Environment","content":"spring reloads application code something changes. test environment need enable reloading that work: otherwise you'll this error: this performance penalty."},{"id":985,"title":"Classic to Zeitwerk HOWTO","heading":"6 Does my Application Comply with Zeitwerk Conventions?","subheading":"6.10 Bootsnap","content":"please make sure depend least bootsnap 1.4.4. task zeitwerk:check handy while migrating. once project compliant, recommended automate this check. order enough eager load application, which zeitwerk:check does, indeed."},{"id":986,"title":"Classic to Zeitwerk HOWTO","heading":"7 Check Zeitwerk Compliance in the Test Suite","subheading":"7.1 Continuous Integration","content":"your project continuous integration place, good idea eager load application when suite runs there. application cannot eager loaded whatever reason, want know better than production, right? typically some environment variable indicate test suite running there. example, could starting with rails newly generated applications configured that default."},{"id":987,"title":"Classic to Zeitwerk HOWTO","heading":"7 Check Zeitwerk Compliance in the Test Suite","subheading":"7.2 Bare Test Suites","content":"your project does have continuous integration, still eager load test suite calling rails.application.eager_load!: experience, projects generally this. i've seen couple, have heard others. rails application require exclusively load code from from party like dependencies standard library. never load autoloadable application code with require. this idea already classic here. please delete require calls that type."},{"id":988,"title":"Classic to Zeitwerk HOWTO","heading":"9 New Features You Can Leverage","subheading":"9.1 Delete require_dependency calls","content":"known cases require_dependency have been eliminated with zeitwerk. should grep project delete them. your application uses single table inheritance, please single table inheritance section autoloading reloading constants (zeitwerk mode) guide."},{"id":989,"title":"Classic to Zeitwerk HOWTO","heading":"9 New Features You Can Leverage","subheading":"9.2 Qualified Names in Class and Module Definitions Are Now Possible","content":"robustly constant paths class module definitions: gotcha aware that, depending order execution, classic autoloader could sometimes able autoload foo::wadus that does match ruby semantics because nesting, won't work zeitwerk mode. find such corner case qualified name foo::wadus: nesting:"},{"id":990,"title":"Classic to Zeitwerk HOWTO","heading":"9 New Features You Can Leverage","subheading":"9.3 Thread-safety Everywhere","content":"classic mode, constant autoloading thread-safe, though rails locks place example make requests thread-safe. constant autoloading thread-safe zeitwerk mode. example, autoload multi-threaded scripts executed runner command."},{"id":991,"title":"Classic to Zeitwerk HOWTO","heading":"9 New Features You Can Leverage","subheading":"9.4 Eager Loading and Autoloading are Consistent","content":"classic mode, app/models/foo.rb defines bar, won't able autoload that file, eager loading will work because loads files recursively blindly. this source errors test things first eager loading, execution fail later autoloading. zeitwerk mode both loading modes consistent, they fail same files. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":992,"title":"Múltiplos bancos de dados com Active Record","heading":null,"subheading":null,"content":"conforme aplicação cresce popularidade, você precisará expandir aplicação suporte novos usuários seus dados. dimensões qual aplicação precisará expandir âmbito banco dados. rails agora possui suporte múltiplos bancos dados, você precise armazenar tudo lugar. presente momento, seguintes funcionalidades suportadas: seguintes funcionalidades (ainda) suporte: rails tenta fazer maior parte trabalho você, porém, mesmo assim, ainda existem alguns passos você precisa seguir preparar aplicação múltiplos bancos dados. digamos temos aplicação único banco escrita, precisamos adicionar novo banco algumas tabelas estamos criando. nome deste novo banco será \"animals\". arquivo database.yml ficará assim: vamos adicionar réplica primeira configuração segundo banco chamado \"animals\", também possuindo réplica. fazer isso, precisamos alterar arquivo database.yml, atual configuração níveis nova configuração, níveis. houver configuração primária, esta será usada como padrão. existir configuração nome \"primary\", rails usará primeira configuração encontrar como padrão cada ambiente. configurações padrão usarão nomes arquivo padrão rails. exemplo, configurações primárias usarão arquivo schema.rb esquema, enquanto todas outras configurações usarão [configuration_namespace]_schema.rb. quando usar múltiplos bancos, existem algumas configurações importantes. primeiro lugar, nome banco configuração primary primary_replica precisam mesmos, pois estes contém mesmos dados. isso também aplica bancos animals animals_replica. segundo, nome usuário bancos escrita suas réplicas devem diferentes, permissões usuário réplica devem somente leitura. quando usar banco réplica, preciso adicionar replica: true configuração questão, dentro database.yml. isso, rails saberá qual escrita qual réplica. rails também executará determinadas tarefas, como migrações, réplicas. último, novos bancos escrita, preciso adicionar migrations_paths diretório onde ficarão migrações. veremos migration_paths mais detalhes decorrer deste guia. agora temos novo banco, vamos definir model conexão. usar este novo banco, necessário criar classe abstrata conectar banco animals. seguida, atualizaremos applicationrecord saiba nossa nova réplica. você usar classe nome diferente registro aplicação, precisará definir primary_abstract_class, rails saiba qual classe activerecord::base deve compartilhar conexão com. classes conectam primary/primary_replica podem herdar classe primária como aplicações rails padrão: padrão, rails espera roles escrita leitura, banco primário réplica, respectivamente. você tiver sistema legado, possível existam roles deseja mudar. neste caso, possível definir novo nome role configurações aplicação. importante conectar banco único model seguida, herdar tabelas, invés abrir várias conexões individuais. usuários banco limite conexões abertas, fazer isso, estaríamos multiplicando número conexões, visto rails nome classe model nome conexão. agora configuramos database.yml novo model, hora criar bancos dados. rails inclui todas tasks necessárias usar múltiplos bancos. possível todos comandos disponíveis usando bin/rails executar comando como bin/rails db:create criará tanto banco primário quanto banco animals. observe existe comando criar usuários banco dados. estes precisam criados manualmente, suporte usuários somente leitura réplicas. deseja criar somente banco animals, basta executar bin/rails db:create:animals. você gostaria conectar banco dados externo nenhum gerenciamento banco dados usando comandos, como gerenciamento schema, migrations, seeds, etc., você pode definir opção configuração banco dados database_tasks: false. padrão definida como verdadeira. migrações múltiplos bancos devem ficar seus próprios diretórios, prefixados pelo nome chave banco especificado configurações. também preciso definir migrations_paths configurações banco, rails saiba onde encontrar. exemplo, banco animals buscaria suas migrações diretório db/animals_migrate, mesma forma banco primary buscaria db/migrate. generators rails agora permitem especificar opção --database, modo arquivo seja gerado diretório correto. comando pode executado seguinte forma: estiver usando generators rails, generators scaffold model criarão classe abstrata você. basta especificar chave banco comando. classe mesmo nome banco palavra record será criada. neste exemplo, banco animals, então teremos animalsrecord: model gerado herdará automaticamente animalsrecord. note: visto rails sabe qual banco dados réplica escritor, você precisará adicionar isso classe abstrata quando tiver terminado. rails criará nova classe somente vez. esta será sobrescrita futuros scaffolds mesmo deletada, caso scaffold seja excluído. você possui classe abstrata nome difere animalsrecord, você pode especificar opção --parent desejar classe abstrata diferente: isto fará geração animalsrecord seja ignorada, visto você indicou rails usar outra classe pai. último, conseguir usar réplica leitura aplicação, será necessário habilitar middleware troca automática. troca automática permite aplicação alterne entre bancos escrita réplica, baseado método http também houve escrita recente pela requisição usuário. aplicação receber requisição post, put, delete, patch, conexão será feita automaticamente banco escrita. determinado tempo após escrita, leitura será feita banco primário. métodos head, aplicação usará réplica, menos tenha ocorrido escrita recente. ativar middleware troca automática conexão, você pode executar gerados troca automática: então descomentar seguintes linhas: rails garante chamado \"leia própria escrita\" encaminhará requisições método head banco escrita, estes ocorrerem dentro intervalo especificado pelo delay. você deve alterar esta configuração melhor atender infraestrutura banco dados. rails garante \"leia escrita recente\" outros usuários dentro intervalo delay, encaminhará requisições head réplica, menos eles tenham escrito algo recentemente. troca automática conexão rails relativamente simples deliberadamente muita coisa. objetivo sistema demonstre como fazer troca automática conexão, seja suficientemente flexível pessoas desenvolvedoras possam customizar. setup rails permite você altere facilidade como feita troca automática, quais parâmetros baseia. digamos você queira usar cookies invés session decidir quando trocar conexões. você poderia escrever própria classe: seguida, especifique nova classe middleware: existem casos quais você pode querer aplicação conecte banco escrita réplica, onde troca automática conexão será adequada. exemplo, suponhamos exista requisição particular sempre deverá encaminhada réplica, mesmo tenha método post. isso, rails possui método chamado connected_to, trocará conexão desejada. role definido connected_to buscará conexões ligadas naquele determinado handler role). handler conexão reading receberá todas conexões feitas através connects_to, tenham role reading. observe connected_to role definido buscará trocará conexão existente, usando nome conexão. isso quer dizer passar role desconhecido inválido, como exemplo, connected_to(role: :nonexistent), causará erro seguinte mensagem: activerecord::connectionnotestablished connection pool 'activerecord::base' found 'nonexistent' role.) você quiser rails garanta todas consultas executadas sejam somente leitura, passe prevent_writes: true. isso apenas impede consultas pareçam gravações sejam enviadas banco dados. você também deve configurar banco dados réplica executado modo somente leitura. fragmentação horizontal quando você divide banco dados reduzir número linhas cada servidor banco dados, mantém mesmo esquema \"fragmentos\". isso comumente chamado fragmentação \"multilocatário\" (multi-tenant). suportar fragmentação horizontal rails semelhante banco dados múltiplo vertical fragmentação existe desde rails 6.0. fragmentos declarados configuração três camadas como este: models então conectados connects_to meio chaveshards: então, models podem trocar conexões manualmente meio connected_to. usando sharding, role umshard devem passados: fragmentação horizontal também oferece suporte réplicas leitura. você pode trocar papel (role) fragmento (shard) connected_to. applications able automatically switch shards request using provided middleware. shardselector middleware provides framework automatically swapping shards. rails provides basic framework determine which shard switch allows applications write custom strategies swapping needed. shardselector takes options (currently only lock supported) that used middleware alter behavior. lock true default will prohibit request from switching shards once inside block. lock false, then shard swapping will allowed. tenant based sharding, lock should always true prevent application code from mistakenly switching between tenants. same generator database selector used generate file automatic shard swapping: then file uncomment following: applications must provide code resolver depends application specific models. example resolver would look like this: rails 6.1+, active record provides internal connection management. most cases applications will need make changes except opt-in behavior upgrading from below) setting config.active_record.legacy_connection_handling false. have single database application, other changes will required. have multiple database application following changes required your application using these methods: rails possível alternar conexões banco dados invés todos bancos dados globalmente. usar este recurso, você deve primeiro definir config.active_record.legacy_connection_handling parafalse configurações aplicação. maioria aplicações precisam fazer nenhuma outra alteração, apis públicas mesmo comportamento. consulte seção acima como habilitar migrar legacy_connection_handling. legacy_connection_handling definido como false, qualquer classe conexão abstrata será capaz alternar conexões afetar outras conexões. esse útil mudar suas consultas animalsrecord partir réplica enquanto garante suas consultas applicationrecord primário. também possível trocar conexões granularmente fragmentos. mudar apenas cluster banco dados primário, applicationrecord: activerecord::base.connected_to mantém capacidade alternar conexões globalmente."},{"id":993,"title":"Múltiplos bancos de dados com Active Record","heading":"9 Alternando Conexão de Banco de Dados Granular","subheading":"9.1 Manipulando associações com join entre bancos de dados","content":"partir rails 7.0+, active record opção manipular associações realizariam join vários bancos dados. você many through associação through você deseja desabilitar join realizar mais consultas, passe opção disable_joins: true. exemplo: anteriormente chamando @dog.treats disable_joins @dog.yard disable_joins geraria erro porque bancos dados conseguem lidar joins entre clusters. opção disable_joins, rails gerar múltiplas consultas seleção evitar tentativa join entre clusters. associação acima, @dog.treats geraria seguinte sql: enquanto @dog.yard geraria seguinte sql: algumas coisas importantes serem observadas esta opção: pode haver implicações desempenho, pois agora duas mais consultas serão executadas (dependendo associação) join. seleção humans retornou grande número select treats pode enviar muitos ids. como estamos mais realizando join, consulta ordem limite agora classificada memória, pois ordem tabela pode aplicada outra tabela. essa configuração deve adicionada todas associações quais você deseja participação seja desabilitada. rails pode adivinhar isso você porque carregamento associação lazy, carregar treats @dog.treats rails precisa saber qual deve gerado."},{"id":994,"title":"Múltiplos bancos de dados com Active Record","heading":"9 Alternando Conexão de Banco de Dados Granular","subheading":"9.2 Cache de Schema","content":"você quiser carregar cache schema cada banco dados, você deve definir schema_cache_path cada configuração banco dados definir config.active_record.lazily_load_schema_cache true configuração aplicação. observe isso carregará cache lentamente quando conexões banco dados forem estabelecidas."},{"id":995,"title":"Múltiplos bancos de dados com Active Record","heading":"10 Caveats","subheading":"10.1 Load Balancing Replicas","content":"rails also doesn't support automatic load balancing replicas. this very dependent your infrastructure. implement basic, primitive load balancing future, application scale this should something your application handles outside rails. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":996,"title":"Active Record and PostgreSQL","heading":null,"subheading":null,"content":"order postgresql adapter need have least version installed. older versions supported. started with postgresql have look configuring rails guide. describes properly active record postgresql. postgresql offers number specific datatypes. following list types, that supported postgresql adapter."},{"id":997,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.1 Bytea","content":""},{"id":998,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.2 Array","content":""},{"id":999,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.3 Hstore","content":""},{"id":1000,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.4 JSON and JSONB","content":""},{"id":1001,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.5 Range Types","content":"this type mapped ruby range objects."},{"id":1002,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.6 Composite Types","content":"currently there special support composite types. they mapped normal text columns:"},{"id":1003,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.7 Enumerated Types","content":"currently there special support enumerated types. they mapped normal text columns: value before/after existing should alter type: hint: show values enums have, should call this query bin/rails psql console:"},{"id":1004,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.8 UUID","content":"uuid type define references migrations: this section more details using uuids primary key."},{"id":1005,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.9 Bit String Types","content":""},{"id":1006,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.10 Network Address Types","content":"types inet cidr mapped ruby ipaddr objects. macaddr type mapped normal text."},{"id":1007,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.11 Geometric Types","content":"geometric types, with exception points mapped normal text. point casted array containing coordinates."},{"id":1008,"title":"Active Record and PostgreSQL","heading":"1 Datatypes","subheading":"1.12 Interval","content":"this type mapped activesupport::duration objects. opcionalmente, você pode armazenar vetor como coluna gerada automaticamente postgresql 12.0): imagine você precisa trabalhar banco dados legado contendo seguintes tabelas: esta tabela certamente segue convenções rails. como visões postgresql atualizáveis padrão, podemos envolver isso seguinte maneira: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1009,"title":"Atualizando o Ruby on Rails","heading":"1 Conselho Geral","subheading":"1 Conselho Geral","content":"antes tentar atualizar aplicação existente, você deve certeza possui razão fazê-lo. então tenha mente alguns fatores: necessidade novas funcionalidades, crescente dificuldade encontrar suporte código mais antigo, tempo disponível habilidades, entre outros."},{"id":1010,"title":"Atualizando o Ruby on Rails","heading":"1 Conselho Geral","subheading":"1.1 Cobertura de Testes","content":"melhor maneira garantir aplicação ainda funciona após atualização possuir cobertura testes antes começar processo. você tiver testes automatizados maior parte aplicação, será necessário gastar algum tempo realizando testes manuais todas partes alteradas. caso atualização rails, isso significa cada umas funcionalidades dentro aplicação. faça mesmo favor tenha certeza cobertura teste antes iniciar atualização."},{"id":1011,"title":"Atualizando o Ruby on Rails","heading":"1 Conselho Geral","subheading":"1.2 Versões Ruby","content":"rails geralmente mantém próximo versão mais recente ruby quando liberado: ideia atualizar ruby rails separadamente. atualize ruby mais recente puder primeiro seguida, atualize rails."},{"id":1012,"title":"Atualizando o Ruby on Rails","heading":"1 Conselho Geral","subheading":"1.3 O Processo de Atualização","content":"quando estiver atualizando versão rails, melhor devagar, versão minor vez, fazer avisos depreciação. versões rails numeradas maneira major.minor.patch. versões major minor permissão alterar pública, isso pode causar erros aplicação. versões patch incluem apenas correções bug, alteram nenhuma pública. processo deve correr seguinte maneira: repita este processo chegar versão desejada rails. alternar entre versões: você pode encontrar lista todas gems rails lançadas aqui."},{"id":1013,"title":"Atualizando o Ruby on Rails","heading":"1 Conselho Geral","subheading":"1.4 A Tarefa de Atualização","content":"rails fornece comando rails app:update. execute este comando após atualizar versão rails gemfile. isto ajudará criação novos arquivos alteração arquivos antigos sessão interativa. esqueça revisar diferença, verificar houveram mudanças inesperadas."},{"id":1014,"title":"Atualizando o Ruby on Rails","heading":"1 Conselho Geral","subheading":"1.5 Configurar Padrões de Framework","content":"nova versão rails pode configurações padrão diferentes versão anterior. entanto, após seguir passos descritos acima, aplicação ainda estaria rodando configurações padrão versão anterior rails. isso porque valor config.load_defaults config/application.rb ainda alterado. permitir você atualize novos padrões tarefa atualização criou arquivo config/initializers/new_framework_defaults_x.y.rb (com versão desejada rails nome arquivo). você deve habilitar novos padrões configuração descomentando-os arquivo; isso pode feito gradualmente longo várias implantações. assim aplicação estiver pronta rodar novos padrões, você pode remover este arquivo inverter valor config.load_defaults."},{"id":1015,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.1 ActionView::Helpers::UrlHelper#button_to changed behavior","content":"starting from rails button_to renders form with patch http verb persisted active record object used build button url. keep current behavior consider explicitly passing method: option: using helper build url:"},{"id":1016,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.2 Spring","content":"your application uses spring, needs upgraded least version 3.0.0. otherwise you'll also, make sure config.cache_classes false config/environments/test.rb."},{"id":1017,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.3 Sprockets is now an optional dependency","content":"rails doesn't depend sprockets-rails anymore. your application still needs sprockets, make sure sprockets-rails your gemfile."},{"id":1018,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.4 Applications need to run in zeitwerk mode","content":"applications still running classic mode have switch zeitwerk mode. please check classic zeitwerk howto guide details."},{"id":1019,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.5 The setter config.autoloader= has been deleted","content":"rails there configuration point autoloading mode, config.autoloader= been deleted. :zeitwerk whatever reason, just remove"},{"id":1020,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.6 ActiveSupport::Dependencies private API has been deleted","content":"private activesupport::dependencies been deleted. that includes methods like hook!, unhook!, depend_on, require_or_load, mechanism, many others. highlights: auxiliary internal classes modules also gone, like like activesupport::dependencies::reference, activesupport::dependencies::blamable, others."},{"id":1021,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.7 Autoloading during initialization","content":"applications that autoloaded reloadable constants during initialization outside to_prepare blocks those constants unloaded this warning issued since rails 6.0: still this warning logs, please check section about autoloading when application boots autoloading guide. you'd nameerror rails otherwise."},{"id":1022,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.8 Ability to configure config.autoload_once_paths","content":"config.autoload_once_paths body application class defined config/application.rb configuration environments config/environments/*. similarly, engines configure that collection class body engine class configuration environments. after that, collection frozen, autoload from those paths. particular, autoload from there during initialization. they managed rails.autoloaders.once autoloader, which does reload, only autoloads/eager loads. configured this setting after environments configuration been processed getting frozenerror, please just move code."},{"id":1023,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.9 ActionDispatch::Request#content_type now returned Content-Type header as it is.","content":"previously, actiondispatch::request#content_type returned value does contain charset part. this behavior changed returned content-type header containing charset part want just mime type, please actiondispatch::request#media_type instead. before: after:"},{"id":1024,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.10 Key generator digest class changing to use SHA256","content":"default digest class generator changing from sha1 sha256. this consequences encrypted message generated rails, including encrypted cookies. order able read messages using digest class necessary register rotator. following example rotator encrypted cookies."},{"id":1025,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.11 Digest class for ActiveSupport::Digest changing to SHA256","content":"default digest class activesupport::digest changing from sha1 sha256. this consequences things like etags that will change cache keys well. changing these keys have impact cache rates, careful watch this when upgrading hash."},{"id":1026,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.12 New ActiveSupport::Cache serialization format","content":"faster more compact serialization format introduced. enable must config.active_support.cache_format_version 7.0: simply: however rails applications able read this serialization format, ensure seamless upgrade must first deploy your rails upgrade with config.active_support.cache_format_version 6.1, then only once rails processes have been updated config.active_support.cache_format_version 7.0. rails able read both formats cache won't invalidated during upgrade."},{"id":1027,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.13 Active Storage video preview image generation","content":"video preview image generation uses ffmpeg's scene change detection generate more meaningful preview images. previously first frame video would used that caused problems video faded from black. this change requires ffmpeg v3.4+."},{"id":1028,"title":"Atualizando o Ruby on Rails","heading":"2 Upgrading from Rails 6.1 to Rails 7.0","subheading":"2.14 Active Storage default variant processor changed to :vips","content":"apps, image transformation will libvips instead imagemagick. this will reduce time taken generate variants well memory usage, improving response times apps that rely active storage serve their images. :mini_magick option being deprecated, fine keep using migrate existing libvips, set: will then need change existing image transformation code image_processing macros, replace imagemagick's options with libvips' options. don't this, when switch vips will this error: implicit conversion float from string. don't this when migrating vips, will following error: unable call crop: supplied arguments, operation needs vips more strict than imagemagick when comes cropping: don't this when migrating vips, will following error: extract_area: extract area vips uses black default background color resize_and_pad, instead white like imagemagick. that using background option: vips will auto rotate images using exif value when processing variants. were storing rotation values from user uploaded photos apply rotation with imagemagick, must stop doing that: vips uses different option make monochrome images: jpeg  webp  active storage encodes into image list transformations that must performed. your caching these urls, your images will break after deploy code production. because this must manually invalidate your affected cache keys. example, have something like this view: invalidate cache either touching product, changing cache key: mais informações sobre mudanças feitas rails consulte notas lançamento."},{"id":1029,"title":"Atualizando o Ruby on Rails","heading":"3 Atualizando do Rails 6.0 para o Rails 6.1","subheading":"3.1 Rails.application.config_for o valor de retorno não oferece mais suporte para acesso com chaves String.","content":"dado arquivo configuração como este: isso costumava retornar hash qual você podia acessar valores chaves string. isso descontinuado agora funciona mais. você pode chamar with_indifferent_access valor retorno deconfig_for ainda quiser acessar valores chaves string, exemplo:"},{"id":1030,"title":"Atualizando o Ruby on Rails","heading":"3 Atualizando do Rails 6.0 para o Rails 6.1","subheading":"3.2 Respostas do tipo de conteúdo ao utilizar respond_to#any","content":"cabeçalho (header) tipo conteúdo (content-type) retornado resposta pode diferente rails retornou, mais especificamente aplicação formato respond_to |format| format.any tipo conteúdo será baseado bloco fornecido formato solicitação. exemplo: comportamento anterior retornar tipo conteúdo resposta text/csv impreciso resposta json está sendo renderizada. comportamento atual retorna corretamente tipo conteúdo resposta application/json. aplicação depende comportamento incorreto anterior, você incentivado especificar quais formatos ação aceita, seja."},{"id":1031,"title":"Atualizando o Ruby on Rails","heading":"3 Atualizando do Rails 6.0 para o Rails 6.1","subheading":"3.3 ActiveSupport::Callbacks#halted_callback_hook agora recebe um segundo argumento","content":"active support permite você substitua halted_callback_hook sempre retorno chamada pare sequência. este método agora recebe segundo argumento nome retorno chamada está sendo interrompido. você tiver classes substituem esse método, certifique-se aceite dois argumentos. observe isso mudança significativa ciclo depreciação anterior (por motivos desempenho). exemplo:"},{"id":1032,"title":"Atualizando o Ruby on Rails","heading":"3 Atualizando do Rails 6.0 para o Rails 6.1","subheading":"3.4 O método de classe helper nos controllers usa String#constantize","content":"conceitualmente antes rails resultou agora isso: essa mudança compatível versões anteriores maioria aplicações, nesse caso, você precisa fazer nada. tecnicamente, entanto, controllers podem configurar helpers_path apontar diretório $load_path estava caminhos carregamento automático. esse caso mais compatível imediato. módulo auxiliar auto-carregável, aplicação responsável carregá-lo antes chamar helper."},{"id":1033,"title":"Atualizando o Ruby on Rails","heading":"3 Atualizando do Rails 6.0 para o Rails 6.1","subheading":"3.5 Redirecionamento para HTTPS vindo de HTTP agora usará o código de status 308 HTTP","content":"código status http padrão usado actiondispatch::ssl redirecionar solicitações get/head http https alterado conforme definido https://tools.ietf.org/html/rfc7538."},{"id":1034,"title":"Atualizando o Ruby on Rails","heading":"3 Atualizando do Rails 6.0 para o Rails 6.1","subheading":"3.6 Active Storage agora requer Processamento de Imagem","content":"processar variantes active storage, agora necessário image_processing empacotada usar diretamente mini_magick. processamento imagem configurado padrão usar mini_magick bastidores, então maneira mais fácil atualizar substituindo mini_magick pela image_processing certificando-se remover explícito combine_options, mais necessário. facilitar leitura, você pode desejar alterar chamadas resize brutas macros image_processing. exemplo, você pode fazer respectivamente: mais informações sobre mudanças feitas rails consulte notas lançamento."},{"id":1035,"title":"Atualizando o Ruby on Rails","heading":"4 Atualizando do Rails 5.2 para o Rails 6.0","subheading":"4.1 Usando Webpacker","content":"webpacker compilador javascript padrão rails você estiver atualizando aplicação, ativado padrão. você quiser usar webpacker, adicione gemfile instale:"},{"id":1036,"title":"Atualizando o Ruby on Rails","heading":"4 Atualizando do Rails 5.2 para o Rails 6.0","subheading":"4.2 Forçar SSL","content":"método force_ssl controllers descontinuado será removido rails 6.1. você encorajado habilitar config.force_ssl impor conexões https longo aplicação. você precisar isentar certos endpoints redirecionamento, você pode usar config.ssl_options configurar esse comportamento."},{"id":1037,"title":"Atualizando o Ruby on Rails","heading":"4 Atualizando do Rails 5.2 para o Rails 6.0","subheading":"4.3 Propósito (Purpose) e metadados de expiração agora estão incorporados em cookies assinados e criptografados para maior segurança","content":"melhorar segurança, rails incorpora metadados propósito expiração dentro valor cookies criptografados assinados. rails pode então impedir ataques tentam copiar valor assinado/criptografado cookie usá-lo como valor outro cookie. esses novos metadados incorporados tornam esses cookies incompatíveis versões rails anteriores 6.0. você deseja seus cookies sejam lidos pelo rails anteriores, ainda está validando deploy deseja capaz reverter (rollback) rails.application.config.action_dispatch.use_cookies_with_metadata false."},{"id":1038,"title":"Atualizando o Ruby on Rails","heading":"4 Atualizando do Rails 5.2 para o Rails 6.0","subheading":"4.4 Todos os pacotes npm foram movidos para o escopo @rails","content":"você estava anteriormente carregando qualquer pacotes actioncable, activestorage, rails-ujs através npm/yarn, você deve atualizar nomes destas dependências antes atualizá-los 6.0.0:"},{"id":1039,"title":"Atualizando o Ruby on Rails","heading":"4 Atualizando do Rails 5.2 para o Rails 6.0","subheading":"4.5 Mudanças na API do Action Cable JavaScript","content":"pacote action cable javascript convertido coffeescript es2015, agora publicamos código-fonte distribuição pelo npm. esta versão inclui algumas mudanças importantes partes opcionais javascript action cable:"},{"id":1040,"title":"Atualizando o Ruby on Rails","heading":"4 Atualizando do Rails 5.2 para o Rails 6.0","subheading":"4.6 ActionDispatch::Response#content_type agora retorna o cabeçalho (header) do tipo de conteúdo (Content-Type) sem modificação","content":"anteriormente, valor retorno actiondispatch::response#content_type continha parte conjunto caracteres. este comportamento alterado incluir também parte conjunto caracteres omitida anteriormente. você quiser apenas tipo mime, actiondispatch::response#media_type lugar. antes: depois:"},{"id":1041,"title":"Atualizando o Ruby on Rails","heading":"4 Atualizando do Rails 5.2 para o Rails 6.0","subheading":"4.7 Carregamento Automático","content":"configuração padrão rails ativa modo carregamento automático zeitwerk cruby. nesse modo, carregamento automático, recarregamento carregamento antecipado gerenciados pelo zeitwerk. você estiver usando padrões versão anterior rails, você pode habilitar zeitwerk assim: geral, aplicações precisam usar zeitwerk diretamente. rails configura coisas acordo contrato existente: config.autoload_paths,config.cache_classes, etc. embora aplicações devam seguir essa interface, objeto carregador zeitwerk atual pode acessado como isso pode útil você precisar pré-carregar classes herança tabela única (single table inheritance stis) configurar inflector customizado, exemplo. aplicação está sendo atualizada carregada automaticamente forma correta, estrutura projeto deve compatível. entanto, modo clássico entende nomes arquivos (underscore), enquanto modo zeitwerk entende nomes arquivos (camelize). esses helpers sempre inversos entre especialmente houver acrônimos envolvidos. exemplo, \"foo\".underscore \"foo\", \"foo\".camelize \"foo\", \"foo compatibilidade pode verificada tarefa zeitwerk:check: todos casos conhecidos require_dependency foram eliminados, você deve executar grep projeto excluí-los. aplicação herança tabela única (sti), consulte seção herança tabela única guia autoloading reloading constants (zeitwerk mode). agora você pode usar constant paths forma robusta definições classe módulo: problema conta que, dependendo ordem execução, auto carregamento clássico pode vezes capaz carregar automaticamente foo::wadus isso corresponde semântica ruby porque está aninhamento funcionará modo zeitwerk. você encontrar esse caso, você pode usar nome qualificado foo::wadus: adicione aninhamento: você pode carregar automaticamente antecipadamente partir estrutura padrão como nesse caso, app/models/concerns considerado diretório raiz (porque pertence caminhos carregamento automático) ignorado como namespace. portanto, app/models/concern/foo.rb deve definir foo, concerns::foo. namespace concerns:: funcionou carregamento automático clássico como efeito colateral implementação, realmente comportamento pretendido. aplicação concerns:: precisa renomear essas classes módulos poder rodar modo zeitwerk. alguns projetos querem algo como app/api/base.rb definir api::base, adicionar caminhos carregamento automático fazer isso modo clássico. rails adiciona todos subdiretórios caminhos carregamento automático automaticamente, temos outra situação diretórios raiz aninhados, forma configuração funciona mais. princípio semelhante explicamos acima concerns. quiser manter essa estrutura, você precisará excluir subdiretório caminhos carregamento automático inicializador: namespace definido arquivo, como hotel está aqui: constante hotel deve definida usando palavras-chave class module. exemplo: bom. alternativas como  funcionará, objetos filhos como hotel::pricing serão encontrados. essa restrição aplica apenas namespaces explícitos. classes módulos definem namespace podem definidos usando esses idiomas. modo classic, você pode definir tecnicamente várias constantes mesmo nível superior todas elas recarregadas. exemplo, dado enquanto pôde carregado automaticamente, carregamento automático marcaria como carregado automaticamente também. este caso modo zeitwerk, você precisa mover próprio arquivo bar.rb. arquivo, constante. isso aplica apenas constantes mesmo nível superior exemplo acima. classes módulos internos adequados. exemplo, considere aplicação recarregar foo, recarregar foo::innerclass também. spring recarrega código aplicação algo mudar. ambiente test, você precisa habilitar recarregamento funcione: caso contrário, você obterá este erro: bootsnap deve pelo menos versão 1.4.2. além disso, bootsnap precisa desabilitar cache iseq devido interpretador estiver executando ruby 2.5. certifique-se depender pelo menos bootsnap 1.4.4 nesse caso. novo ponto configuração true padrão compatibilidade versões anteriores, permite você opte adicionar caminhos carregamento automático $load_path. isso sentido maioria aplicações, você nunca deve requerer arquivo app/models, exemplo, zeitwerk nomes arquivo absolutos internamente. optar pela exclusão, você otimiza pesquisas $load_path (menos diretórios verificar) economiza trabalho bootsnap consumo memória, necessário construir índice esses diretórios. modo clássico, carregamento automático constante thread-safe, embora rails tenha travas, exemplo, tornar solicitações thread-safe quando carregamento automático está habilitado, como comum ambiente desenvolvimento. carregamento automático constante thread-safe modo zeitwerk. exemplo, agora você pode carregar automaticamente scripts multi-threaded executados pelo comando runner. cuidado configurações como cada elemento config.autoload_paths deve representar namespace nível superior (object) eles podem aninhados consequência (com exceção diretórios concerns explicados acima). corrigir isso, basta remover curingas (wildcards): modo clássico, app/models/foo.rb define bar, você será capaz carregar automaticamente aquele arquivo, carregamento rápido funcionará porque carrega arquivos recursivamente cegas. isso pode fonte erros você testar coisas primeiro carregamento rápido; execução pode falhar carregamento automático posterior. modo zeitwerk ambos modos carregamento consistentes, eles falham erram mesmos arquivos. aplicações podem carregar padrões rails ainda usar carregamento automático clássico definindo config.autoloader desta forma: usar carregamento automático clássico aplicação rails recomendado definir nível simultaneidade (concurrency) como ambiente desenvolvimento, servidores processadores segundo plano, devido questões thread-safety."},{"id":1042,"title":"Atualizando o Ruby on Rails","heading":"4 Atualizando do Rails 5.2 para o Rails 6.0","subheading":"4.8 Alteração de comportamento de atribuição do Active Storage","content":"padrões configuração rails 5.2, atribuir coleção anexos declarados has_many_attached acrescenta novos arquivos: padrões configuração rails 6.0, atribuir coleção anexos substitui arquivos existentes anexar eles. isso corresponde comportamento active record atribuir associação coleção: #attach pode usado adicionar novos anexos remover existentes: aplicações existentes podem aceitar este novo comportamento definindo config.active_storage.replace_on_assign_to_many como true. comportamento antigo será descontinuado rails removido rails 7.1. mais informações sobre mudanças feitas rails consulte notas lançamento."},{"id":1043,"title":"Atualizando o Ruby on Rails","heading":"5 Atualizando do Rails 5.1 para o Rails 5.2","subheading":"5.1 Bootsnap","content":"rails adiciona bootsnap novo gemfile. comando app:update configura boot.rb. você quiser utilizá-lo, então adicione-o gemfile, caso contrário, mude boot.rb utilizar bootsnap."},{"id":1044,"title":"Atualizando o Ruby on Rails","heading":"5 Atualizando do Rails 5.1 para o Rails 5.2","subheading":"5.2 A expiração em cookies assinados ou criptografados está agora incorporada nos valores dos cookies","content":"melhorar segurança, rails agora incorpora informações expiração também valor cookies criptografados assinados. estas novas informações incorporadas tornam estes cookies incompatíveis versões rails mais antigas 5.2. você quer seus cookies sejam lidos anteriores, ainda estiver validando deploy quiser permitir rollback configure rails.application.config.action_dispatch.use_authenticated_cookie_encryption `false'. mais informações sobre mudanças feitas rails consulte notas lançamento."},{"id":1045,"title":"Atualizando o Ruby on Rails","heading":"6 Atualizando do Rails 5.0 para o Rails 5.1","subheading":"6.1 HashWithIndifferentAccess de nível superior está descontinuado","content":"aplicação classe hashwithindifferentaccess nível superior, você deve mover lentamente código usar activesupport::hashwithindifferentaccess. está apenas descontinuado, significa código quebrará momento nenhum aviso descontinuação será exibido, esta constante será removida futuro. além disso, você tiver documentos yaml muito antigos contendo despejos (dumps) tais objetos, pode necessário carregá-los despejá-los novamente certeza referenciam constante correta, carregá-los quebrará futuro."},{"id":1046,"title":"Atualizando o Ruby on Rails","heading":"6 Atualizando do Rails 5.0 para o Rails 5.1","subheading":"6.2 application.secrets agora é carregado com todas as chaves como símbolos","content":"aplicação armazena configuração aninhada config/secrets.yml, todas chaves agora carregadas como símbolos, então acesso usando strings deve alterado.  para:"},{"id":1047,"title":"Atualizando o Ruby on Rails","heading":"6 Atualizando do Rails 5.0 para o Rails 5.1","subheading":"6.3 Removido suporte obsoleto para :text e :nothing em render","content":"seus controllers estiverem usando render :text, elas funcionarão mais. novo método renderização texto tipo mime text/plain usar render :plain. similarmente, render :nothing também removido você deve usar método head enviar respostas contenham apenas cabeçalhos (headers). exemplo, head envia resposta corpo (body) renderizar."},{"id":1048,"title":"Atualizando o Ruby on Rails","heading":"6 Atualizando do Rails 5.0 para o Rails 5.1","subheading":"6.4 Removido suporte obsoleto para redirect_to :back","content":"rails 5.0, redirect_to :back descontinuado. rails 5.1, removido completamente. como alternativa, redirect_back. importante notar redirect_back também leva opção fallback_location será usada caso http_referer esteja faltando. mais informações sobre mudanças feitas rails consulte notas lançamento."},{"id":1049,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.1 Necessário Ruby 2.2.2+","content":"ruby rails diante, ruby 2.2.2+ única versão ruby suportada. certifique-se versão ruby 2.2.2 superior, antes prosseguir."},{"id":1050,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.2 Active Record Models agora herdam de ApplicationRecord por padrão","content":"rails 4.2, active record model herda activerecord::base. rails 5.0, todos models herdados applicationrecord. applicationrecord nova superclasse todos models aplicação, análogo applicationcontroller controllers actioncontroller::base. isso aplicações único local configurar comportamento models. atualizar rails rails 5.0, você precisa criar arquivo application_record.rb app/models/ adicionar seguinte conteúdo: seguida, certifique-se todos seus models herdem dele."},{"id":1051,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.3 Interrompendo Sequências de Callback via throw(:abort)","content":"rails 4.2, quando 'before' callback retorna false active record active model, então toda sequência callback interrompida. outras palavras, sucessivos 'before' callback executados, ação encapsulada callbacks. rails 5.0, retornar false callback active record active model terá efeito colateral interromper sequência callback. disso, sequência callback deve interrompida explicitamente chamando throw(:abort). quando você atualiza rails rails 5.0, retornando false nesse tipo callback sequência callback ainda será interrompida, você receberá aviso suspensão sobre esta mudança futura. quando estiver pronto, você pode optar pelo novo comportamento remover aviso suspensão adicionando seguinte configuração config/application.rb: observe esta opção afetará callbacks active support, eles nunca interrompem sequência quando algum valor retornado. consulte #17227 obter mais detalhes."},{"id":1052,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.4 ActiveJob agora herda de ApplicationJob por padrão","content":"rails 4.2, active herda activejob::base. rails 5.0, este comportamento mudou agora herdar applicationjob. atualizar rails rails 5.0, você precisa criar arquivo application_job.rb app/jobs/ adicionar seguinte conteúdo: seguida, certifique-se todas classes herdam dele. veja #19034 maiores detalhes."},{"id":1053,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.5 Testando Rails Controller","content":"assigns assert_template foram extraídos rails-controller-testing. continuar usando esses métodos seus testes controller, adicione 'rails-controller-testing' gemfile. você estiver usando rspec teste, consulte configuração extra necessária documentação gem. você estiver usando actiondispatch::http::uploadedfile seus testes envio arquivos, você precisará alterar usar classe rack::test::uploadedfile. veja #26404 maiores detalhes."},{"id":1054,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.6 Carregamento automático é desabilitado após a inicialização no ambiente de produção","content":"carregamento automático agora está desativado após inicialização ambiente produção padrão. carregamento rápido (eager loading) aplicação parte processo inicialização, portanto, constantes alto nível estão ainda carregadas automaticamente, necessidade exigir seus arquivos. constantes locais mais profundos executados apenas tempo execução, como corpos métodos regulares, também estão porque arquivo define terá sido carregado durante inicialização. grande maioria aplicações, essa alteração exige nenhuma ação. evento muito raro aplicação precisa carregamento automático durante execução produção, defina rails.application.config.enable_dependency_loading true."},{"id":1055,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.7 Serialização XML","content":"activemodel::serializers::xml extraído rails activemodel-serializers-xml. continuar usando serialização aplicação, adicione 'activemodel-serializers-xml' gemfile."},{"id":1056,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.8 Removido o suporte para o antigo adaptador de banco de dados mysql","content":"rails remove suporte antigo adaptador banco dados mysql. maioria usuários devem usar mysql2 disso. será convertido separada quando encontrarmos alguém manter."},{"id":1057,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.9 Removido suporte para o Debugger","content":"debugger suportado pelo ruby requerido pelo rails byebug invés."},{"id":1058,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.10 Use bin/rails para executar tarefas e testes","content":"rails adiciona habilidade executar tarefas testes através bin/rails invés rake. geralmente essas mudanças ocorrem paralelo rake, algumas foram portadas completamente. usar novo executor teste, simplesmente digite bin/rails test. rake dev:cache agora bin/rails dev:cache. execute bin/rails dentro diretório raiz aplicação lista comandos disponíveis."},{"id":1059,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.11 ActionController::Parameters Não herda mais de HashWithIndifferentAccess","content":"chamar params aplicação agora retornará objeto hash. seus parâmetros permitidos, então você precisará fazer nenhuma alteração. você estiver usando outros métodos dependem capaz hash independentemente permitted? você precisará atualizar aplicação primeiro permitir depois converter hash."},{"id":1060,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.12 protect_from_forgery Agora assume como padrão prepend:false","content":"padrão protect_from_forgery prepend: false, significa será inserido callback ponto você chama aplicação. você quiser protect_from_forgery sempre executar primeiro, então você deve alterar aplicação usar protect_from_forgery prepend: true."},{"id":1061,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.13 O Template Handler padrão agora é RAW","content":"arquivos template handler extensão serão renderizados usando handler. anteriormente, rails renderizava arquivos usando template handler. você deseja arquivo seja tratado meio handler, você deve adicionar extensão arquivo pode analisado pelo template handler apropriado."},{"id":1062,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.14 Adicionada correspondência de curinga (Wildcard) para Template Dependencies","content":"agora você pode usar correspondência curinga suas template dependencies. exemplo, você definisse seus templates como: agora você pode chamar dependência apenas curinga."},{"id":1063,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.15 ActionView::Helpers::RecordTagHelper movido para a gem externa (record_tag_helper)","content":"content_tag_for div_for foram removidos favor usar apenas content_tag. continuar usando métodos mais antigos, adicione record_tag_helper gemfile: veja #18411 mais detalhes."},{"id":1064,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.16 Removido suporte para a Gem protected_attributes","content":"protected_attributes mais suportada rails"},{"id":1065,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.17 Removido o suporte para a gem activerecord-deprecated_finders","content":"activerecord-deprecated_finders mais suportada rails"},{"id":1066,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.18 A ordem do teste padrão ActiveSupport::TestCase agora é aleatória","content":"quando testes executados aplicação, ordem padrão agora :random :sorted. seguinte opção configuração defini-lo volta :sorted."},{"id":1067,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.19 ActionController::Live tornou-se uma Concern","content":"você incluir actioncontroller::live outro módulo está incluído controller, então você também deve estender módulo activesupport::concern. alternativamente, você pode usar gancho (hook) self.included incluir actioncontroller::live diretamente controller streamingsupport está incluído. isso significa aplicação costumava próprio módulo streaming, código seguir seria interrompido produção:"},{"id":1068,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.20 Novos Padrões do Framework","content":"belongs_to agora disparar erro validação padrão associação estiver presente. isso pode desativado associação optional: true. este padrão será configurado automaticamente novas aplicações. aplicação existente deseja adicionar este recurso, precisará ativado initializer: configuração global padrão todos seus models, você pode sobrepor individualmente model. isso deve ajudá-lo migrar todos seus models suas associações exigidas padrão. rails agora suporta tokens csrf formulário mitigar ataques injeção código formulários criados javascript. esta opção ativada, cada formulário aplicação terá próprio token csrf específico ação método desse formulário. agora você pode configurar aplicação verificar cabeçalho (header) http origin deve verificado contra origem site como defesa adicional csrf. defina seguinte configuração true: nome fila mailer padrão mailers. esta opção configuração permite você mude globalmente nome fila. defina seguinte configuração: defina config.action_mailer.perform_caching configuração determinar action mailer views deve suportar cache. você estiver usando schema_search_path outras extensões postgresql, você pode controlar como esquema despejado. defina como :all gerar todos dumps, como :schema_search_path gerar partir caminho pesquisa esquema. defina seguinte configuração habilitar hsts usar subdomínios: usar ruby 2.4, você pode preservar fuso horário receptor chamar to_time."},{"id":1069,"title":"Atualizando o Ruby on Rails","heading":"7 Atualizando do Rails 4.2 para o Rails 5.0","subheading":"7.21 Mudanças na Serialização JSON/JSONB","content":"rails 5.0, como atributos json/jsonb serializados desserializados foram alterados. agora você definir coluna igual string, active record mais transformar essa string hash disso, apenas retornará string. isso limita código interage models, também afeta configurações coluna :default db/schema.rb. recomendado você defina colunas iguais string, passe hash disso, será convertido string json automaticamente."},{"id":1070,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.1 Web Console","content":"primeiro, adicione 'web-console', 2.0' grupo :development gemfile execute bundle install (ela incluída quando você atualizou rails). depois instalado, você pode simplesmente colocar referência console helper seja, console qualquer view qual deseja habilitá-lo. console também será fornecido qualquer página erro exibida ambiente desenvolvimento."},{"id":1071,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.2 Responders","content":"métodos classe respond_with respond_to foram extraídos responders. usá-los, simplesmente adicione 'responders', 2.0' gemfile. chamadas respond_with respond_to (novamente, nível classe) funcionarão mais incluir responders suas dependências: respond_to nível instância afetado requer adicional: veja #16526 mais detalhes."},{"id":1072,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.3 Tratamento de erros em transaction callbacks","content":"atualmente, active record suprime erros levantados dentro callbacks after_rollback after_commit apenas imprime logs. próxima versão, esses erros serão mais suprimidos. disso, erros serão propagados normalmente como outros active record callbacks. quando você define callback after_rollback after_commit, você receberá aviso suspensão sobre essa mudança futura. quando você estiver pronto, pode optar pelo novo comportamento remover aviso suspensão uso, adicionando seguinte configuração config/application.rb: veja #14488 #16537 mais detalhes."},{"id":1073,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.4 Ordenando os casos de teste","content":"rails 5.0, casos teste serão executados ordem aleatória padrão. antecipação esta mudança, rails introduziu nova opção configuração active_support.test_order especificar explicitamente ordem testes. isso permite você bloqueie comportamento atual, definindo opção :sorted, opte pelo comportamento futuro configurando opção :random. você especificar valor esta opção, aviso suspensão será emitido. evitar isso, adicione seguinte linha ambiente teste:"},{"id":1074,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.5 Atributos serializados","content":"usar codificador personalizado (por exemplo, serialize :metadata, json), atribuir atributo serializado salvá-lo banco dados como null passar valor através codificador (por exemplo, \"null\" quando usando codificador json)."},{"id":1075,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.6 Nível de log em produção","content":"rails nível padrão ambiente produção será alterado :debug :info). preservar padrão atual, adicione seguinte linha production.rb:"},{"id":1076,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.7 after_bundle em Rails templates","content":"você rails template adiciona todos arquivos controle versão, isso falhará adicionar binstubs gerados porque executado antes bundler: agora você pode envolver chamadas bloco after_bundle. isso será executado depois binstubs foram gerados."},{"id":1077,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.8 Rails HTML Sanitizer","content":"nova opção sanitizar fragmentos html suas aplicações. venerável abordagem html-scanner agora está oficialmente sendo descontinuada favor rails html sanitizer. isso significa métodos sanitize, sanitize_css, strip_tags strip_links apoiados nova implementação. este novo sanitizer internamente loofah. loofah, vez, nokogiri, envolve analisadores escritos java, portanto, sanitização deve mais rápida importa qual versão ruby você execute. nova versão atualiza sanitize, então pode usar loofah::scrubber depuração poderosa. veja alguns exemplos depuradores aqui. dois novos depuradores também foram adicionados: permitscrubber targetscrubber. leia gem's readme mais informações. documentação permitscrubber targetscrubber explica como você pode obter controle total sobre quando como elementos devem removidos. aplicação precisa usar implementação antiga sanitizer, inclua rails-deprecated_sanitizer gemfile:"},{"id":1078,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.9 Testando Rails DOM","content":"módulo tagassertions (contendo métodos como assert_tag), descontinuado favor métodos assert_select módulo selectorassertions, extraído rails-dom-testing."},{"id":1079,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.10 Tokens de autenticidade mascarados","content":"mitigar ataques ssl, form_authenticity_token agora mascarado varie cada solicitação (request). assim, tokens validados desmascarando depois descriptografando. como resultado, quaisquer estratégias verificar solicitações formulários não-rails dependiam token csrf sessão estática devem levar isso consideração."},{"id":1080,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.11 Action Mailer","content":"anteriormente, chamar método mailer classe mailer resultaria método instância correspondente sendo executado diretamente. introdução active #deliver_later, isso mais verdade. rails 4.2, invocação métodos instância adiada deliver_now deliver_later sejam chamados. exemplo: isso deve resultar diferenças perceptíveis maioria aplicações. entanto, você precisar alguns métodos não-mailer sejam executados forma síncrona, você estava contando anteriormente comportamento proxy síncrono, você deve definí-los como métodos classe classe mailer diretamente:"},{"id":1081,"title":"Atualizando o Ruby on Rails","heading":"8 Atualizando do Rails 4.1 para o Rails 4.2","subheading":"8.12 Suporte para chave estrangeira","content":"migração expandida suportar definições chave estrangeira. você usado foreigner, você pode querer considerar removê-la. observe suporte chave estrangeira rails subconjunto foreigner. isso significa todas definições foreigner podem totalmente substituídas pela contraparte migração rails. procedimento migração seguinte:"},{"id":1082,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.1 CSRF protection from remote <script> tags","content":"\"whaaat tests failing!!!?\" <script> widget busted!!\" cross-site request forgery (csrf) protection covers requests with javascript responses, too. this prevents third-party site from remotely referencing your javascript with <script> extract sensitive data. this means that your functional integration tests that will trigger csrf protection. switch explicitly test xmlhttprequest."},{"id":1083,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.2 Spring","content":"want spring your application preloader need"},{"id":1084,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.3 config/secrets.yml","content":"want secrets.yml convention store your application's secrets, need"},{"id":1085,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.4 Changes to test helper","content":"your test helper contains call activerecord::migration.check_pending! this removed. check done automatically when require \"rails/test_help\", although leaving this line your helper harmful way."},{"id":1086,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.5 Cookies serializer","content":"applications created before rails uses marshal serialize cookie values into signed encrypted cookie jars. want json-based format your application, initializer file with following content: this would transparently migrate your existing marshal-serialized cookies into json-based format. when using :json :hybrid serializer, should beware that ruby objects serialized json. example, date time objects will serialized strings, hashes will have their keys stringified. it's advisable that only store simple data (strings numbers) cookies. have store complex objects, would need handle conversion manually when reading values subsequent requests. cookie session store, this would apply session flash hash well."},{"id":1087,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.6 Flash structure changes","content":"flash message keys normalized strings. they still accessed using either symbols strings. looping through flash will always yield string keys: make sure comparing flash message keys against strings."},{"id":1088,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.7 Changes in JSON handling","content":"there major changes related json handling rails 4.1. multijson reached end-of-life been removed from rails. your application currently depends multijson directly, have options: historically, rails some compatibility issues with json gem. using json.generate json.dump inside rails application could produce unexpected errors. rails fixed these issues isolating encoder from json gem. json apis will function normal, they will have access rails-specific features. example: json encoder rails been rewritten take advantage json gem. most applications, this should transparent change. however, part rewrite, following features have been removed from encoder: your application depends these features, them back adding activesupport-json_encoder your gemfile. #as_json objects with time component (time, datetime, activesupport::timewithzone) returns millisecond precision default. need keep behavior with millisecond precision, following initializer:"},{"id":1089,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.8 Usage of return within inline callback blocks","content":"previously, rails allowed inline callback blocks return this way: this behavior never intentionally supported. change internals activesupport::callbacks, this longer allowed rails 4.1. using return statement inline callback block causes localjumperror raised when callback executed. inline callback blocks using return refactored evaluate returned value: alternatively, return preferred recommended explicitly define method: this change applies most places rails where callbacks used, including active record active model callbacks, well filters action controller (e.g. before_action). this pull request more details."},{"id":1090,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.9 Methods defined in Active Record fixtures","content":"rails evaluates each fixture's separate context, helper methods defined fixture will available other fixtures. helper methods that used multiple fixtures should defined modules included newly introduced activerecord::fixtureset.context_class, test_helper.rb."},{"id":1091,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.10 I18n enforcing available locales","content":"rails defaults i18n option enforce_available_locales true. this means that will make sure that locales passed must declared available_locales list. disable (and allow i18n accept locale option) following configuration your application: note that this option added security measure, ensure user input cannot used locale information unless previously known. therefore, it's recommended disable this option unless have strong reason doing"},{"id":1092,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.11 Mutator methods called on Relation","content":"relation longer mutator methods like #map! #delete_if. convert array calling #to_a before using these methods. intends prevent bugs confusion code that call mutator methods directly relation."},{"id":1093,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.12 Changes on Default Scopes","content":"default scopes longer overridden chained conditions. previous versions when defined default_scope model overridden chained conditions same field. merged like other scope. before: after: previous behavior needed explicitly remove default_scope condition using unscoped, unscope, rewhere except."},{"id":1094,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.13 Rendering content from string","content":"rails introduces :plain, :html, :body options render. those options preferred render string-based content, allows specify which content type want response sent from security standpoint, don't expect have markup your response body, should using render :plain most browsers will escape unsafe content response you. will deprecating render :text future version. please start using more precise :plain, :html, :body options instead. using render :text pose security risk, content sent text/html."},{"id":1095,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.14 PostgreSQL json and hstore datatypes","content":"rails will json hstore columns string-keyed ruby hash. earlier versions, hashwithindifferentaccess used. this means that symbol access longer supported. this also case store_accessors based json hstore columns. make sure string keys consistently."},{"id":1096,"title":"Atualizando o Ruby on Rails","heading":"9 Upgrading from Rails 4.0 to Rails 4.1","subheading":"9.15 Explicit block use for ActiveSupport::Callbacks","content":"rails expects explicit block passed when calling activesupport::callbacks.set_callback. this change stems from activesupport::callbacks being largely rewritten release. aplicação está qualquer versão rails anterior 3.2.x, você deve atualizar rails antes tentar atualizar rails 4.0. seguintes mudanças necessárias atualizar aplicativo rails 4.0."},{"id":1097,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.1 HTTP PATCH","content":"rails agora patch como verbo http primário atualizações quando restful resource declarado config/routes.rb. action update ainda usada, solicitações continuarão roteadas action update também. portanto, você estiver usando apenas rotas restful padrão, nenhuma alteração precisa feita: entanto, você precisará fazer mudança estiver usando form_for atualizar recurso conjunto rota personalizada usando verbo http put: action estiver sendo usada pública você estiver livre alterar verbo http, você pode atualizar rota usar patch put: requisições /users/:id rails encaminhadas update como estão hoje. portanto, você tiver recebe solicitações reais, funcionará. roteador também roteia solicitações patch /users/:id action update. action está sendo usada pública você pode mudar verbo http usado, você pode atualizar formulário usar método lugar: mais informações sobre patch essa mudança feita, consulte esta postagem blog rails. errata verbo patch especifica tipo mídia 'diff' deve usado patch. desses formatos json patch. enquanto rails oferece suporte nativo json patch, fácil adicionar suporte: como json patch transformado recentemente rfc, muitas bibliotecas ruby ainda. aaron patterson hana dessas, suporte total últimas mudanças especificação."},{"id":1098,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.2 Gemfile","content":"rails removeu grupo assets gemfile. você precisaria remover essa linha gemfile atualizar. você também deve atualizar arquivo aplicação config/application.rb):"},{"id":1099,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.3 vendor/plugins","content":"rails suporta mais carregamento plugins vendor/plugins. você deve substituir quaisquer plugins, extraindo-os gems adicionando-os gemfile. você escolher torná-los gems, você pode movê-los para, digamos, lib/my_plugin/* adicionar inicializador apropriado config/initializers/my_plugin.rb."},{"id":1100,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.4 Active Record","content":""},{"id":1101,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.5 Active Resource","content":"rails extraiu active resource própria gem. você ainda precisa recurso, pode adicionar active resource gemfile."},{"id":1102,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.6 Active Model","content":""},{"id":1103,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.7 Action Pack","content":""},{"id":1104,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.8 Active Support","content":"rails remove alias erb::util#json_escape visto usado actionview::helpers::javascripthelper#escape_javascript. caching method changed between rails 4.0. should change cache namespace roll with cold cache. método cache mudou entre rails 4.0. você deve alterar namespace cache implementar cold cache."},{"id":1105,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.9 Ordem de Carregamento de Helpers","content":"ordem qual helpers mais diretório carregados mudou rails 4.0. anteriormente, eles eram reunidos classificados ordem alfabética. após atualizar rails 4.0, helpers irão preservar ordem diretórios carregados serão classificados ordem alfabética apenas dentro cada diretório. menos você explicitamente parâmetro helpers_path, essa mudança afetará maneira carregar helpers engines. você precisa ordem, deve verificar métodos corretos estão disponíveis após atualização. você gostaria mudar ordem engines carregados, você pode usar método config.railties_order=."},{"id":1106,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.10 Active Record Observer e Action Controller Sweeper","content":"activerecord::observer eactioncontroller::caching::sweeper foram extraídos rails-observers. você precisará adicionar rails-observers precisar desses recursos."},{"id":1107,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.11 sprockets-rails","content":""},{"id":1108,"title":"Atualizando o Ruby on Rails","heading":"10 Atualizando do Rails 3.2 para o Rails 4.0","subheading":"10.12 sass-rails","content":"aplicação está atualmente qualquer versão rails anterior 3.1.x, você deve atualizar rails antes tentar atualização rails 3.2. seguintes mudanças destinadas atualizar aplicação mais recente versão 3.2.x rails."},{"id":1109,"title":"Atualizando o Ruby on Rails","heading":"11 Atualizando do Rails 3.1 para o Rails 3.2","subheading":"11.1 Gemfile","content":"faça seguintes alterações gemfile."},{"id":1110,"title":"Atualizando o Ruby on Rails","heading":"11 Atualizando do Rails 3.1 para o Rails 3.2","subheading":"11.2 config/environments/development.rb","content":"existem algumas novas definições configuração você deve adicionar ambiente desenvolvimento:"},{"id":1111,"title":"Atualizando o Ruby on Rails","heading":"11 Atualizando do Rails 3.1 para o Rails 3.2","subheading":"11.3 config/environments/test.rb","content":"definição configuração mass_assignment_sanitizer também deve adicionada aconfig/environment/test.rb:"},{"id":1112,"title":"Atualizando o Ruby on Rails","heading":"11 Atualizando do Rails 3.1 para o Rails 3.2","subheading":"11.4 vendor/plugins","content":"rails depreca vendor/plugins rails removê-los completamente. embora seja estritamente necessário como parte atualização rails 3.2, você pode começar substituir quaisquer plugins, extraindo-os gems adicionando-os gemfile. você escolher torná-los gems, você pode movê-los para, digamos, lib/my_plugin/* adicionar inicializador apropriado config/initializers/my_plugin.rb."},{"id":1113,"title":"Atualizando o Ruby on Rails","heading":"11 Atualizando do Rails 3.1 para o Rails 3.2","subheading":"11.5 Active Record","content":"opção :dependent restrict removida belongs_to. você quiser evitar exclusão objeto houver algum objeto associado, você pode definir :dependent :destroy retornar false após verificar existência associação qualquer retorno chamada destruição objeto associado. aplicação estiver qualquer versão rails anterior 3.0.x, você deve atualizar rails antes tentar atualização rails 3.1. seguintes mudanças destinadas atualizar aplicação rails 3.1.12, última versão 3.1.x rails."},{"id":1114,"title":"Atualizando o Ruby on Rails","heading":"12 Atualizando do Rails 3.0 para o Rails 3.1","subheading":"12.1 Gemfile","content":"faça seguintes mudanças gemfile."},{"id":1115,"title":"Atualizando o Ruby on Rails","heading":"12 Atualizando do Rails 3.0 para o Rails 3.1","subheading":"12.2 config/application.rb","content":"pipeline assets requer seguintes adições: aplicação estiver usando rota \"/assets\" resource, você pode querer alterar prefixo usado assets evitar conflitos:"},{"id":1116,"title":"Atualizando o Ruby on Rails","heading":"12 Atualizando do Rails 3.0 para o Rails 3.1","subheading":"12.3 config/environments/development.rb","content":"remova configuração config.action_view.debug_rjs true. adicione essas configurações você habilitar pipeline assets:"},{"id":1117,"title":"Atualizando o Ruby on Rails","heading":"12 Atualizando do Rails 3.0 para o Rails 3.1","subheading":"12.4 config/environments/production.rb","content":"novamente, maioria mudanças abaixo pipeline assets. você pode mais sobre isso guia asset pipeline."},{"id":1118,"title":"Atualizando o Ruby on Rails","heading":"12 Atualizando do Rails 3.0 para o Rails 3.1","subheading":"12.5 config/environments/test.rb","content":"você pode ajudar testar desempenho estas adições ambiente teste:"},{"id":1119,"title":"Atualizando o Ruby on Rails","heading":"12 Atualizando do Rails 3.0 para o Rails 3.1","subheading":"12.6 config/initializers/wrap_parameters.rb","content":"adicione este arquivo seguinte conteúdo, desejar agrupar parâmetros hash aninhado. isso está ativado padrão novas aplicações."},{"id":1120,"title":"Atualizando o Ruby on Rails","heading":"12 Atualizando do Rails 3.0 para o Rails 3.1","subheading":"12.7 config/initializers/session_store.rb","content":"você precisa alterar chave sessão algo novo remover todas sessões: "},{"id":1121,"title":"Atualizando o Ruby on Rails","heading":"12 Atualizando do Rails 3.0 para o Rails 3.1","subheading":"12.8 Remover opções de :cache e :concat em referências de helpers para assets em views","content":"você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1122,"title":"Action View Overview","heading":"1 O que é Action View?","subheading":"1 O que é Action View?","content":"rails, requisições tratadas action controller action view. normalmente, action controller responsável comunicar banco dados realizar ações crud quando necessário. action view responsável compilar resposta. templates action view escritos usando ruby embutido tags mescladas html. evitar poluir templates código clichê (boilerplate code), muitas classes utilitárias (helpers) disponibilizam comportamentos comuns lidar forms, datas strings. também fácil adicionar novas classes utilitárias (helpers) aplicação conforme evolui. cada controller, diretório associado app/views contém arquivos template compõe views associadas seus respectivos controllers. esses arquivos utilizados exibir view resulta cada action controller. vamos olhada rails padrão quando novo recurso criado utilizando generator scaffold: convenção nomenclatura views rails. normalmente, views compartilham nome action controller qual associada, conforme pode visto exemplo acima. exemplo, action index controller articles_controller.rb utilizará arquivo view index.html.erb diretório app/views/articles. html completo retornado client composto combinação desse arquivo erb, template layout envolve, todas partials view pode referenciar. dentro deste guia você encontrará documentações mais detalhadas sobre cada desses três componentes. como mencionado, saída html final composição três elementos: templates, partials layouts. abaixo está breve visão geral cada deles."},{"id":1123,"title":"Action View Overview","heading":"3 Templates, Partials, e Layouts","subheading":"3.1 Templates","content":"templates action view podem escritos várias maneiras. arquivo template tiver extensão .erb usará mistura (embedded ruby) html. arquivo template tiver extensão .builder, biblioteca (library) builder::xmlmarkup utilizada. rails suporta múltiplos sistemas template utiliza extensão arquivo distingui-los. exemplo, arquivo html usando sistema template terá extensão arquivo como .html.erb. dentro template erb, código ruby pode incluído usando ambas tags tags utilizadas executar código ruby possui retorno, como condições, loops, blocos, tags utilizadas quando você deseja saída. considere seguinte loop nomes: loop configurado usando tags incorporação regulares nome inserido usando tags incorporação saída (<%= %>). note isso somente sugestão uso: funções saída regulares como print puts serão renderizadas view usando template erb. então, isso estaria errado: suprimir espaços branco esquerda direita, você pode usar alternadamente templates builder alternativa mais programática erb. eles especialmente úteis gerar conteúdo xml. objeto xmlmarkup denominado automaticamente disponibilizado templates extensão.builder. aqui estão alguns exemplos básicos: produziria: qualquer método bloco será tratado como marcação marcação aninhada bloco. exemplo, seguinte: produziria algo como: abaixo está exemplo completo usado verdade basecamp: jbuilder mantida pelo time rails incluída padrão gemfile rails. similar builder usada gerar json, invés xml. você tiver, você pode adicionar seguinte gemfile: objeto jbuilder denominado json automaticamente disponibilizado templates extensão .jbuilder. aqui está exemplo básico: produziria: veja documentação jbuilder mais exemplos informação. padrão, rails compila cada template método renderizá-la. ambiente desenvolvimento, quando você altera template, rails verifica hora modificação arquivo recompila."},{"id":1124,"title":"Action View Overview","heading":"3 Templates, Partials, e Layouts","subheading":"3.2 Partials","content":"templates parciais (partials) normalmente chamados apenas partials outro instrumento quebrar processo renderização partes mais gerenciáveis. partials, você consegue extrair pedaços código seus templates separar arquivos também reusá-los seus templates. renderizar partial como parte view, utiliza-se método render dentro view: isso renderizará arquivo _menu.html.erb naquele ponto dentro view sendo renderizada. note caractere sublinhado início: partials nomeadass sublinhado início distingui-las views regulares, embora sejam referidas sublinhado. isso valido mesmo quando utilizamos partial pasta diferente: esse código pegará partial app/views/shared/_menu.html.erb. maneira usar partials tratando-as como fossem sub-rotinas; maneira mover detalhes fora view você consiga entender está acontecendo mais facilidade. exemplo, você pode view parecida essa: aqui, partials _ad_banner.html.erb _footer.html.erb podem conteúdos compartilhados entre muitas páginas aplicação. você precisa detalhes dessas seções quando estiver concentrando página específica. exemplo acima, método render recebe parâmetros: partial locals. esses forem únicos parâmetros você deseja passar, você pode ignorá-los. exemplo, invés você também pode usar: padrão actionview::partials::partialrenderer objeto variável local mesmo nome template. então, dado que: dentro partial _product teremos @product dentro variável local product, como tivéssemos escrito: parâmetro object pode usado especificar diretamente qual objeto renderizado partial; útil quando objeto template está outro lugar (por exemplo, variável instância diferente variável local). exemplo, invés faríamos: parâmetro podemos especificar nome diferente variável local. exemplo, quisermos seja item product, faríamos: isso equivalente comumente, template precise iterar sobre coleção renderizar sub-template cada elementos. esse padrão implementado como método único recebe array renderiza partial cada elementos array. logo, este exemplo renderizar todos produtos: pode reescrito linha: quando partial chamada coleção, instâncias individuais partial acesso membro coleção está sendo renderizado meio variável mesmo nome partial. nesse caso, partial _product, dentro dele você pode referir product obter membro coleção está sendo renderizado. você pode usar sintaxe abreviada renderizar coleções. supondo @products coleção instâncias product, você pode simplesmente escrever seguinte produzir mesmo resultado: rails determina nome partial usada observando nome model coleção, product neste caso. verdade, você pode renderizar coleção composta instâncias diferentes models usando essa abreviação, rails escolherá partial adequada cada membro coleção. você também pode especificar segunda partial renderizada entre instâncias partial principal usando parâmetro :spacer_template: rails renderizará partial _product_ruler (sem passar nenhum dado ela) entre cada partial _product."},{"id":1125,"title":"Action View Overview","heading":"3 Templates, Partials, e Layouts","subheading":"3.3 Layouts","content":"layouts podem usados renderizar template torno resultados actions controller rails. normalmente, aplicação rails terá alguns layouts quais páginas serão renderizadas. exemplo, site pode layout usuário conectado outra página marketing vendas site. layout usuário conectado pode incluir navegação nível superior (top-level), deve estar presente muitas actions controller. layout vendas aplicação saas pode incluir navegação nível superior páginas \"preços\" \"fale conosco\", onde esperaria cada layout tivesse aparência sensação diferentes. você pode sobre layout mais detalhes layouts renderização rails. partials podem seus próprios layouts. esses layouts diferentes daqueles utilizados actions controller, porém funcionam modo semelhante. supomos estamos exibindo artigo página deveria encapsulado div. primeiramente, criaremos novo article: template show, iremos renderizar partial _article encapsulado layout box: articles/show.html.erb layout simplesmente encapsula partial _article div: articles/_box.html.erb note layout partial acesso variável local article passada render. todavia, diferentemente layouts aplicação, layouts partial possuem underscore início. você também pode renderizar bloco código dentro layout partial invés usar yield. exemplo, tivéssemos partial _article, poderíamos feito: articles/show.html.erb supomos desejamos utilizar mesma partial _box representada acima, isso produziria mesmo resultado exemplo anterior. renderizar resposta, controller precisa resolver onde diferentes views estão localizadas. padrão, olha dentro diretório app/views. podemos adicionar outros locais dar-lhes certa precedência resolver caminhos usando métodos prepend_view_path append_view_path."},{"id":1126,"title":"Action View Overview","heading":"5 View Paths","subheading":"5.1 Pré-anexando caminho das views","content":"isso pode útil, exemplo, quando queremos colocar views dentro diretório diferente subdomínios. podemos fazer isso usando: então, action view procurará primeiro dentro deste diretório quando resolver views."},{"id":1127,"title":"Action View Overview","heading":"5 View Paths","subheading":"5.2 Anexando caminho das views","content":"mesma forma, podemos acrescentar caminhos: isso adicionará app/views/direct final caminhos pesquisa. rails fornece muitos métodos auxiliares usar action view. isso inclui métodos para: você pode aprender mais sobre métodos auxiliares guia helpers action view guia form helpers action view. action view capacidade renderizar diferentes templates, dependendo localidade atual. exemplo, suponha você tenha articlescontroller action show. padrão, chamar essa action renderizar app/views/articles/show.html.erb. você definir i18n.locale :de, então app/views/articles/show.de.html.erb será renderizada lugar. template localizado estiver presente, versão traduzida será utilizada. isso significa você precisa fornecer views localizadas todos casos, elas serão preferidas usadas, disponíveis. você pode utilizar mesma técnica localizar arquivos rescue diretório público. exemplo, definir i18n.locale criar public/500.de.html public/404.de.html permitirá você tenha páginas rescue localizadas. visto rails restringe symbols você definir i18n.locale, você pode aproveitar este sistema exibir conteúdos diferentes dependendo você quiser. exemplo, suponha você tenha alguns usuários \"experts\" devem páginas diferentes usuários \"normais\". você pode adicionar seguinte app/controllers/application.rb: seguida, você pode criar views especiais como app/views/articles/show.expert.html.erb somente serão exibidas usuários experts. você pode mais sobre internacionalização rails (i18n) aqui. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1128,"title":"Básico do Active Record","heading":"1 O que é Active Record?","subheading":"1 O que é Active Record?","content":"active record model camada sistema responsável pela representação lógica dados negócio. active record facilita criação objetos negócio cujos dados precisam persistidos banco. essa implementação padrão active record descrição sistema mapeamento objeto-relacional (object relational mapping)."},{"id":1129,"title":"Básico do Active Record","heading":"1 O que é Active Record?","subheading":"1.1 O Padrão Active Record","content":"active record descrito martin fowler livro patterns enterprise application architecture. active record, objetos possuem ambos dados persistentes comportamento opera nesse dado. filosofia active record consiste assegurar lógica acesso dados seja parte objeto, deste objeto permitir deduzir como escrever banco dados."},{"id":1130,"title":"Básico do Active Record","heading":"1 O que é Active Record?","subheading":"1.2 Mapeamento Objeto-Relacional (Object Relational Mapping)","content":"mapeamento objeto-relacional, comumente referido abreviação orm, técnica conecta objetos aplicação tabelas tabela banco dados relacional sistema gerenciamento. usando orm, propriedades relações entre objetos aplicação podem facilmente armazenadas recuperadas banco dados necessidade escrever comandos diretamente menos código acesso banco maneira geral."},{"id":1131,"title":"Básico do Active Record","heading":"1 O que é Active Record?","subheading":"1.3 Active Record como um Framework ORM","content":"active record fornece diversos mecanismos, sendo mais importante habilidade quando escrevemos aplicações usando outras linguagens programação frameworks, pode necessário escrever muito código configuração. isto particularmente verdadeiro frameworks geral. entretanto, você seguir convenções adotadas pelo rails, será necessário escrever pouco código configuração alguns casos, nenhum) quando criar models active record. idéia trás disso você configura aplicação mesma forma maior parte vezes, deveria forma padrão. então, configuração explícita faz-se necessária somente casos você pode seguir convenção padrão."},{"id":1132,"title":"Básico do Active Record","heading":"2 Convenção sobre configuração no Active Record","subheading":"2.1 Convenções para nomeação","content":"padrão, active record algumas definições nomeação descobrir como mapeamento entre models tabelas banco dados será criado. rails pluralizar nome classe encontrar respectiva tabela banco dados. sendo assim, classe book (livro), você deverá tabela banco dados chamada books (livros). mecanismos pluralização rails muito poderosos, sendo capazes pluralizar singularizar) palavras regulares irregulares. quando usamos nomes classes compostas duas mais palavras, nome model deve seguir convenção ruby, utilizando camelcase, enquanto tabela deve utilizar forma snake_case, separando palavras utilizando caracter sublinhado. exemplos:"},{"id":1133,"title":"Básico do Active Record","heading":"2 Convenção sobre configuração no Active Record","subheading":"2.2 Convenções de schema (esquema)","content":"active record utiliza convenções nomeação colunas tabelas banco dados, dependendo propósito. existem outros nomes colunas opcionais adicionar alguns comportamentos adicionais instâncias active record. criar models active record, subclasse applicationrecord você está pronto começar: isso criará model product, mapeado tabela products base dados. fazendo isso, você também possuirá habilidade mapear colunas cada linha tabela atributos instâncias model. suponha tabela products criada usando declaração suas extensões) como: esquema acima declara tabela duas colunas: name. cada linhas dessa tabela representa certo produto dois parâmetros. portanto, você será capaz escrever códigos como seguinte: você precisar seguir convenções diferentes usar aplicação rails banco dados legado? problemas, você pode facilmente sobrepor convenções padrão. applicationrecord herda activerecord::base, define vários métodos úteis. você pode usar método activerecord::base.table_name= especificar nome tabela deve usada: assim fizer, você definir manualmente nome classe hospeda fixtures (my_products.yml) usando método set_fixture_class definição teste: possível sobrepor coluna deve usada como chave primária tabela usando método activerecord::base.primary_key= method: crud acrônimo quatro verbos utilizamos operação dados: create (criar), read (ler, consultar), update (atualizar) delete (deletar, destruir). active record criará, automaticamente, métodos permitem aplicação manipular dados armazenados suas tabelas."},{"id":1134,"title":"Básico do Active Record","heading":"5 CRUD: Lendo e Escrevendo Dados","subheading":"5.1 Create","content":"objetos active record podem criados partir hash, bloco seus atributos definidos manualmente após criação. método retornará novo objeto, enquanto create retornará objeto salvará banco dados. exemplo, dado model user atributos name occupation, chamando método create criará salvará novo registro banco dados: usando método new, objeto pode instanciado salvo: chamada user.save salvará registro banco dados. finalmente, bloco fornecido, ambos create passarão novo objeto aquele bloco executar inicialização:"},{"id":1135,"title":"Básico do Active Record","heading":"5 CRUD: Lendo e Escrevendo Dados","subheading":"5.2 Read","content":"active record fornece rica acessar dados banco dados. abaixo temos alguns exemplos diferentes métodos acessar dados fornecidos pelo active record. você pode aprender mais sobre como consultar model active record guia active record query interface."},{"id":1136,"title":"Básico do Active Record","heading":"5 CRUD: Lendo e Escrevendo Dados","subheading":"5.3 Update","content":"objeto active record recuperado, seus atributos podem modificados salvos banco dados. atalho isso seria usar hash mapeando nome atributos valor desejado, como seguir: isto mais útil quando atualizamos diversos atributos vez. outro lado, você gostaria atualizar diversos registros massa, você pode achar método classe update_all útil: isso mesmo você escrevesse:"},{"id":1137,"title":"Básico do Active Record","heading":"5 CRUD: Lendo e Escrevendo Dados","subheading":"5.4 Delete","content":"mesma forma, recuperado objeto active record, mesmo pode destruído, remove banco dados. você deseja excluir diversos registros massa, você pode utilizar métodos destroy_by destroy_all: active record permite você valide estado model antes seja gravado banco dados. existem diversos métodos você pode usar verificar seus models validar valor atributo vazio, único existe banco dados, segue formato específico, muito mais. validação questão muito importante considerar quando está persistindo banco dados, então métodos save update levam isso conta quando executados: eles retornam false quando validação falha eles fato performam nenhuma operação banco dados. eles versão bang (exclamação) (que save! update!), mais rigorosos retornam exceção activerecord::recordinvalid validação falha. rápido exemplo ilustrar: você pode aprender mais sobre validações guia validaçes active record inglês). callbacks active record permitem você vincule códigos alguns eventos ciclo vida seus modelos. isso permite você adicione comportamentos seus modelos executando códigos forma transparente quando estes eventos acontecem, como quando você cria novo registro, atualiza, destrói, outros. você pode aprender mais sobre callbacks guia callbacks active record. rails fornece linguagem domínio específico (dsl) gerenciar schema banco dados, chamada migrations. migrations armazenadas arquivos executados diante qualquer banco dados active record suporta utilizando rake. aqui está migration cria tabela: rails mantém controle quais arquivos foram enviados banco dados fornece ferramentas reversão. realmente criar tabela, você deverá executar bin/rails db:migrate reverter, bin/rails db:rollback observe código acima agnóstico relação banco dados: rodar mysql, postgresql, oracle, entre outros. você pode aprender mais sobre migrations guia migrations active record. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1138,"title":"Action Controller Overview","heading":"1 O que um Controller faz?","subheading":"1 O que um Controller faz?","content":"actioncontroller mvc. após router determinar qual controller usar requisição, controller será responsável entender requisição retornar resposta apropriada. sorte, actioncontroller maior parte trabalho fundamental você convenções inteligentes fazer esse processo intuitivo quanto possível. maior parte aplicações restful,o controller receberá requisição \"invisível\" você está desenvolvendo), busca e/ou salva dados model, view criar saída html. controller precisa tratar requisições pouco diferente, isso problema, este apenas jeito mais comum controller trabalhar. controller pode então pensado como intermediário entre model view. isso dados model fiquem disponíveis view, possa mostrado usuário, salva atualiza dados usuário model. convenção nomenclatura controllers rails favorece pluralização última palavra nome controller, embora seja estritamente necessário (ex: applicationcontroller). exemplo, clientscontroller recomendado invés clientcontroller, siteadminscontroller recomendado invés siteadmincontroller sitesadminscontroller, assim diante. seguindo essa convenção será possível utilizar gerador rotas padrão (ex: resources, etc) precisar configurar cada :path :controller, ainda manter consistente auxiliares rotas todo projeto. veja layouts guia renderização mais detalhes. controller classe ruby herda applicationcontroller métodos como qualquer outra classe. quando aplicação recebe requisição, roteamento determinar qual controller qual action serão executados, então rails criar instância desse controller executará método possui mesmo nome action. como exemplo, usuário acessar /clients/new aplicação adicionar novo cliente, rails criar instância clientscontroller chamar método dele. repare método vazio exemplo acima funcionaria normalmente porque rails padrão renderizar view new.html.erb menos action indique outro caminho. criar novo client método pode tornar variável instância @client acessível view. guia layouts renderização explica essa etapa mais detalhadamente. applicationcontroller herda actioncontroller::base, define quantidade métodos úteis. este guia cobrir alguns destes métodos, você tiver curiosidade neles, você pode todos eles documentação próprio código fonte. apenas métodos públicos executáveis como actions. prática diminuir visibilidade métodos (utilizando private protected) foram designados serem actions, como métodos auxiliares filtros. você provavelmente querer acessar dados enviados pelo usuário outros parâmetros actions controller. existem dois tipos parâmetros possíveis numa aplicação web. primeiro parâmetros enviados como parte url, chamados parâmetros query string. query string tudo após url. segundo tipo parâmetro geralmente referido como dados post. essa informação geralmente formulário html preenchido pelo usuário. chamam dados post porque estes dados somente podem enviados como parte requisição http usando verbo post. rails distinção sobre parâmetros query string parâmetros post, ambos acessíveis meio hash params controller:"},{"id":1139,"title":"Action Controller Overview","heading":"4 Parâmetros","subheading":"4.1 Hash e Parâmetros de Array","content":"hash params limitado vetor unidimensional chaves valores. pode conter arrays hashes aninhados. enviar array valores, concatene colchetes vazio \"[]\" nome chave: valor params[:ids] será neste caso [\"1\", \"2\", \"3\"]. note valores parâmetros sempre strings; rails tenta adivinhar converter tipo. enviar hash, você inclui nome chave dentro colchetes: quando esse formulário enviado valor params[:client] será \"name\" \"acme\", \"phone\" \"12345\", \"address\" \"postcode\" \"12345\", \"city\" \"carrot city\" repare hash aninhado params[:client][:address]. objeto params atua como hash, permite você symbols strings indistintamente como chaves."},{"id":1140,"title":"Action Controller Overview","heading":"4 Parâmetros","subheading":"4.2 Parâmetros JSON","content":"você está construindo aplicação web, você pode achar mais confortável receber parâmetros formato json. header \"content-type\" requisição estiver definido como \"application/json\" rails automaticamente carregar seus parâmetros hash params, você pode acessar como acessaria normalmente. então exemplo, você estiver enviando este conteúdo json: controller receber params[:company] formato \"name\" \"acme\", \"address\" \"123 carrot street\" além disso, você tiver ativado config.wrap_parameters inicializador chamado wrap_parameters controller, você pode omitir elemento raiz parâmetro json. neste caso, parâmetros serão clonados enpacotados chave baseada nome controller. então requisição json acima pode escrita como: assumindo você está enviando dados companiescontroller, eles serão então encapsulados chave :company desta maneira: você pode customizar nome chave parâmetros específicos você quer envelopar consultando documentação"},{"id":1141,"title":"Action Controller Overview","heading":"4 Parâmetros","subheading":"4.3 Parâmetros de Rota","content":"hash params sempre conter chaves :controller :action, você deve usar métodos controller_name action_name acessar estes valores. quaisquer outros parâmetros definidos pela rota, como :id, também estarão disponíveis. exemplo, considere listagem clientes onde lista pode mostrar clientes ativos inativos. podemos adicionar rota captura parâmetro :status numa \"normalizada\": neste caso, quando usuário abrir /clients/active, params[:status] estará definido como \"active\". quando esta rota usada, params[:foo] também será definido como \"bar\", como tivesse sido enviado meio query string. controller também receber params[:action] valor \"index\" params[:controller] valor \"clients\"."},{"id":1142,"title":"Action Controller Overview","heading":"4 Parâmetros","subheading":"4.4 default_url_options","content":"você pode determinar parâmetros padrão globais geração urls definindo método chamado default_url_options controller. este método deve retornar hash dados padrão desejados, cujas chaves devem símbolos: estas opções serão usadas como ponto partida geração urls, então possível elas sejam sobrescritas pelas opções passadas chamadas url_for. você definir default_url_options applicationcontroller, como exemplo acima, estes padrões irão usados todas gerações url. método pode também definido controller específico, neste caso afetando somente urls geradas partir desse escopo. numa requisição método fato chamado toda gerada. questões performance hash retornado cacheado, máximo invocação requisição."},{"id":1143,"title":"Action Controller Overview","heading":"4 Parâmetros","subheading":"4.5 Parâmetros Fortes","content":"parâmetros fortes (strong parameters), parâmetros action controller proibidos serem usados atribuições massa active model sejam deliberadamente permitidos. isso significa você tomar decisão consciente sobre quais atributos podem permitidos update massa. esta prática mais segura ajudar prevenir acidentalmente usuários atualizem atributos sensíveis model. além disso, parâmetros podem marcados como obrigatórios irão seguir fluxo erro tratamento predefinido resultar código request sendo retornado caso todos parâmetros obrigatórios forem informados. chamando permit como: permite chave especificada (:id) inclusão aparecer params tiver valor escalar permitido associado ela. caso contrário chave será filtrada, então arrays, hashes, quaisquer outros objetos poderão adicionados. tipos escalares permitidos string, symbol, nilclass, numeric, trueclass, falseclass, date, time, datetime, stringio, actiondispatch::http::uploadedfile, rack::test::uploadedfile. declarar valor params deve array valores escalares permitidos, mapeie chave array vazio. vezes possível conveniente declarar chaves válidas parâmetro hash estrutura interna. apenas mapeie hash vazio: entretanto fique atento porque isso abre porta input arbitrário. neste caso, permit garante valores estrutura retornada valores escalares permitidos filtragem tudo houver além deles. permitir hash completo parâmetros, método permit! pode usado: este código marca hash parâmetros :log_entry qualquer sub-hash dele como valores permitidos verifica escalares permitidos, sendo qualquer coisa partir dele aceita. extremo cuidado deve considerado usar método permit!, visto permitir todos atuais futuros atributos model sejam preenchidos massa. você também pode usar permit parâmetros aninhados, seguinte forma: esta declaração permite preenchimento atributos name, emails, friends. esperado emails seja array valores permitidos escalares, friends seja array recursos atributos específicos: deve possuir atributo name (com quaisquer valores escalares permitidos), atributo hobbies como array valores permitidos escalares, atributo family restrito name (com qualquer valor escalar permitido também). você pode também querer usar atributos permitidos action new. isso traz problema você pode chamar require chave raiz porque normalmente existe momento chamada método classe model accepts_nested_attributes_for permite atualizar destruir outros models associados. isso baseado parâmetros _destroy: hashes chaves valor tipo inteiro tratados maneira diferente, você pode declarar atributos como eles fossem atributos filhos imediatos. você obtém estes tipos parâmetros quando você accepts_nested_attributes_for combinado associação has_many: imagine cenário onde você parâmetros representando nome produto hash dados arbitrários associado esse produto, você queira permitir preenchimento atributo nome produto também hash dados: parâmetros fortes desenhada casos mais comuns mente. houve intenção torná-la bala prateada lidar todos seus problemas filtragem parâmetros. entretanto, você pode facilmente misturar próprio código adaptar situação. aplicação possui sessão cada usuário, qual pode-se armazenar quantidades pequenas dados serão persistidos entre requisições. sessão fica disponível apenas controller view pode utilizar dentre vários mecanismos diferentes armazenamento: todos armazenamentos sessão utilizam cookie armazenar único cada sessão (você deve utilizar cookie, rails permitirá você passe sessão url, pois isso menos seguro). maioria armazenamentos, esse utilizado procurar dados sessão servidor, exemplo, tabela banco dados. apenas exceção, armazenamento sessão recomendado padrão cookiestore armazena todos dados sessão próprio cookie ainda estará disponível você, você precisar). vantagem muito leve requer zero configuração nova aplicação utilizar sessão. dados cookie assinados criptograficamente torná-los invioláveis, também criptografado qualquer pessoa acesso leia conteúdo. rails aceitará estiver sido editado). cookiestore pode armazenar cerca dados muito menos demais geralmente suficiente. armazenamento grandes quantidades dados sessão recomendado, independentemente qual armazenamento sessão aplicação utiliza. você deve evitar armazenar objetos complexos (como instâncias model) sessão, pois servidor pode capaz remontá-los entre requisições, resultará erro. suas sessões usuário armazenam dados críticos precisam durar longos períodos (por exemplo, você apenas utiliza flash mensagens), considere actiondispatch::session::cachestore. isso armazenará sessões utilizando implementação cache você configurou aplicação. vantagem você pode utilizar infraestrutura cache existente armazenar sessões precisar nenhuma configuração administração adicional. desvantagem sessões serão temporárias poderão desaparecer qualquer momento. leia mais sobre armazenamento sessão guia segurança. você precisar mecanismo diferente sessão armazenamento, você poderá alterá-lo initializer: rails configura chave sessão nome cookie) assinar dados sessão. estes também podem alterados initializer: você também pode passar chave :domain especificar nome domínio cookie: rails configura (para cookiestore) chave secreta utilizada assinar dados sessão config/credentials.yml.enc. isso pode alterado comando bin/rails credentials:edit."},{"id":1144,"title":"Action Controller Overview","heading":"5 Sessão","subheading":"5.1 Acessando a Sessão","content":"controller, você pode acessar sessão através método instância session. valores sessão armazenados utilizando pares chave/valor como hash: armazenar algo sessão, basta atribuí-lo chave como hash: remover algo sessão, exclua chave/valor: redefinir sessão inteira, utilize reset_session."},{"id":1145,"title":"Action Controller Overview","heading":"5 Sessão","subheading":"5.2 O Flash","content":"flash parte especial sessão, limpo cada requisição. isso significa valores armazenados nele estarão disponíveis somente próxima requisição, sendo úteis enviar mensagens erro, etc. flash acessado através método flash. assim como sessão, flash representado objeto hash. usaremos evento logout usuário como exemplo. controller pode enviar mensagem será exibida próxima requisição: observe também possível definir mensagem flash como parte redirecionamento. você pode usar :notice, :alert mais genérico, :flash: action destroy redireciona root_url aplicação, onde mensagem será exibida. note responsabilidade próxima action decidir mesmo algo) será feito valor anterior contido flash. comum exibir quaisquer erros, alertas avisos vindos flash layout aplicação: dessa forma, action gerar aviso, alerta mensagem, layout exibirá automaticamente. possível armazenar qualquer valor aceito pela session flash, ficando limitado somente avisos, alertas mensagens: quiser flash seja acessado outra requisição, flash.keep: padrão, adicionar valores flash tornará disponíveis somente próxima requisição, alguns casos, você pode querer acessar estes valores mesma requisição. exemplo, action create falhar salvar recurso você renderizar template diretamente, isso resultará nova requisição, você ainda pode querer exibir mensagem usando flash. isso, possível usar flash.now, maneira similar flash simples: aplicação pode armazemar pequenas quantidades dados cliente chamados cookies serão mantidas entre requisições sessões. rails fornece fácil acesso cookies através método cookies, assim como session funciona como hash: perceba enquanto valores sessão você pode definir chave como nil, deletar valor cookie você deve usar cookies.delete(:key). rails também fornece cookie assinado cookie criptografado amazenar dados sensíveis. cookie assinado anexa assinaura criptográfica valores cookie proteger integridade. cookie criptografado, criptografa valores além assiná-los, eles possam lidos pelo usuário final. consulte documentação inglês) mais detalhes. esses cookie jars especiais usam serializer serializar valores atribuídos strings desserializa-os objetos ruby leitura. você pode especificar qual serializer usar: serializer padrão novas aplicações :json. compatibilidade aplicações antigas usam cookies, :marshal usado quando opção serializer está especificada. você também pode definir esta opção como :hybrid, nesse caso rails desserializaria forma transparente cookies (serializados formato marshal) existentes reescrevê-los formaro json. isso útil migrar aplicações existentes serializer :json. também possível passar serializer personalizado responda load dump: usar serializer :json :hybrid, lembre-se todos objetos ruby podem serializados como json. exemplo, objetos date etime serão serializados como strings, hashes terão suas chaves transformadas string também. aconselhável você armazene apenas dados simples (strings números) cookies. você precisar armazenar objetos complexos, precisará lidar conversão manualmente valores requisições subsequentes. você usar cookie armazenamento sessão, isso também aplicaria hashes session flash. actioncontroller renderizar dados json seja extremamente fácil. você gerou controller usando scaffold, será algo mais menos assim: você pode observar código acima estamos usando render xml: @users, render xml: @users.to_xml. objeto string, então rails automaticamente chama to_xml nós. filtros métodos rodam \"before\" (antes de), \"after\" (depois \"around\" torno ação controller. filtros herdados, então você configurou filtro applicationcontroller, mesmo rodar cada controller aplicação. filtros \"before\" registrados através método before_action. eles podem interromper ciclo requisição. filtro comum \"before\" requer usuário está logado ação seja executada. você pode definir método filtro dessa forma: esse método simplesmente armazena mensagem erro flash redireciona formulário login usuário estiver logado. filtro \"before\" renderiza redireciona, ação será executada. filtros adicionais estão programados executar após esse filtro, eles cancelados também. nesse exemplo, filtro adicionado applicationcontroller dessa forma todos controllers aplicação irão herdar ele. isso fará tudo aplicação requeira usuário esteja logado possa usar. razões óbvias usuário conseguiria fazer começo conversa!), todos controllers devem requerer isso. você pode evitar esse filtro executado antes ações particular skip_before_action: agora, ações create loginscontroller irão funcionar como antes requerer usuário esteja logado. opção :only usada pular esse filtro somente essas ações, existe também opção :except funciona maneira contrária. essas opções podem utilizadas quando adicionamos filtros também, você possa adicionar filtro somente executa ações selecionadas."},{"id":1146,"title":"Action Controller Overview","heading":"8 Filtros","subheading":"8.1 Filtros after e around","content":"além filtros \"before\", você pode também executar filtros depois ação tenha sido executada, antes depois conjunto. filtros \"after\" registrados através método after_action. eles similares filtros \"before\", porque ação executada eles acesso dados resposta serão enviados cliente. obviamente, filtros \"after\" podem impedir ação executada. note também filtros \"after\" executados somente após ação sucedida, quando exceção gerada durante ciclo requisição. filtros \"around\" registrados através método around_action. eles responsáveis executar ações associadas yield, simular como middlewares rack funcionam. exemplo, website aonde alterações possuem fluxo aprovação, administrador pode pré-visualizar mesmas facilmente, aplicando-as dentro transação. note filtro \"around\" também envolve renderização. particular, exemplo acima, view efetuar leitura banco dados usando scope), mesma efetuada dentro transação então apresenta informação visualização. você pode escolher efetuar yield montar resposta você mesmo, faria ação fosse executada."},{"id":1147,"title":"Action Controller Overview","heading":"8 Filtros","subheading":"8.2 Outras Formas de Usar Filtros","content":"enquanto forma mais comum utilizar filtros criando métodos privados usando before_action, after_action, around_action adicioná-los, existem duas outras formas fazer mesma coisa. primeira utilizar bloco diretamente método *_action. bloco recebe controller como argumento. filtro require_login acima pode reescrito utilizar bloco: note que, nesse caso, filtro utiliza send porque método logged_in? privado filtro executado escopo controller. essa forma recomendada implementar esse filtro particular, casos mais simples, pode útil. especificamente around_action, bloco também acessa action: segunda forma utilizar classe verdade, qualquer objeto responda métodos corretos serve) gerenciar filtragem. isto útil casos mais complexos possíveis serem implementados forma fácil leitura reutilizados usando outras duas abordagens. exemplo, você pode reescrever filtro login novamente utilizando classe: novamente, esse exemplo ideal esse filtro, pois executado dentro escopo controller recebe mesmo como argumento. classe filtro deve implementar método mesmo nome filtro, então filtro before_action classe deve implementar método before, assim diante. método around deve efetuar yield executar ação. falsificação requisições cross-site tipo ataque qual site engana usuário faça requisições outro site, possivelmente adicionando, alterando deletando informações naquela site conhecimento permissão usuário. primeiro passo evitar isso certeza todas ações \"destrutivas\" (criar, atualizar, destruir) possam acessadas somente requisições sejam get. você está seguindo convenções restful você está fazendo isso. contudo, sites maliciosos continuam podendo enviar requisições site facilmente, proteção falsificação requisição entra. como nome diz, protege requisições falsas. forma como isso feito adicionando token adivinhável conhecido apenas pelo servidor cada requisição. desta forma, requisição chega token conhecido, acesso será negado. você gera form como este: você perceberá como token adicionado como campo invisível. rails adiciona esse token cada form gerado usando form helpers, então maior parte vezes você precisa preocupar isso. você está escrevendo form manualmente precisa adicionar token outra sessão, está disponível meio método form_authenticity_token. form_authenticity_token gera token autenticação válido. isso útil lugar aonde rails adiciona mesmo automaticamente, como chamadas ajax personalizadas. guia segurança possui mais informações sobre isso muitos outros problemas relacionados segurança você deve estar ciente quando desenvolve aplicação web. todo controller, existem dois métodos acesso apontando objetos requisição resposta associados ciclo requisição estiver execução momento. método request contém instância actiondispatch::request método response retorna objeto resposta representando será enviado volta cliente."},{"id":1148,"title":"Action Controller Overview","heading":"10 Os Objetos de Requisição e Resposta","subheading":"10.1 O Objeto request","content":"objeto requisição contém muitas informações úteis sobre requisição proveniente cliente. obter lista completa métodos disponíveis verifique documentação rails documentação rack. entre propriedades você pode acessar estão: rails armazena todos parâmetros enviados requisição hash params, importando eles foram enviados como parte query string corpo requisição. objeto requisição três métodos acesso fornecem acesso estes parâmetros dependendo onde eles vieram. hash query_parameters contem parâmetros foram enviados meio query_string enquanto hash request_parameters contém parâmetros enviados através corpo requisição. hash path_parameters contém parâmetros foram reconhecidos pelo roteamento como parte caminho leva controller action sendo executados."},{"id":1149,"title":"Action Controller Overview","heading":"10 Os Objetos de Requisição e Resposta","subheading":"10.2 O Objeto response","content":"objeto resposta geralmente usado diretamente, construído durante execução action renderização dados serão enviados volta usuário, porém vezes como filtro posterior pode útil acessar resposta diretamente. alguns destes métodos acesso também possuem setters, permitindo mudar seus valores. obter lista completa métodos disponíveis verifique documentação rails documentação rack; você quer definir headers customizados resposta então response.headers local indicado ajustar isto. atributo headers hash mapeia nomes headers seus respectivos valores, rails definir alguns deles automaticamente. você quiser adicionar modificar header, basta sinalizá-lo response.headers seguinte maneira: rails três mecanismos autenticação http embutidos:"},{"id":1150,"title":"Action Controller Overview","heading":"11 Autenticações HTTP","subheading":"11.1 Autenticação HTTP Basic","content":"autenticação http basic esquema autenticação suportado pela maioria navegadores outros clientes http. como exemplo, considere página administração será acessável apenas informando nome usuário senha janela autenticação http basic navegador. usar autenticação embutida fácil apenas requer você método, http_basic_authenticate_with. isso, você pode criar controllers namespaces herdam adminscontroller. filtro vai, assim, executado todas ações controllers, protegendo-os autenticação http basic."},{"id":1151,"title":"Action Controller Overview","heading":"11 Autenticações HTTP","subheading":"11.2 Autenticação HTTP Digest","content":"autenticação http digest superior autenticação basic porque requer cliente envie senha criptografia pela rede (embora autenticação http basic seja segura https). usar autenticação digest rails fácil requer apenas método, authenticate_or_request_with_http_digest. como visto exemplo acima, bloco authenticate_or_request_with_http_digest recebe apenas argumento nome usuário. bloco retorna senha. retornar false authenticate_or_request_with_http_digest causará falha autenticação."},{"id":1152,"title":"Action Controller Overview","heading":"11 Autenticações HTTP","subheading":"11.3 Autenticação HTTP Token","content":"autenticação token http esquema habilitar tokens bearer header http authorization. existem muitos formatos token disponíveis descrição está fora escopo desta documentação. exemplo, suponha você queira usar token autenticação emitido antecedência realizar autenticação acesso. implementar autenticação token rails bastante fácil requer apenas método, authenticate_or_request_with_http_token. como visto exemplo acima, bloco authenticate_or_request_with_http_token recebe dois argumentos: token umhash contendo opções foram analisadas partir header http authorization. bloco deve retornar true autenticação bem-sucedida. retornar false ounil causará falha autenticação. vezes você pode querer enviar arquivo usuário invés página html. todos controllers rails possuem métodos send_data send_file, transmitem dados navegador. método send_file permite você proveja nome arquivo disco conteúdo será transmitido. transmitir dados navegador, send_data: action download_pdf exemplo acima está chamando método privado verdade cria documento retorna como string. essa string será então transmitida navegador como arquivo download nome arquivo será sugerido usuário. vezes, quando arquivos transmitidos usuários, você pode querer façam download arquivo. imagens, exemplo, podem embutidas páginas html. comunicar navegador deve feito download arquivo, você pode utilizar propriedade inline opção :disposition. propriedade oposta padrão essa opção \"attachment\"."},{"id":1153,"title":"Action Controller Overview","heading":"12 Streaming e Downloads de Arquivos","subheading":"12.1 Enviando Arquivos","content":"você deseja enviar arquivo existe disco, utilize método send_file. esse método transmitir arquivo vez, evitando carregar arquivo inteiro memória vez. você pode desativar transmissão opção :stream ajustar tamanho bloco opção :buffer_size. opção :type especificada, será presumido acordo extensão especificada :filename. tipo conteúdo (content-type) estiver registrado extensão, será usado application/octet-stream."},{"id":1154,"title":"Action Controller Overview","heading":"12 Streaming e Downloads de Arquivos","subheading":"12.2 RESTful Downloads","content":"apesar método send_data funcionar tranquilamente, você está criando aplicação restful, geralmente necessário actions separadas download arquivos. terminologia rest, arquivo exemplo acima pode considerado apenas outra representação recurso navegador. rails provê jeito fácil prático fazer \"downloads restful\". veja como você pode re-escrever exemplo download seja parte action show, qualquer transmissão: este exemplo funcione, você deve adicionar mime type rails. isso pode feito adicionando seguinte linha arquivo config/initializers/mime_types.rb: agora usuários podem requerer arquivo adicionando \".pdf\" final url:"},{"id":1155,"title":"Action Controller Overview","heading":"12 Streaming e Downloads de Arquivos","subheading":"12.3 Transmissão Ao Vivo de Dado Arbitrários","content":"rails permite você transmita mais apenas arquivos. verdade, você pode transmitir você desejar como objeto resposta. modulo actioncontroller::live permite você criar conexão persistente navegador. utilizando esse módulo, você capaz enviar dados arbitrários navegador depender requisição http. incluindo actioncontroller::live dentro controller prover todas actions controller habilidade transmitir dados. você pode mesclar modulo seguinte forma: código acima manterá conexão constante navegador mandará mensagens \"hello world\\n\", cada segundo diferença. existem algumas coisas serem notadas exemplo acima. precisamos certeza resposta transmissão terminada. esquecer encerrar transmissão deixará socket aberto sempre. também precisamos estabelecer tipo conteúdo (content_type) text/event-stream antes responder transmissão. isso necessário, pois headers podem escritos depois resposta enviada (quando response.committed? retorna valor truthy), ocorre quando você escreve envia (commit) resposta transmissão. vamos supor você estivesse criando máquina karaokê usuário quer achar letra música particular. cada música (song) número específico linhas cada linha tempo (num_beats) terminar cantada. quiséssemos retornar letras estilo karaokê (mandar linha quando linha anterior terminada cantar), então poderíamos usar actioncontroller::live seguinte forma: código acima envia próxima linha apenas depois pessoa cantando completou linha anterior. transmitir dados arbitrários ferramenta extremamente poderosa. como mostrado exemplos anteriores, você pode escolher quando enviar resposta transmissão. entretanto, você deveria atentar seguintes pontos: rails mantém arquivo cada ambiente pasta log. eles bastante úteis quando estamos depurando está fato acontecendo aplicação, porém você pode querer sejam salvos todas informações sejam armazenadas arquivo aplicação ativa."},{"id":1156,"title":"Action Controller Overview","heading":"13 Filtragem de Log","subheading":"13.1 Filtrando Parâmetros","content":"você pode evitar parâmetros sensíveis requisição sejam salvos arquivo adicionando-os config.filter_parameters configuração aplicação. esses parâmetros aparecerão como [filtered] arquivo log."},{"id":1157,"title":"Action Controller Overview","heading":"13 Filtragem de Log","subheading":"13.2 Filtrando Redirecionamentos","content":"vezes desejável sejam filtrados arquivos alguns locais sensíveis quais aplicação está redirecionando. você pode fazer isso utilizando opção configuração config.filter_redirect: você pode utilizar string, expressão regular array ambos. urls correspondentes expressão regular serão marcadas como '[filtered]'. muito provavelmente aplicação conter bugs enviar exceções precisam tratadas. exemplo, usuário acessar link possui fonte banco dados, active record enviará activerecord::recordnotfound como exceção. exceção padrão rails apresenta mensagem \"500 server error\" todas exceções. requisição feita localmente, belo traceback outras informações serão mostradas assim você pode verificar errado tratar problema. requisição remota rails apenas apresentará mensagem \"500 server error\" usuário, \"404 found\" houver erro rota registro puder encontrado. vezes você pode querer customizar como esses erros encontrados como apresentados usuário. diversos níveis tratamento excessões disponiveis aplicação rails:"},{"id":1158,"title":"Action Controller Overview","heading":"14 Rescue","subheading":"14.1 Os Templates 404 e 500 Padrão","content":"padrão ambiente produção aplicação renderizar mensagem template erro ambiente desenvolvimento todas mensagens erro disparadas. essas mensagens armazenadas templates estáticos html pasta public, 404.html 500.html respectivamente. você pode customizar essas páginas adicionar algumas estilizações, lembre-se elas html estáticos; i.e. você pode usar erb, scss, coffeescript, layouts elas."},{"id":1159,"title":"Action Controller Overview","heading":"14 Rescue","subheading":"14.2 rescue_from","content":"você quiser fazer algo mais elaborado quando estiver lidando erros, você pode usar rescue_from, trata exceções certo tipo vários tipos) controller inteiro subclasses. quando exceção acontece pega diretiva rescue_from, objeto exceção passado handler. handler pode método objeto proc passado opção :with. você também pode usar bloco diretamente invés objeto proc. aqui está exemplo como você pode usar rescue_from interceptar todos erros activerecord::recordnotfound fazer algo eles. claro, este exemplo nada elaborado melhora muito forma original lidar erros, você capture todas essas exceções você livre fazer quiser elas. exemplo, você pode criar exceção personalizada quando usuário acesso parte aplicação: você quiser garantir comunicação controller seja possível apenas https, você deve fazer isso ativando middleware actiondispatch::ssl config.force_ssl configuração ambiente. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1160,"title":"Ruby on Rails 3.2 Release Notes","heading":"1 Upgrading to Rails 3.2","subheading":"1 Upgrading to Rails 3.2","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting update rails 3.2. then take heed following changes:"},{"id":1161,"title":"Ruby on Rails 3.2 Release Notes","heading":"1 Upgrading to Rails 3.2","subheading":"1.1 Rails 3.2 requires at least Ruby 1.8.7","content":"rails requires ruby 1.8.7 higher. support previous ruby versions been dropped officially should upgrade early possible. rails also compatible with ruby 1.9.2."},{"id":1162,"title":"Ruby on Rails 3.2 Release Notes","heading":"1 Upgrading to Rails 3.2","subheading":"1.2 What to update in your apps","content":""},{"id":1163,"title":"Ruby on Rails 3.2 Release Notes","heading":"1 Upgrading to Rails 3.2","subheading":"1.3 What to update in your engines","content":"replace code beneath comment script/rails with following content:"},{"id":1164,"title":"Ruby on Rails 3.2 Release Notes","heading":"2 Creating a Rails 3.2 application","subheading":"2.1 Vendoring Gems","content":"rails uses gemfile application root determine gems require your application start. this gemfile processed bundler gem, which then installs your dependencies. even install dependencies locally your application that doesn't depend system gems. more information: bundler homepage"},{"id":1165,"title":"Ruby on Rails 3.2 Release Notes","heading":"2 Creating a Rails 3.2 application","subheading":"2.2 Living on the Edge","content":"bundler gemfile makes freezing your rails application easy with dedicated bundle command. want bundle straight from repository, pass --edge flag: have local checkout rails repository want generate application using that, pass --dev flag:"},{"id":1166,"title":"Ruby on Rails 3.2 Release Notes","heading":"3 Major Features","subheading":"3.1 Faster Development Mode & Routing","content":"rails comes with development mode that's noticeably faster. inspired active reload, rails reloads classes only when files actually change. performance gains dramatic larger application. route recognition also bunch faster thanks journey engine."},{"id":1167,"title":"Ruby on Rails 3.2 Release Notes","heading":"3 Major Features","subheading":"3.2 Automatic Query Explains","content":"rails comes with nice feature that explains queries generated arel defining explain method activerecord::relation. example, something like puts person.active.limit(5).explain query arel produces explained. this allows check proper indexes further optimizations. queries that take more than half second automatically explained development mode. this threshold, course, changed."},{"id":1168,"title":"Ruby on Rails 3.2 Release Notes","heading":"3 Major Features","subheading":"3.3 Tagged Logging","content":"when running multi-user, multi-account application, it's great help able filter what. taggedlogging active support helps doing exactly that stamping lines with subdomains, request ids, anything else debugging such applications. from rails 3.2, rails guides available kindle free kindle reading apps ipad, iphone, mac, android, etc."},{"id":1169,"title":"Ruby on Rails 3.2 Release Notes","heading":"5 Railties","subheading":"5.1 Deprecations","content":""},{"id":1170,"title":"Ruby on Rails 3.2 Release Notes","heading":"7 Action Pack","subheading":"7.1 Action Controller","content":""},{"id":1171,"title":"Ruby on Rails 3.2 Release Notes","heading":"7 Action Pack","subheading":"7.2 Action Dispatch","content":""},{"id":1172,"title":"Ruby on Rails 3.2 Release Notes","heading":"7 Action Pack","subheading":"7.3 Action View","content":""},{"id":1173,"title":"Ruby on Rails 3.2 Release Notes","heading":"7 Action Pack","subheading":"7.4 Sprockets","content":""},{"id":1174,"title":"Ruby on Rails 3.2 Release Notes","heading":"8 Active Record","subheading":"8.1 Deprecations","content":""},{"id":1175,"title":"Ruby on Rails 3.2 Release Notes","heading":"9 Active Model","subheading":"9.1 Deprecations","content":""},{"id":1176,"title":"Ruby on Rails 3.2 Release Notes","heading":"11 Active Support","subheading":"11.1 Deprecations","content":"full list contributors rails many people spent many hours making rails, stable robust framework kudos them. rails release notes were compiled vijay dev. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1177,"title":"Instrumentação do Active Support","heading":"1 Introdução à instrumentação","subheading":"1 Introdução à instrumentação","content":"instrumentação fornecida pelo active support permite desenvolvedores exponham hooks outros desenvolvedores utilizarem. existem diversos destes hooks embutidos framework rails. essa api, desenvolvedores podem escolher serem notificados quando certos eventos ocorrerem suas aplicações rails outros códigos ruby. exemplo, existe hook active record chamado todas vezes query executada banco. subscriber observador) pode inscrever este hook, assim, observar número queries feitas durante certa ação. durante execução actions controller, existe também hook permite, exemplo, monitorar duração desta ação. também possível criar seus próprios eventos dentro aplicação, quais você poderá inscrever. subscribing event easy. activesupport::notifications.subscribe with block listen notification. block receives following arguments: concerned about accuracy started finished compute precise elapsed time then activesupport::notifications.monotonic_subscribe. given block would receive same arguments above started finished will have values with accurate monotonic time instead wall-clock time. defining those block arguments each time tedious. easily create activesupport::notifications::event from block arguments like this: also pass block that accepts only argument, will receive event object: most times only care about data itself. here shortcut just data. also subscribe events matching regular expression. this enables subscribe multiple events once. here's subscribe everything from actioncontroller. within ruby rails framework, there number hooks provided common events. these detailed below."},{"id":1178,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.1 Action Controller","content":"actioncontroller does specific information payload. options passed through payload."},{"id":1179,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.2 Action Dispatch","content":""},{"id":1180,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.3 Action View","content":":cache_hits only included collection rendered with cached: true."},{"id":1181,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.4 Active Record","content":""},{"id":1182,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.5 Action Mailer","content":""},{"id":1183,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.6 Active Support","content":"this event only used when #fetch called with block. this event only used when #fetch called with block."},{"id":1184,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.7 Active Job","content":""},{"id":1185,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.8 Action Cable","content":""},{"id":1186,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.9 Active Storage","content":""},{"id":1187,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.10 Railties","content":""},{"id":1188,"title":"Instrumentação do Active Support","heading":"3 Rails framework hooks","subheading":"3.11 Rails","content":"exception happens during instrumentation payload will include information about adding your events easy well. activesupport::notifications will take care heavy lifting you. simply call instrument with name, payload block. notification will sent after block returns. activesupport will generate start times instrumenter's unique data passed into instrument call will make into payload. here's example: listen this event with: also have option call instrument without passing block. this lets leverage instrumentation infrastructure other messaging uses. should follow rails conventions when defining your events. format event.library. your application sending tweets, should create event named tweet.twitter. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1189,"title":"Ruby on Rails 2.2 Release Notes","heading":"1 Infrastructure","subheading":"1 Infrastructure","content":"rails significant release infrastructure that keeps rails humming along connected rest world."},{"id":1190,"title":"Ruby on Rails 2.2 Release Notes","heading":"1 Infrastructure","subheading":"1.1 Internationalization","content":"rails supplies easy system internationalization i18n, those tired typing)."},{"id":1191,"title":"Ruby on Rails 2.2 Release Notes","heading":"1 Infrastructure","subheading":"1.2 Compatibility with Ruby 1.9 and JRuby","content":"along with thread safety, work been done make rails work well with jruby upcoming ruby 1.9. with ruby being moving target, running edge rails edge ruby still hit-or-miss proposition, rails ready make transition ruby when latter released. internal documentation rails, form code comments, been improved numerous places. addition, ruby rails guides project definitive source information major rails components. first official release, guides page includes: told, guides provide tens thousands words guidance beginning intermediate rails developers. want generate these guides locally, inside your application: this will guides inside rails.root/doc/guides start surfing straight away opening rails.root/doc/guides/index.html your favorite browser. supporting etag last modified timestamp http headers means that rails send back empty response gets request resource that hasn't been modified lately. this allows check whether response needs sent all. work done make rails thread-safe rolling rails 2.2. depending your server infrastructure, this means handle more requests with fewer copies rails memory, leading better server performance higher utilization multiple cores. enable multithreaded dispatching production mode your application, following line your config/environments/production.rb: there additions talk about here: transactional migrations pooled database transactions. there's also (and cleaner) syntax join table conditions, well number smaller improvements."},{"id":1192,"title":"Ruby on Rails 2.2 Release Notes","heading":"5 Active Record","subheading":"5.1 Transactional Migrations","content":"historically, multiple-step rails migrations have been source trouble. something went wrong during migration, everything before error changed database everything after error wasn't applied. also, migration version stored having been executed, which means that couldn't simply rerun rake db:migrate:redo after problem. transactional migrations change this wrapping migration steps transaction, that them fail, entire migration undone. rails 2.2, transactional migrations supported postgresql box. code extensible other database types future already extended support adapter."},{"id":1193,"title":"Ruby on Rails 2.2 Release Notes","heading":"5 Active Record","subheading":"5.2 Connection Pooling","content":"connection pooling lets rails distribute database requests across pool database connections that will grow maximum size default pool your database.yml adjust this). this helps remove bottlenecks applications that support many concurrent users. there's also wait_timeout that defaults seconds before giving activerecord::base.connection_pool gives direct access pool need"},{"id":1194,"title":"Ruby on Rails 2.2 Release Notes","heading":"5 Active Record","subheading":"5.3 Hashes for Join Table Conditions","content":"specify conditions join tables using hash. this help need query across complex joins."},{"id":1195,"title":"Ruby on Rails 2.2 Release Notes","heading":"5 Active Record","subheading":"5.4 New Dynamic Finders","content":"sets methods have been added active record's dynamic finders family. find_last_by_attribute method equivalent model.last(:conditions {:attribute value}) bang! version find_by_attribute! equivalent model.first(:conditions {:attribute value}) raise activerecord::recordnotfound instead returning can't find matching record, this method will raise exception cannot find match."},{"id":1196,"title":"Ruby on Rails 2.2 Release Notes","heading":"5 Active Record","subheading":"5.5 Associations Respect Private/Protected Scope","content":"active record association proxies respect scope methods proxied object. previously (given user has_one :account) @user.account.private_method would call private method associated account object. that fails rails 2.2; need this functionality, should @user.account.send(:private_method) make method public instead private protected). please note that you're overriding method_missing, should also override respond_to match behavior order associations function normally."},{"id":1197,"title":"Ruby on Rails 2.2 Release Notes","heading":"5 Active Record","subheading":"5.6 Other Active Record Changes","content":"controller side, there several changes that will help tidy your routes. there also some internal changes routing engine lower memory usage complex applications."},{"id":1198,"title":"Ruby on Rails 2.2 Release Notes","heading":"6 Action Controller","subheading":"6.1 Shallow Route Nesting","content":"shallow route nesting provides solution well-known difficulty using deeply-nested resources. with shallow nesting, need only supply enough information uniquely identify resource that want work with. this will enable recognition (among others) these routes:"},{"id":1199,"title":"Ruby on Rails 2.2 Release Notes","heading":"6 Action Controller","subheading":"6.2 Method Arrays for Member or Collection Routes","content":"supply array methods member collection routes. this removes annoyance having define route accepting verb soon need handle more than one. with rails 2.2, this legitimate route declaration:"},{"id":1200,"title":"Ruby on Rails 2.2 Release Notes","heading":"6 Action Controller","subheading":"6.3 Resources With Specific Actions","content":"default, when map.resources create route, rails generates routes seven default actions (index, show, create, new, edit, update, destroy). each these routes takes memory your application, causes rails generate additional routing logic. :only :except options fine-tune routes that rails will generate resources. supply single action, array actions, special :all :none options. these options inherited nested resources."},{"id":1201,"title":"Ruby on Rails 2.2 Release Notes","heading":"6 Action Controller","subheading":"6.4 Other Action Controller Changes","content":"action mailer supports mailer layouts. make your html emails pretty your in-browser views supplying appropriately-named layout example, customermailer class expects layouts/customer_mailer.html.erb. action mailer offers built-in support gmail's smtp servers, turning starttls automatically. this requires ruby 1.8.7 installed. active support offers built-in memoization rails applications, each_with_object method, prefix support delegates, various other utility methods."},{"id":1202,"title":"Ruby on Rails 2.2 Release Notes","heading":"9 Active Support","subheading":"9.1 Memoization","content":"memoization pattern initializing method once then stashing value away repeat use. you've probably used this pattern your applications: memoization lets handle this task declarative fashion: other features memoization include unmemoize, unmemoize_all, memoize_all turn memoization off."},{"id":1203,"title":"Ruby on Rails 2.2 Release Notes","heading":"9 Active Support","subheading":"9.2 each_with_object","content":"each_with_object method provides alternative inject, using method backported from ruby 1.9. iterates over collection, passing current element memo into block. lead contributor: adam keys"},{"id":1204,"title":"Ruby on Rails 2.2 Release Notes","heading":"9 Active Support","subheading":"9.3 Delegates With Prefixes","content":"delegate behavior from class another, specify prefix that will used identify delegated methods. example: this will produce delegated methods vendor#account_email vendor#account_password. also specify custom prefix: this will produce delegated methods vendor#owner_email vendor#owner_password. lead contributor: daniel schierbeck"},{"id":1205,"title":"Ruby on Rails 2.2 Release Notes","heading":"9 Active Support","subheading":"9.4 Other Active Support Changes","content":"railties (the core code rails itself) biggest changes config.gems mechanism."},{"id":1206,"title":"Ruby on Rails 2.2 Release Notes","heading":"10 Railties","subheading":"10.1 config.gems","content":"avoid deployment issues make rails applications more self-contained, it's possible place copies gems that your rails application requires /vendor/gems. this capability first appeared rails 2.1, it's much more flexible robust rails 2.2, handling complicated dependencies between gems. management rails includes these commands: unpack install single specifying gem=_gem_name_ command line."},{"id":1207,"title":"Ruby on Rails 2.2 Release Notes","heading":"10 Railties","subheading":"10.2 Other Railties Changes","content":"pieces older code deprecated this release: release notes compiled mike gunderloy você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1208,"title":"Ruby on Rails 5.1 Release Notes","heading":"1 Upgrading to Rails 5.1","subheading":"1 Upgrading to Rails 5.1","content":"you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails case haven't make sure your application still runs expected before attempting update rails 5.1. list things watch when upgrading available upgrading ruby rails guide."},{"id":1209,"title":"Ruby on Rails 5.1 Release Notes","heading":"2 Major Features","subheading":"2.1 Yarn Support","content":"pull request rails allows managing javascript dependencies from yarn. this will make easy libraries like react, vuejs other library from world. yarn support integrated with asset pipeline that dependencies will work seamlessly with rails app."},{"id":1210,"title":"Ruby on Rails 5.1 Release Notes","heading":"2 Major Features","subheading":"2.2 Optional Webpack support","content":"pull request rails apps integrate with webpack, javascript asset bundler, more easily using webpacker gem. --webpack flag when generating applications enable webpack integration. this fully compatible with asset pipeline, which continue images, fonts, sounds, other assets. even have some javascript code managed asset pipeline, other code processed webpack. this managed yarn, which enabled default."},{"id":1211,"title":"Ruby on Rails 5.1 Release Notes","heading":"2 Major Features","subheading":"2.3 jQuery no longer a default dependency","content":"pull request jquery required default earlier versions rails provide features like data-remote, data-confirm other parts rails' unobtrusive javascript offerings. longer required, been rewritten plain, vanilla javascript. this code ships inside action view rails-ujs. still jquery needed, longer required default."},{"id":1212,"title":"Ruby on Rails 5.1 Release Notes","heading":"2 Major Features","subheading":"2.4 System tests","content":"pull request rails baked-in support writing capybara tests, form system tests. longer need worry about configuring capybara database cleaning strategies such tests. rails provides wrapper running tests chrome with additional features such failure screenshots."},{"id":1213,"title":"Ruby on Rails 5.1 Release Notes","heading":"2 Major Features","subheading":"2.5 Encrypted secrets","content":"pull request rails allows management application secrets secure way, inspired sekrets gem. bin/rails secrets:setup encrypted secrets file. this will also generate master key, which must stored outside repository. secrets themselves then safely checked into revision control system, encrypted form. secrets will decrypted production, using stored either rails_master_key environment variable, file."},{"id":1214,"title":"Ruby on Rails 5.1 Release Notes","heading":"2 Major Features","subheading":"2.6 Parameterized mailers","content":"pull request allows specifying common parameters used methods mailer class order share instance variables, headers, other common setup."},{"id":1215,"title":"Ruby on Rails 5.1 Release Notes","heading":"2 Major Features","subheading":"2.7 Direct & resolved routes","content":"pull request rails adds methods, resolve direct, routing dsl. resolve method allows customizing polymorphic mapping models. this will generate singular /basket instead usual /baskets/:id. direct method allows creation custom helpers. return value block must valid argument url_for method. pass valid string url, hash, array, active model instance, active model class."},{"id":1216,"title":"Ruby on Rails 5.1 Release Notes","heading":"2 Major Features","subheading":"2.8 Unification of form_for and form_tag into form_with","content":"pull request before rails 5.1, there were interfaces handling html forms: form_for model instances form_tag custom urls. rails combines both these interfaces with form_with, generate form tags based urls, scopes, models. using just url: adding scope prefixes input field names: using model infers both scope: existing model makes update form fills field values: following changes require immediate action upon upgrade."},{"id":1217,"title":"Ruby on Rails 5.1 Release Notes","heading":"3 Incompatibilities","subheading":"3.1 Transactional tests with multiple connections","content":"transactional tests wrap active record connections database transactions. when test spawns additional threads, those threads obtain database connections, those connections handled specially: threads will share single connection, which inside managed transaction. this ensures threads database same state, ignoring outermost transaction. previously, such additional connections were unable fixture rows, example. when thread enters nested transaction, will temporarily obtain exclusive connection, maintain isolation. your tests currently rely obtaining separate, outside-of-transaction, connection spawned thread, you'll need switch more explicit connection management. your tests spawn threads those threads interact while also using explicit database transactions, this change introduce deadlock. easy opt-out this behavior disable transactional tests test cases affects. please refer changelog detailed changes."},{"id":1218,"title":"Ruby on Rails 5.1 Release Notes","heading":"4 Railties","subheading":"4.1 Removals","content":""},{"id":1219,"title":"Ruby on Rails 5.1 Release Notes","heading":"4 Railties","subheading":"4.2 Notable changes","content":"please refer changelog detailed changes."},{"id":1220,"title":"Ruby on Rails 5.1 Release Notes","heading":"5 Action Cable","subheading":"5.1 Notable changes","content":"please refer changelog detailed changes."},{"id":1221,"title":"Ruby on Rails 5.1 Release Notes","heading":"6 Action Pack","subheading":"6.1 Removals","content":""},{"id":1222,"title":"Ruby on Rails 5.1 Release Notes","heading":"6 Action Pack","subheading":"6.2 Deprecations","content":""},{"id":1223,"title":"Ruby on Rails 5.1 Release Notes","heading":"6 Action Pack","subheading":"6.3 Notable changes","content":"please refer changelog detailed changes."},{"id":1224,"title":"Ruby on Rails 5.1 Release Notes","heading":"7 Action View","subheading":"7.1 Removals","content":""},{"id":1225,"title":"Ruby on Rails 5.1 Release Notes","heading":"7 Action View","subheading":"7.2 Deprecations","content":""},{"id":1226,"title":"Ruby on Rails 5.1 Release Notes","heading":"7 Action View","subheading":"7.3 Notable changes","content":"please refer changelog detailed changes."},{"id":1227,"title":"Ruby on Rails 5.1 Release Notes","heading":"8 Action Mailer","subheading":"8.1 Notable changes","content":"please refer changelog detailed changes."},{"id":1228,"title":"Ruby on Rails 5.1 Release Notes","heading":"9 Active Record","subheading":"9.1 Removals","content":""},{"id":1229,"title":"Ruby on Rails 5.1 Release Notes","heading":"9 Active Record","subheading":"9.2 Deprecations","content":""},{"id":1230,"title":"Ruby on Rails 5.1 Release Notes","heading":"9 Active Record","subheading":"9.3 Notable changes","content":"please refer changelog detailed changes."},{"id":1231,"title":"Ruby on Rails 5.1 Release Notes","heading":"10 Active Model","subheading":"10.1 Removals","content":""},{"id":1232,"title":"Ruby on Rails 5.1 Release Notes","heading":"10 Active Model","subheading":"10.2 Notable changes","content":"please refer changelog detailed changes."},{"id":1233,"title":"Ruby on Rails 5.1 Release Notes","heading":"11 Active Job","subheading":"11.1 Removals","content":""},{"id":1234,"title":"Ruby on Rails 5.1 Release Notes","heading":"11 Active Job","subheading":"11.2 Notable changes","content":"please refer changelog detailed changes."},{"id":1235,"title":"Ruby on Rails 5.1 Release Notes","heading":"12 Active Support","subheading":"12.1 Removals","content":""},{"id":1236,"title":"Ruby on Rails 5.1 Release Notes","heading":"12 Active Support","subheading":"12.2 Deprecations","content":""},{"id":1237,"title":"Ruby on Rails 5.1 Release Notes","heading":"12 Active Support","subheading":"12.3 Notable changes","content":"full list contributors rails many people spent many hours making rails, stable robust framework kudos them. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1238,"title":"Ruby on Rails Guides Guidelines","heading":"1 Markdown","subheading":"1 Markdown","content":"guides written github flavored markdown. there comprehensive documentation markdown, well cheatsheet. each guide should start with motivational text (that's little introduction blue area). prologue should tell reader what guide about, what they will learn. example, routing guide. title every guide uses heading; guide sections headings; subsections headings; etc. note that generated html output will heading tags starting with <h2>. when writing headings, capitalize words except prepositions, conjunctions, internal articles, forms verb be\": same inline formatting regular text: links (api.rubyonrails.org) processed guides generator following manner: links that include release left untouched. example modified. please these release notes, since they should point corresponding version matter target being generated. link does include release edge guides being generated, domain replaced edgeapi.rubyonrails.org. example, becomes link does include release release guides being generated, rails version injected. example, generating guides v5.1.0 link becomes please don't link edgeapi.rubyonrails.org manually. guides should coherent consistent where appropriate. particular, these sections documentation guidelines also apply guides: before generating guides, make sure that have latest version bundler installed your system. find latest bundler version here. this writing, it's v1.17.1. install latest version bundler, install bundler."},{"id":1239,"title":"Ruby on Rails Guides Guidelines","heading":"6 HTML Guides","subheading":"6.1 Generation","content":"generate guides, just into guides directory, bundle install, execute:  resulting html files found ./output directory. process my_guide.md nothing else only environment variable: default, guides that have been modified processed, only rarely needed practice. force processing guides, pass all=1. want generate guides language other than english, keep them separate directory under source (e.g. source/es) guides_language environment variable: want environment variables configure generation script just run:"},{"id":1240,"title":"Ruby on Rails Guides Guidelines","heading":"6 HTML Guides","subheading":"6.2 Validation","content":"please validate generated html with: particularly, titles generated from their content this often leads duplicates."},{"id":1241,"title":"Ruby on Rails Guides Guidelines","heading":"7 Kindle Guides","subheading":"7.1 Generation","content":"generate guides kindle, following rake task: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1242,"title":"API de Internacionalização do Rails (I18n)","heading":"1 How I18n in Ruby on Rails Works","subheading":"1 How I18n in Ruby on Rails Works","content":"internationalization complex problem. natural languages differ many ways (e.g. pluralization rules) that hard provide tools solving problems once. that reason rails i18n focuses part this solution, every static string rails framework e.g. active record validation messages, time date formats been internationalized. localization rails application means defining translated values these strings desired languages. localize store update content your application (e.g. translate blog posts), translating model content section."},{"id":1243,"title":"API de Internacionalização do Rails (I18n)","heading":"1 How I18n in Ruby on Rails Works","subheading":"1.1 The Overall Architecture of the Library","content":"thus, ruby i18n split into parts: user should always only access public methods i18n module, useful know about capabilities backend."},{"id":1244,"title":"API de Internacionalização do Rails (I18n)","heading":"1 How I18n in Ruby on Rails Works","subheading":"1.2 The Public I18n API","content":"most important methods i18n are: these have aliases them like this: there also attribute readers writers following attributes: let's internationalize simple rails application from ground next chapters! there steps running with i18n support rails application."},{"id":1245,"title":"API de Internacionalização do Rails (I18n)","heading":"2 Setup the Rails Application for Internationalization","subheading":"2.1 Configure the I18n Module","content":"following convention over configuration philosophy, rails i18n provides reasonable default translation strings. when different translation strings needed, they overridden. rails adds .yml files from config/locales directory translations load path, automatically. default en.yml locale this directory contains sample pair translation strings: this means, that locale, hello will hello world string. every string inside rails internationalized this way, instance active model validation messages activemodel/lib/active_model/locale/en.yml file time date formats activesupport/lib/active_support/locale/en.yml file. yaml standard ruby hashes store translations default (simple) backend. i18n library will english default locale, i.e. different locale set, will used looking translations. translations load path (i18n.load_path) array paths files that will loaded automatically. configuring this path allows customization translations directory structure file naming scheme. change default locale well configure translations load paths config/application.rb follows: load path must specified before translations looked change default locale from initializer instead config/application.rb: note that appending directly i18n.load_path instead application's configured i18n will override translations from external gems."},{"id":1246,"title":"API de Internacionalização do Rails (I18n)","heading":"2 Setup the Rails Application for Internationalization","subheading":"2.2 Managing the Locale across Requests","content":"localized application will likely need provide support multiple locales. accomplish this, locale should beginning each request that strings translated using desired locale during lifetime that request. default locale used translations unless i18n.locale= i18n.with_locale used. i18n.locale leak into subsequent requests served same thread/process consistently every controller. example executing i18n.locale post requests will have effects later requests controllers that don't locale, only that particular thread/process. that reason, instead i18n.locale i18n.with_locale which does have this leak issue. locale around_action applicationcontroller: this example illustrates this using query parameter locale (e.g. http://example.com/books?locale=pt). with this approach, http://localhost:3000?locale=pt renders portuguese localization, while http://localhost:3000?locale=de loads german localization. locale using many different approaches. option have locale from domain name where your application runs. example, want www.example.com load english default) locale, www.example.es load spanish locale. thus top-level domain name used locale setting. this several advantages: implement like this your applicationcontroller: also locale from subdomain very similar way: your application includes locale switching menu, would then have something like this assuming would app_config[:deutsch_website_url] some value like http://www.application.de. this solution aforementioned advantages, however, able want provide different localizations (\"language versions\") different domains. most obvious solution would include locale code params request path). most usual setting (and passing) locale would include params, i18n.with_locale(params[:locale], &action) around_action first example. would like have urls like www.example.com/books?locale=ja www.example.com/ja/books this case. this approach almost same advantages setting locale from domain name: namely that it's restful accord with rest world wide web. does require little more work implement, though. getting locale from params setting accordingly hard; including every thus passing through requests include explicit option every url, e.g. link_to(books_url(locale: i18n.locale)), would tedious probably impossible, course. rails contains infrastructure \"centralizing dynamic decisions about urls\" applicationcontroller#default_url_options, which useful precisely this scenario: enables \"defaults\" url_for helper methods dependent implementing/overriding default_url_options). include something like this applicationcontroller then: every helper method dependent url_for (e.g. helpers named routes like root_path root_url, resource routes like books_path books_url, etc.) will automatically include locale query string, like this: http://localhost:3001/?locale=ja. satisfied with this. does impact readability urls, though, when locale \"hangs\" every your application. moreover, from architectural standpoint, locale usually hierarchically above other parts application domain: urls should reflect this. probably want urls look like this: http://www.example.com/en/books (which loads english locale) http://www.example.com/nl/books (which loads dutch locale). this achievable with \"over-riding default_url_options\" strategy from above: just have your routes with scope: now, when call books_path method should \"/en/books\" (for default locale). like http://localhost:3001/nl/books should load dutch locale, then, following calls books_path should return \"/nl/books\" (because locale changed). don't want force locale your routes optional path scope (denoted parentheses) like with this approach will routing error when accessing your resources such http://localhost:3001/books without locale. this useful when want default locale when specified. course, need take special care root (usually \"homepage\" \"dashboard\") your application. like http://localhost:3001/nl will work automatically, because root \"dashboard#index\" declaration your routes.rb doesn't take locale into account. (and rightly there's only \"root\" url.) would probably need urls like these: take special care about order your routes, this route declaration does \"eat\" other ones. (you want directly before root declaration.) application with authenticated users allow users locale preference through application's interface. with this approach, user's selected locale preference persisted database used locale authenticated requests that user. when explicit locale been request (e.g. above methods), application should attempt infer desired locale. accept-language http header indicates preferred language request's response. browsers this header value based user's language preference settings, making good first choice when inferring locale. trivial implementation using accept-language header would practice, more robust code necessary this reliably. iain hecker's http_accept_language library ryan tomayko's locale rack middleware provide solutions this problem. address client making request used infer client's region thus their locale. services such geolite2 country gems like geocoder used implement this approach. general, this approach less reliable than using language header recommended most applications. you've initialized i18n support your ruby rails application told which locale preserve between requests. next need internationalize application abstracting every locale-specific element. finally, need localize providing necessary translations these abstracts. given following example: "},{"id":1247,"title":"API de Internacionalização do Rails (I18n)","heading":"3 Internationalization and Localization","subheading":"3.1 Abstracting Localized Code","content":"code, there strings written english that will rendered response (\"hello flash\" \"hello world\"). internationalize this code, these strings need replaced calls rails' helper with appropriate each string: now, when this view rendered, will show error message which tells that translations keys :hello_world :hello_flash missing. "},{"id":1248,"title":"API de Internacionalização do Rails (I18n)","heading":"3 Internationalization and Localization","subheading":"3.2 Providing Translations for Internationalized Strings","content":"missing translations into translation dictionary files: because default_locale hasn't changed, translations locale response renders english strings:  locale pirate locale (http://localhost:3000?locale=pirate), response renders pirate strings:  yaml (.yml) plain ruby (.rb) files storing your translations simplestore. yaml preferred option among rails developers. however, disadvantage. yaml very sensitive whitespace special characters, application load your dictionary properly. ruby files will crash your application first request, easily find what's wrong. encounter \"weird issues\" with yaml dictionaries, putting relevant portion your dictionary into ruby file.) your translations stored yaml files, certain keys must escaped. they are: examples:"},{"id":1249,"title":"API de Internacionalização do Rails (I18n)","heading":"3 Internationalization and Localization","subheading":"3.3 Passing Variables to Translations","content":"consideration successfully internationalizing application avoid making incorrect assumptions about grammar rules when abstracting localized code. grammar rules that seem fundamental locale hold true another one. improper abstraction shown following example, where assumptions made about ordering different parts translation. note that rails provides number_to_currency helper handle following case. product's price then proper translation spanish instead \"€10\" abstraction cannot give create proper abstraction, i18n ships with feature called variable interpolation that allows variables translation definitions pass values these variables translation method. proper abstraction shown following example: grammatical punctuation decisions made definition itself, abstraction give proper translation."},{"id":1250,"title":"API de Internacionalização do Rails (I18n)","heading":"3 Internationalization and Localization","subheading":"3.4 Adding Date/Time Formats","content":"let's timestamp view, demo date/time localization feature well. localize time format pass time object i18n.l (preferably) rails' helper. pick format passing :format option default :default format used. pirate translations file let's time format (it's already there rails' defaults english): that would give you: "},{"id":1251,"title":"API de Internacionalização do Rails (I18n)","heading":"3 Internationalization and Localization","subheading":"3.5 Inflection Rules for Other Locales","content":"rails allows define inflection rules (such rules singularization pluralization) locales other than english. config/initializers/inflections.rb, define these rules multiple locales. initializer contains default example specifying additional rules english; follow that format other locales fit."},{"id":1252,"title":"API de Internacionalização do Rails (I18n)","heading":"3 Internationalization and Localization","subheading":"3.6 Localized Views","content":"let's have bookscontroller your application. your index action renders content app/views/books/index.html.erb template. when localized variant this template: index.es.html.erb same directory, rails will render content this template, when locale :es. when locale default locale, generic index.html.erb view will used. (future rails versions well bring this automagic localization assets public, etc.) make this feature, e.g. when working with large amount static content, which would clumsy inside yaml ruby dictionaries. bear mind, though, that change would like later template must propagated them."},{"id":1253,"title":"API de Internacionalização do Rails (I18n)","heading":"3 Internationalization and Localization","subheading":"3.7 Organization of Locale Files","content":"when using default simplestore shipped with i18n library, dictionaries stored plain-text files disk. putting translations parts your application file locale could hard manage. store these files hierarchy which makes sense you. example, your config/locales directory could look like this: this way, separate model model attribute names from text inside views, this from \"defaults\" (e.g. date time formats). other stores i18n library could provide different means such separation. should have good understanding using i18n library know internationalize basic rails application. following chapters, we'll cover features more depth. these chapters will show examples using both i18n.translate method well translate view helper method (noting additional feature provide view helper method). covered features like these:"},{"id":1254,"title":"API de Internacionalização do Rails (I18n)","heading":"4 Overview of the I18n API Features","subheading":"4.1 Looking up Translations","content":"translations looked keys which both symbols strings, these calls equivalent: translate method also takes :scope option which contain more additional keys that will used specify \"namespace\" scope translation key: this looks :record_invalid message active record error messages. additionally, both scopes specified dot-separated keys thus following calls equivalent: when :default option given, value will returned translation missing: :default value symbol, will used translated. provide multiple values default. first that results value will returned. e.g., following first tries translate :missing then :also_missing. both yield result, string \"not here\" will returned: look multiple translations once, array keys passed: also, translate (potentially nested) hash grouped translations. e.g., receive active record error messages hash with: want perform interpolation bulk hash translations, need pass deep_interpolation: true parameter. when have following dictionary: then nested interpolation will ignored without setting: rails implements convenient look locale inside views. when have following dictionary: look books.index.title value inside app/views/books/index.html.erb template like this (note dot): \"lazy\" lookup also used controllers: this useful setting flash messages instance:"},{"id":1255,"title":"API de Internacionalização do Rails (I18n)","heading":"4 Overview of the I18n API Features","subheading":"4.2 Pluralization","content":"many languages including english there only forms, singular plural, given string, e.g. message\" messages\". other languages (arabic, japanese, russian many more) have different grammars that have additional fewer plural forms. thus, i18n provides flexible pluralization feature. :count interpolation variable special role that both interpolated translation used pick pluralization from translations according pluralization rules defined pluralization backend. default, only english pluralization rules applied. algorithm pluralizations simple translation denoted :one regarded singular, :other used plural. count zero, :zero entry present, then will used instead :other. lookup does return hash suitable pluralization, i18n::invalidpluralizationdata exception raised. i18n provides pluralization backend that used enable locale-specific rules. include simple backend, then localized pluralization algorithms translation store, i18n.plural.rule. alternatively, separate rails-i18n used provide fuller locale-specific pluralization rules."},{"id":1256,"title":"API de Internacionalização do Rails (I18n)","heading":"4 Overview of the I18n API Features","subheading":"4.3 Setting and Passing a Locale","content":"locale either pseudo-globally i18n.locale (which uses thread.current like, e.g., time.zone) passed option #translate #localize. locale passed, i18n.locale used: explicitly passing locale: i18n.locale defaults i18n.default_locale which defaults :en. default locale like this:"},{"id":1257,"title":"API de Internacionalização do Rails (I18n)","heading":"4 Overview of the I18n API Features","subheading":"4.4 Using Safe HTML Translations","content":"keys with '_html' suffix keys named 'html' marked html safe. when them views html will escaped. interpolation escapes needed though. example, given: safely pass username user: safe strings other hand interpolated verbatim. "},{"id":1258,"title":"API de Internacionalização do Rails (I18n)","heading":"4 Overview of the I18n API Features","subheading":"4.5 Translations for Active Record Models","content":"methods model.model_name.human model.human_attribute_name(attribute) transparently look translations your model attribute names. example when following translations: then user.model_name.human will return \"customer\" user.human_attribute_name(\"login\") will return \"handle\". also plural form model names, adding following: then user.model_name.human(count: will return \"customers\". with count: without params will return \"customer\". event need access nested attributes within given model, should nest these under model/attribute model level your translation file: then user.human_attribute_name(\"role.admin\") will return \"admin\". active record validation error messages also translated easily. active record gives couple namespaces where place your message translations order provide different messages translation certain models, attributes, and/or validations. also transparently takes single table inheritance into account. this gives quite powerful means flexibly adjust your messages your application's needs. consider user model with validation name attribute like this: error message this case :blank. active record will look this namespaces: thus, example will following keys this order return first result: when your models additionally using inheritance then messages looked inheritance chain. example, might have admin model inheriting from user: then active record will look messages this order: this provide special translations various error messages different points your model's inheritance chain attributes, models, default scopes. translated model name, translated attribute name, value always available interpolation model, attribute value respectively. example, instead default error message \"cannot blank\" could attribute name like this \"please fill your %{attribute}\"."},{"id":1259,"title":"API de Internacionalização do Rails (I18n)","heading":"4 Overview of the I18n API Features","subheading":"4.6 Translations for Action Mailer E-Mail Subjects","content":"don't pass subject mail method, action mailer will find your translations. performed lookup will pattern <mailer_scope>.<action_name>.subject construct key. send parameters interpolation default_i18n_subject method mailer."},{"id":1260,"title":"API de Internacionalização do Rails (I18n)","heading":"4 Overview of the I18n API Features","subheading":"4.7 Overview of Other Built-In Methods that Provide I18n Support","content":"rails uses fixed strings other localizations, such format strings other format information couple helpers. here's brief overview. simple backend shipped with active support allows store translations both plain ruby yaml format.2 example ruby hash providing translations look like this: equivalent yaml file would look like this: see, both cases level locale. :foo namespace :bar translation \"baz\". here \"real\" example from active support en.yml translations yaml file: following equivalent lookups will return :short date format %d\": generally recommend using yaml format storing translations. there cases, though, where want store ruby lambdas part your locale data, e.g. special date formats."},{"id":1261,"title":"API de Internacionalização do Rails (I18n)","heading":"6 Customize your I18n Setup","subheading":"6.1 Using Different Backends","content":"several reasons simple backend shipped with active support only does \"simplest thing that could possibly work\" ruby rails3 which means that only guaranteed work english and, side effect, languages that very similar english. also, simple backend only capable reading translations cannot dynamically store them format. that does mean you're stuck with these limitations, though. ruby i18n makes very easy exchange simple backend implementation with something else that fits better your needs, passing backend instance i18n.backend= setter. example, replace simple backend with chain backend chain multiple backends together. this useful when want standard translations with simple backend store custom application translations database other backends. with chain backend, could active record backend fall back (default) simple backend:"},{"id":1262,"title":"API de Internacionalização do Rails (I18n)","heading":"6 Customize your I18n Setup","subheading":"6.2 Using Different Exception Handlers","content":"i18n defines following exceptions that will raised backends when corresponding unexpected conditions occur: i18n will catch these exceptions when they thrown backend pass them default_exception_handler method. this method will re-raise exceptions except missingtranslationdata exceptions. when missingtranslationdata exception been caught, will return exception's error message string containing missing key/scope. reason this that during development you'd usually want your views still render even though translation missing. other contexts might want change this behavior, though. e.g. default exception handling does allow catch missing translations during automated tests easily. this purpose different exception handler specified. specified exception handler must method i18n module class with call method: this would re-raise only missingtranslationdata exception, passing other input default exception handler. however, using i18n::backend::pluralization this handler will also raise i18n::missingtranslationdata: translation missing: en.i18n.plural.rule exception that should normally ignored fall back default pluralization rule english locale. avoid this additional check translation key: another example where default behavior less desirable rails translationhelper which provides method well #translate). when missingtranslationdata exception occurs this context, helper wraps message into span with class translation_missing. helper forces i18n#translate raise exceptions matter what exception handler defined setting :raise option: i18n described this guide primarily intended translating interface strings. looking translate model content (e.g. blog posts), will need different solution help with this. several gems help with this: this point should have good overview about i18n support ruby rails works ready start translating your project. i18n support ruby rails introduced release still evolving. project follows good ruby rails development tradition evolving solutions gems real applications first, only then cherry-picking best-of-breed most widely useful features inclusion core. thus encourage everybody experiment with ideas features gems other libraries make them available community. (don't forget announce your work mailing list!) find your locale (language) missing from example translations data repository ruby rails, please fork repository, your data, send pull request. quote wikipedia: \"internationalization process designing software application that adapted various languages regions without engineering changes. localization process adapting software specific region language adding locale-specific components translating text.\" other backends might allow require other formats, e.g. gettext backend might allow read gettext files. these reasons that don't want imply unnecessary load applications that need i18n capabilities, need keep i18n library simple possible english. another reason that virtually impossible implement one-fits-all solution problems related i18n existing languages. solution that allows exchange entire implementation easily appropriate anyway. this also makes much easier experiment with custom features extensions. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1263,"title":"Ruby on Rails 3.0 Release Notes","heading":null,"subheading":null,"content":"install rails you're upgrading existing application, it's great idea have good test coverage before going should also first upgrade rails 2.3.5 make sure your application still runs expected before attempting update rails then take heed following changes:"},{"id":1264,"title":"Ruby on Rails 3.0 Release Notes","heading":"1 Upgrading to Rails 3","subheading":"1.1 Rails 3 requires at least Ruby 1.8.7","content":"rails requires ruby 1.8.7 higher. support previous ruby versions been dropped officially should upgrade early possible. rails also compatible with ruby 1.9.2."},{"id":1265,"title":"Ruby on Rails 3.0 Release Notes","heading":"1 Upgrading to Rails 3","subheading":"1.2 Rails Application object","content":"part groundwork supporting running multiple rails applications same process, rails introduces concept application object. application object holds application specific configurations very similar nature config/environment.rb from previous versions rails. each rails application must have corresponding application object. application object defined config/application.rb. you're upgrading existing application rails must this file move appropriate configurations from config/environment.rb config/application.rb."},{"id":1266,"title":"Ruby on Rails 3.0 Release Notes","heading":"1 Upgrading to Rails 3","subheading":"1.3 script/* replaced by script/rails","content":"script/rails replaces scripts that used script directory. script/rails directly though, rails command detects being invoked root rails application runs script you. intended usage rails --help list options."},{"id":1267,"title":"Ruby on Rails 3.0 Release Notes","heading":"1 Upgrading to Rails 3","subheading":"1.4 Dependencies and config.gem","content":"config.gem method gone been replaced using bundler gemfile, vendoring gems below."},{"id":1268,"title":"Ruby on Rails 3.0 Release Notes","heading":"1 Upgrading to Rails 3","subheading":"1.5 Upgrade Process","content":"help with upgrade process, plugin named rails upgrade been created automate part simply install plugin, then rake rails:upgrade:check check your pieces that need updated (with links information update them). also offers task generate gemfile based your current config.gem calls task generate routes file from your current one. plugin, simply following: example that works rails upgrade official plugin aside from rails upgrade tool, need more help, there people rubyonrails-talk that probably doing same thing, possibly hitting same issues. sure blog your experiences when upgrading others benefit from your knowledge!"},{"id":1269,"title":"Ruby on Rails 3.0 Release Notes","heading":"2 Creating a Rails 3.0 application","subheading":"2.1 Vendoring Gems","content":"rails uses gemfile application root determine gems require your application start. this gemfile processed bundler which then installs your dependencies. even install dependencies locally your application that doesn't depend system gems. more information: bundler homepage"},{"id":1270,"title":"Ruby on Rails 3.0 Release Notes","heading":"2 Creating a Rails 3.0 application","subheading":"2.2 Living on the Edge","content":"bundler gemfile makes freezing your rails application easy with dedicated bundle command, rake freeze longer relevant been dropped. want bundle straight from repository, pass --edge flag: have local checkout rails repository want generate application using that, pass --dev flag: there major changes architecture rails."},{"id":1271,"title":"Ruby on Rails 3.0 Release Notes","heading":"3 Rails Architectural Changes","subheading":"3.1 Railties Restrung","content":"railties updated provide consistent plugin entire rails framework well total rewrite generators rails bindings, result that developers hook into significant stage generators application framework consistent, defined manner."},{"id":1272,"title":"Ruby on Rails 3.0 Release Notes","heading":"3 Rails Architectural Changes","subheading":"3.2 All Rails core components are decoupled","content":"with merge merb rails, jobs remove tight coupling between rails core components. this been achieved, rails core components using same that developing plugins. this means plugin make, core component replacement (like datamapper sequel) access functionality that rails core components have access extend enhance will. more information: great decoupling"},{"id":1273,"title":"Ruby on Rails 3.0 Release Notes","heading":"3 Rails Architectural Changes","subheading":"3.3 Active Model Abstraction","content":"part decoupling core components extracting ties active record from action pack. this been completed. plugins just need implement active model interfaces work seamlessly with action pack. more information: make ruby object feel like activerecord"},{"id":1274,"title":"Ruby on Rails 3.0 Release Notes","heading":"3 Rails Architectural Changes","subheading":"3.4 Controller Abstraction","content":"another part decoupling core components creating base superclass that separated from notions http order handle rendering views, etc. this creation abstractcontroller allowed actioncontroller actionmailer greatly simplified with common code removed from these libraries into abstract controller. more information: rails edge architecture"},{"id":1275,"title":"Ruby on Rails 3.0 Release Notes","heading":"3 Rails Architectural Changes","subheading":"3.5 Arel Integration","content":"arel active relation) been taken underpinnings active record required rails. arel provides abstraction that simplifies active record provides underpinnings relation functionality active record. more information: wrote arel"},{"id":1276,"title":"Ruby on Rails 3.0 Release Notes","heading":"3 Rails Architectural Changes","subheading":"3.6 Mail Extraction","content":"action mailer ever since beginnings monkey patches, parsers even delivery receiver agents, addition having tmail vendored source tree. version changes that with email message related functionality abstracted mail gem. this again reduces code duplication helps create definable boundaries between action mailer email parser. more information: action mailer rails documentation rails tree being updated with changes, additionally, rails edge guides being updated reflect changes rails 3.0. guides guides.rubyonrails.org however will continue contain only stable version rails this point, version 2.3.5, until released). more information: rails documentation projects large amount work been done with i18n support rails including latest i18n supplying many speed improvements. more information: rails i18n changes with decoupling main rails frameworks, railties huge overhaul make linking frameworks, engines, plugins painless extensible possible: railties generators huge amount attention rails 3.0, basically: also, views generated railties generators some overhaul: finally couple enhancements were added rake tasks: railties deprecates: plugin/rails/tasks, plugin/tasks longer loaded tasks must plugin/lib/tasks. more information: there have been significant internal external changes action pack."},{"id":1277,"title":"Ruby on Rails 3.0 Release Notes","heading":"7 Action Pack","subheading":"7.1 Abstract Controller","content":"abstract controller pulls generic parts action controller into reusable module that library render templates, render partials, helpers, translations, logging, part request response cycle. this abstraction allowed actionmailer::base just inherit from abstractcontroller just wrap rails onto mail gem. also provided opportunity clean action controller, abstracting what could simplify code. note however that abstract controller user facing api, will into your rails. more information: rails edge architecture"},{"id":1278,"title":"Ruby on Rails 3.0 Release Notes","heading":"7 Action Pack","subheading":"7.2 Action Controller","content":"deprecations: more information:"},{"id":1279,"title":"Ruby on Rails 3.0 Release Notes","heading":"7 Action Pack","subheading":"7.3 Action Dispatch","content":"action dispatch rails provides new, cleaner implementation routing. deprecations more information: rails router: rack revamped routes rails generic actions rails"},{"id":1280,"title":"Ruby on Rails 3.0 Release Notes","heading":"7 Action Pack","subheading":"7.4 Action View","content":"major re-write done action view helpers, implementing unobtrusive javascript (ujs) hooks removing inline ajax commands. this enables rails compliant driver implement hooks helpers. what this means that previous remote_<method> helpers have been removed from rails core into prototype legacy helper. hooks into your html, pass :remote true instead. example: produces: helpers like form_for div_for that insert content from block now: your helpers that kind expected return string, rather than appending output buffer hand. helpers that something else, like cache content_for, affected this change, they need &lt;% before. active model rails 3.0. provides abstraction layer libraries interact with rails implementing active model interface."},{"id":1281,"title":"Ruby on Rails 3.0 Release Notes","heading":"8 Active Model","subheading":"8.1 ORM Abstraction and Action Pack Interface","content":"part decoupling core components extracting ties active record from action pack. this been completed. plugins just need implement active model interfaces work seamlessly with action pack. more information: make ruby object feel like activerecord"},{"id":1282,"title":"Ruby on Rails 3.0 Release Notes","heading":"8 Active Model","subheading":"8.2 Validations","content":"validations have been moved from active record into active model, providing interface validations that works across libraries rails also pass validator object, which then reuse between objects that active model: there's also support introspection: more information: active record received attention rails 3.0, including abstraction into active model, full update query interface using arel, validation updates, many enhancements fixes. rails will usable through compatibility layer that will supported until version 3.1."},{"id":1283,"title":"Ruby on Rails 3.0 Release Notes","heading":"9 Active Record","subheading":"9.1 Query Interface","content":"active record, through arel, returns relations core methods. existing rails 2.3.x still supported will deprecated until rails removed until rails 3.2, however, provides following methods that return relations allowing them chained together: more information:"},{"id":1284,"title":"Ruby on Rails 3.0 Release Notes","heading":"9 Active Record","subheading":"9.2 Enhancements","content":""},{"id":1285,"title":"Ruby on Rails 3.0 Release Notes","heading":"9 Active Record","subheading":"9.3 Patches and Deprecations","content":"additionally, many fixes active record branch: well following deprecations: active resource also extracted active model allowing active resource objects with action pack seamlessly. deprecations: large effort made active support make cherry pickable, that longer have require entire active support library pieces this allows various core components rails slimmer. these main changes active support: following methods have been removed because they available ruby 1.8.7 1.9. security patch rexml remains active support because early patch-levels ruby 1.8.7 still need active support knows whether apply not. following methods have been removed because they longer used framework: action mailer been given with tmail being replaced with mail email library. action mailer itself been given almost complete re-write with pretty much every line code touched. result that action mailer simply inherits from abstract controller wraps mail rails dsl. this reduces amount code duplication other libraries action mailer considerably. deprecations: more information: full list contributors rails many people spent many hours making rails kudos them. rails release notes were compiled mikel lindsaar. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1286,"title":"Development Dependencies Install","heading":"1 The Easy Way","subheading":"1 The Easy Way","content":"easiest recommended development environment ready hack rails development box. case can't rails development box, steps below manually build development ruby rails core development."},{"id":1287,"title":"Development Dependencies Install","heading":"2 The Hard Way","subheading":"2.1 Install Git","content":"ruby rails uses source code control. homepage installation instructions. there variety resources that will help familiar with git:"},{"id":1288,"title":"Development Dependencies Install","heading":"2 The Hard Way","subheading":"2.2 Clone the Ruby on Rails Repository","content":"navigate folder where want ruby rails source code will create rails subdirectory) run:"},{"id":1289,"title":"Development Dependencies Install","heading":"2 The Hard Way","subheading":"2.3 Install Additional Tools and Services","content":"some rails tests depend additional tools that need install before running those specific tests. here's list each gems' additional dependencies: install services need properly test full you'll making changes below find instructions install additional tools different oses. macos homebrew install additional tools. install run: you'll also need start each installed services. list available services run: then start each services like this: replace mysql with name service want start. install run: install run: install run: install run: install everything through ports (these packages located under databases folder)."},{"id":1290,"title":"Development Dependencies Install","heading":"2 The Hard Way","subheading":"2.4 Database Configuration","content":"there couple additional steps required configure database engines required running active record tests. order able test suite against mysql need create user named rails with privileges test databases: postgresql's authentication works differently. development environment with your development account, linux bsd, just have run: macos: then, need create test databases both mysql postgresql with: also create test databases each database engine separately: drop databases using: you're using another database, check file activerecord/test/config.yml activerecord/test/config.example.yml default connection information. edit activerecord/test/config.yml provide different credentials your machine must, obviously should push such changes back rails."},{"id":1291,"title":"Development Dependencies Install","heading":"2 The Hard Way","subheading":"2.5 Install JavaScript dependencies","content":"installed yarn, will need install javascript dependencies:"},{"id":1292,"title":"Development Dependencies Install","heading":"2 The Hard Way","subheading":"2.6 Install Bundler gem","content":"recent version bundler run:  don't need active record tests."},{"id":1293,"title":"Development Dependencies Install","heading":"2 The Hard Way","subheading":"2.7 Contribute to Rails","content":"after you've everything, read start contributing. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1294,"title":"Introdução às Engines","heading":"1 What are Engines?","subheading":"1 What are Engines?","content":"engines considered miniature applications that provide functionality their host applications. rails application actually just \"supercharged\" engine, with rails::application class inheriting behavior from rails::engine. therefore, engines applications thought almost same thing, just with subtle differences, you'll throughout this guide. engines applications also share common structure. engines also closely related plugins. share common directory structure, both generated using rails plugin generator. difference that engine considered \"full plugin\" rails indicated --full option that's passed generator command). we'll actually using --mountable option here, which includes features --full, then some. this guide will refer these \"full plugins\" simply \"engines\" throughout. engine plugin, plugin engine. engine that will created this guide will called \"blorgh\". this engine will provide blogging functionality host applications, allowing articles comments created. beginning this guide, will working solely within engine itself, later sections you'll hook into application. engines also isolated from their host applications. this means that application able have path provided routing helper such articles_path engine that also provides path also called articles_path, would clash. along with this, controllers, models table names also namespaced. you'll this later this guide. it's important keep mind times that application should always take precedence over engines. application object that final what goes environment. engine should only enhancing rather than changing drastically. demonstrations other engines, check devise, engine that provides authentication parent applications, thredded, engine that provides forum functionality. there's also spree which provides e-commerce platform, refinery cms, engine. finally, engines would have been possible without work james adam, piotr sarnacki, rails core team, number other people. ever meet them, don't forget thanks! generate engine, will need plugin generator pass options appropriate need. \"blorgh\" example, will need create \"mountable\" engine, running this command terminal: full list options plugin generator seen typing: --mountable option tells generator that want create \"mountable\" namespace-isolated engine. this generator will provide same skeleton structure would --full option. --full option tells generator that want create engine, including skeleton structure that provides following: --mountable option will --full option: additionally, --mountable option tells generator mount engine inside dummy testing application located test/dummy adding following dummy application's routes file test/dummy/config/routes.rb:"},{"id":1295,"title":"Introdução às Engines","heading":"2 Generating an Engine","subheading":"2.1 Inside an Engine","content":"root this brand engine's directory lives blorgh.gemspec file. when include engine into application later will with this line rails application's gemfile: don't forget bundle install usual. specifying within gemfile, bundler will load such, parsing this blorgh.gemspec file requiring file within directory called lib/blorgh.rb. this file requires blorgh/engine.rb file (located lib/blorgh/engine.rb) defines base module called blorgh. within lib/blorgh/engine.rb base class engine: inheriting from rails::engine class, this notifies rails that there's engine specified path, will correctly mount engine inside application, performing tasks such adding directory engine load path models, mailers, controllers, views. isolate_namespace method here deserves special notice. this call responsible isolating controllers, models, routes, other things into their namespace, away from similar components inside application. without this, there possibility that engine's components could \"leak\" into application, causing unwanted disruption, that important engine components could overridden similarly named things within application. examples such conflicts helpers. without calling isolate_namespace, engine's helpers would included application's controllers. what this isolation namespace means that model generated call bin/rails generate model, such bin/rails generate model article, won't called article, instead namespaced called blorgh::article. addition, table model namespaced, becoming blorgh_articles, rather than simply articles. similar model namespacing, controller called articlescontroller becomes blorgh::articlescontroller views that controller will app/views/articles, app/views/blorgh/articles instead. mailers, jobs helpers namespaced well. finally, routes will also isolated within engine. this most important parts about namespacing, discussed later routes section this guide. inside directory standard assets, controllers, helpers, jobs, mailers, models, views directories that should familiar with from application. we'll look more into models future section, when we're writing engine. within app/assets directory, there images stylesheets directories which, again, should familiar with their similarity application. difference here, however, that each directory contains sub-directory with engine name. because this engine going namespaced, assets should too. within app/controllers directory there blorgh directory that contains file called application_controller.rb. this file will provide common functionality controllers engine. blorgh directory where other controllers engine will placing them within this namespaced directory, prevent them from possibly clashing with identically-named controllers within other engines even within application. just like app/controllers, will find blorgh subdirectory under app/helpers, app/jobs, app/mailers app/models directories containing associated application_*.rb file gathering common functionalities. placing your files under this subdirectory namespacing your objects, prevent them from possibly clashing with identically-named elements within other engines even within application. lastly, app/views directory contains layouts folder, which contains file blorgh/application.html.erb. this file allows specify layout engine. this engine used stand-alone engine, then would customization layout this file, rather than application's app/views/layouts/application.html.erb file. don't want force layout users engine, then delete this file reference different layout controllers your engine. this directory contains file, bin/rails, which enables rails sub-commands generators just like would within application. this means that will able generate controllers models this engine very easily running commands like this: keep mind, course, that anything generated with these commands inside engine that isolate_namespace engine class will namespaced. test directory where tests engine will test engine, there cut-down version rails application embedded within test/dummy. this application will mount engine test/dummy/config/routes.rb file: this line mounts engine path /blorgh, which will make accessible through application only that path. inside test directory there test/integration directory, where integration tests engine should placed. other directories created test directory well. example, wish create test/models directory your model tests. engine that this guide covers provides submitting articles commenting functionality follows similar thread getting started guide, with some twists."},{"id":1296,"title":"Introdução às Engines","heading":"3 Providing Engine Functionality","subheading":"3.1 Generating an Article Resource","content":"first thing generate blog engine article model related controller. quickly generate this, rails scaffold generator. this command will output this information: first thing that scaffold generator does invoke active_record generator, which generates migration model resource. note here, however, that migration called create_blorgh_articles rather than usual create_articles. this isolate_namespace method called blorgh::engine class's definition. model here also namespaced, being placed app/models/blorgh/article.rb rather than app/models/article.rb isolate_namespace call within engine class. next, test_unit generator invoked this model, generating model test test/models/blorgh/article_test.rb (rather than test/models/article_test.rb) fixture test/fixtures/blorgh/articles.yml (rather than test/fixtures/articles.yml). after that, line resource inserted into config/routes.rb file engine. this line simply resources :articles, turning config/routes.rb file engine into this: note here that routes drawn upon blorgh::engine object rather than yourapp::application class. this that engine routes confined engine itself mounted specific point shown test directory section. also causes engine's routes isolated from those routes that within application. routes section this guide describes detail. next, scaffold_controller generator invoked, generating controller called blorgh::articlescontroller app/controllers/blorgh/articles_controller.rb) related views app/views/blorgh/articles. this generator also generates tests controller (test/controllers/blorgh/articles_controller_test.rb test/system/blorgh/articles_test.rb) helper (app/helpers/blorgh/articles_helper.rb). everything this generator created neatly namespaced. controller's class defined within blorgh module: helper inside app/helpers/blorgh/articles_helper.rb also namespaced: this helps prevent conflicts with other engine application that have article resource well. what engine running bin/rails db:migrate root engine migration generated scaffold generator, then running bin/rails server test/dummy. when open http://localhost:3000/blorgh/articles will default scaffold that been generated. click around! you've just generated your first engine's first functions. you'd rather play around console, bin/rails console will also work just like rails application. remember: article model namespaced, reference must call blorgh::article. final thing that articles resource this engine should root engine. whenever someone goes root path where engine mounted, they should shown list articles. this made happen this line inserted into config/routes.rb file inside engine: people will only need root engine articles, rather than visiting /articles. this means that instead http://localhost:3000/blorgh/articles, only need http://localhost:3000/blorgh now."},{"id":1297,"title":"Introdução às Engines","heading":"3 Providing Engine Functionality","subheading":"3.2 Generating a Comments Resource","content":"that engine create articles, only makes sense commenting functionality well. this, you'll need generate comment model, comment controller, then modify articles scaffold display comments allow people create ones. from engine root, model generator. tell generate comment model, with related table having columns: article_id integer text text column. this will output following: this generator call will generate just necessary model files needs, namespacing files under blorgh directory creating model class called blorgh::comment. migration create blorgh_comments table: show comments article, edit app/views/blorgh/articles/show.html.erb this line before \"edit\" link: this line will require there has_many association comments defined blorgh::article model, which there isn't right now. define one, open app/models/blorgh/article.rb this line into model: turning model into this: next, there needs form that comments created article. this, this line underneath call render @article.comments app/views/blorgh/articles/show.html.erb: next, partial that this line will render needs exist. create directory app/views/blorgh/comments file called _form.html.erb which this content create required partial: when this form submitted, going attempt perform post request route /articles/:article_id/comments within engine. this route doesn't exist moment, created changing resources :articles line inside config/routes.rb into these lines: this creates nested route comments, which what form requires. route exists, controller that this route goes does not. create this command from engine root: this will generate following things: form will making post request /articles/:article_id/comments, which will correspond with create action blorgh::commentscontroller. this action needs created, which done putting following lines inside class definition app/controllers/blorgh/comments_controller.rb: this final step required comment form working. displaying comments, however, quite right yet. were create comment right now, would this error: engine unable find partial required rendering comments. rails looks first application's (test/dummy) app/views directory then engine's app/views directory. when can't find will throw this error. engine knows look blorgh/comments/_comment because model object receiving from blorgh::comment class. this partial will responsible rendering just comment text, now. create file app/views/blorgh/comments/_comment.html.erb this line inside comment_counter local variable given render @article.comments call, which will define automatically increment counter iterates through each comment. it's used this example display small number next each comment when it's created. that completes comment function blogging engine. it's time within application. using engine within application very easy. this section covers mount engine into application initial setup required, well linking engine user class provided application provide ownership articles comments within engine."},{"id":1298,"title":"Introdução às Engines","heading":"4 Hooking Into an Application","subheading":"4.1 Mounting the Engine","content":"first, engine needs specified inside application's gemfile. there isn't application handy test this generate using rails command outside engine directory like this: usually, specifying engine inside gemfile would done specifying normal, everyday gem. however, because developing blorgh engine your local machine, will need specify :path option your gemfile: then bundle install gem. described earlier, placing gemfile will loaded when rails loaded. will first require lib/blorgh.rb from engine, then lib/blorgh/engine.rb, which file that defines major pieces functionality engine. make engine's functionality accessible from within application, needs mounted that application's config/routes.rb file: this line will mount engine /blog application. making accessible http://localhost:3000/blog when application runs with bin/rails server."},{"id":1299,"title":"Introdução às Engines","heading":"4 Hooking Into an Application","subheading":"4.2 Engine Setup","content":"engine contains migrations blorgh_articles blorgh_comments table which need created application's database that engine's models query them correctly. copy these migrations into application following command from application's root: have multiple engines that need migrations copied over, railties:install:migrations instead: this command, when first time, will copy over migrations from engine. when next time, will only copy over migrations that haven't been copied over already. first this command will output something such this: first timestamp ([timestamp_1]) will current time, second timestamp ([timestamp_2]) will current time plus second. reason this that migrations engine after existing migrations application. these migrations within context application, simply bin/rails db:migrate. when accessing engine through http://localhost:3000/blog, articles will empty. this because table created inside application different from created within engine. ahead, play around with newly mounted engine. you'll find that it's same when only engine. would like migrations only from engine, specifying scope: this useful want revert engine's migrations before removing revert migrations from blorgh engine code such"},{"id":1300,"title":"Introdução às Engines","heading":"4 Hooking Into an Application","subheading":"4.3 Using a Class Provided by the Application","content":"when engine created, want specific classes from application provide links between pieces engine pieces application. case blorgh engine, making articles comments have authors would make sense. typical application might have user class that would used represent authors article comment. there could case where application calls this class something different, such person. this reason, engine should hardcode associations specifically user class. keep simple this case, application will have class called user that represents users application (we'll into making this configurable further on). generated using this command inside application: bin/rails db:migrate command needs here ensure that application users table future use. also, keep simple, articles form will have text field called author_name, where users elect their name. engine will then take this name either create user object from find that already that name. engine will then associate article with found created user object. first, author_name text field needs added app/views/blorgh/articles/_form.html.erb partial inside engine. this added above title field with this code: next, need update blorgh::articlescontroller#article_params method permit form parameter: blorgh::article model should then have some code convert author_name field into actual user object associate that article's author before article saved. will also need have attr_accessor this field, that setter getter methods defined this, you'll need attr_accessor author_name, association author before_validation call into app/models/blorgh/article.rb. author association will hard-coded user class time being. representing author association's object with user class, link established between engine application. there needs associating records blorgh_articles table with records users table. because association called author, there should author_id column added blorgh_articles table. generate this column, this command within engine: this migration will need application. that, must first copied using this command: notice that only migration copied over here. this because first migrations were copied over first time this command run. migration using: with pieces place, action will take place that will associate author represented record users table with article, represented blorgh_articles table from engine. finally, author's name should displayed article's page. this code above \"title\" output inside app/views/blorgh/articles/show.html.erb: because rails controllers generally share code things like authentication accessing session variables, they inherit from applicationcontroller default. rails engines, however scoped independently from main application, each engine gets scoped applicationcontroller. this namespace prevents code collisions, often engine controllers need access methods main application's applicationcontroller. easy provide this access change engine's scoped applicationcontroller inherit from main application's applicationcontroller. blorgh engine this would done changing app/controllers/blorgh/application_controller.rb look like: default, engine's controllers inherit from blorgh::applicationcontroller. after making this change they will have access main application's applicationcontroller, though they were part main application. this change does require that engine from rails application that applicationcontroller."},{"id":1301,"title":"Introdução às Engines","heading":"4 Hooking Into an Application","subheading":"4.4 Configuring an Engine","content":"this section covers make user class configurable, followed general configuration tips engine. next step make class that represents user application customizable engine. this because that class always user, previously explained. make this setting customizable, engine will have configuration setting called author_class that will used specify which class represents users inside application. define this configuration setting, should mattr_accessor inside blorgh module engine. this line lib/blorgh.rb inside engine: this method works like siblings, attr_accessor cattr_accessor, provides setter getter method module with specified name. must referenced using blorgh.author_class. next step switch blorgh::article model over this setting. change belongs_to association inside this model (app/models/blorgh/article.rb) this: set_author method blorgh::article model should also this class: save having call constantize author_class result time, could instead just override author_class getter method inside blorgh module lib/blorgh.rb file always call constantize saved value before returning result: this would then turn above code set_author into this: resulting something little shorter, more implicit behavior. author_class method should always return class object. since changed author_class method return class instead string, must also modify belongs_to definition blorgh::article model: this configuration setting within application, initializer should used. using initializer, configuration will before application starts calls engine's models, which depend this configuration setting existing. create initializer config/initializers/blorgh.rb inside application where blorgh engine installed this content ahead create article. will that works exactly same before, except this time engine using configuration setting config/initializers/blorgh.rb learn what class there strict dependencies what class only what class must engine simply requires this class define find_or_create_by method which returns object that class, associated with article when it's created. this object, course, should have some sort identifier which referenced. within engine, there come time where wish things such initializers, internationalization, other configuration options. great news that these things entirely possible, because rails engine shares much same functionality rails application. fact, rails application's functionality actually superset what provided engines! wish initializer code that should before engine loaded place config/initializers folder. this directory's functionality explained initializers section configuring guide, works precisely same config/initializers directory inside application. same thing goes want standard initializer. locales, simply place locale files config/locales directory, just like would application. when engine generated, there smaller dummy application created inside test/dummy. this application used mounting point engine, make testing engine extremely simple. extend this application generating controllers, models, views from within directory, then those test your engine. test directory should treated like typical rails testing environment, allowing unit, functional, integration tests."},{"id":1302,"title":"Introdução às Engines","heading":"5 Testing an Engine","subheading":"5.1 Functional Tests","content":"matter worth taking into consideration when writing functional tests that tests going running application test/dummy application rather than your engine. this setup testing environment; engine needs application host testing main functionality, especially controllers. this means that were make typical controller controller's functional test like this: function correctly. this because application doesn't know route these requests engine unless explicitly tell how. this, must @routes instance variable engine's route your setup code: this tells application that still want perform request index action this controller, want engine's route there, rather than application's one. this also ensures that engine's helpers will work expected your tests. this section explains and/or override engine functionality main rails application."},{"id":1303,"title":"Introdução às Engines","heading":"6 Improving Engine Functionality","subheading":"6.1 Overriding Models and Controllers","content":"engine models controllers reopened parent application extend decorate them. overrides organized dedicated directory app/overrides that preloaded to_prepare callback. zeitwerk mode you'd this: classic mode this: example, order override engine model just create file that reopens that class: very important that override reopens class module. using class module keywords would define them they were already memory, which would incorrect because definition lives engine. using class_eval shown above ensures reopening. using class#class_eval great simple adjustments, more complex class modifications, might want consider using activesupport::concern. activesupport::concern manages load order interlinked dependent modules classes time allowing significantly modularize your code. adding article#time_since_created overriding article#summary:"},{"id":1304,"title":"Introdução às Engines","heading":"6 Improving Engine Functionality","subheading":"6.2 Autoloading and Engines","content":"please check autoloading reloading constants guide more information about autoloading engines."},{"id":1305,"title":"Introdução às Engines","heading":"6 Improving Engine Functionality","subheading":"6.3 Overriding Views","content":"when rails looks view render, will first look app/views directory application. cannot find view there, will check app/views directories engines that have this directory. when application asked render view blorgh::articlescontroller's index action, will first look path app/views/blorgh/articles/index.html.erb within application. cannot find will look inside engine. override this view application simply creating file app/views/blorgh/articles/index.html.erb. then completely change what this view would normally output. this creating file app/views/blorgh/articles/index.html.erb this content"},{"id":1306,"title":"Introdução às Engines","heading":"6 Improving Engine Functionality","subheading":"6.4 Routes","content":"routes inside engine isolated from application default. this done isolate_namespace call inside engine class. this essentially means that application engines have identically named routes they will clash. routes inside engine drawn engine class within config/routes.rb, like this: having isolated routes such this, wish link area engine from within application, will need engine's routing proxy method. calls normal routing methods such articles_path going undesired locations both application engine have such helper defined. instance, following example would application's articles_path that template rendered from application, engine's articles_path rendered from engine: make this route always engine's articles_path routing helper method, must call method routing proxy method that shares same name engine. wish reference application inside engine similar way, main_app helper: were this inside engine, would always application's root. were leave main_app \"routing proxy\" method call, could potentially engine's application's root, depending where called from. template rendered from within engine attempts application's routing helper methods, result undefined method call. encounter such issue, ensure that you're attempting call application's routing methods without main_app prefix from within engine."},{"id":1307,"title":"Introdução às Engines","heading":"6 Improving Engine Functionality","subheading":"6.5 Assets","content":"assets within engine work identical full application. because engine class inherits from rails::engine, application will know look assets engine's app/assets lib/assets directories. like other components engine, assets should namespaced. this means that have asset called style.css, should placed app/assets/stylesheets/[engine name]/style.css, rather than app/assets/stylesheets/style.css. this asset isn't namespaced, there possibility that host application could have asset named identically, which case application's asset would take precedence engine's would ignored. imagine that have asset located app/assets/stylesheets/blorgh/style.css. include this asset inside application, just stylesheet_link_tag reference asset were inside engine: also specify these assets dependencies other assets using asset pipeline require statements processed files:"},{"id":1308,"title":"Introdução às Engines","heading":"6 Improving Engine Functionality","subheading":"6.6 Separate Assets and Precompiling","content":"there some situations where your engine's assets required host application. example, that you've created admin functionality that only exists your engine. this case, host application doesn't need require admin.css admin.js. only gem's admin layout needs these assets. doesn't make sense host include \"blorgh/admin.css\" stylesheets. this situation, should explicitly define these assets precompilation. this tells sprockets your engine assets when bin/rails assets:precompile triggered. define assets precompilation engine.rb: more information, read asset pipeline guide."},{"id":1309,"title":"Introdução às Engines","heading":"6 Improving Engine Functionality","subheading":"6.7 Other Gem Dependencies","content":"dependencies inside engine should specified inside .gemspec file root engine. reason that engine installed gem. dependencies were specified inside gemfile, these would recognized traditional install they would installed, causing engine malfunction. specify dependency that should installed with engine during traditional install, specify inside gem::specification block inside .gemspec file engine: specify dependency that should only installed development dependency application, specify like this: both kinds dependencies will installed when bundle install inside application. development dependencies will only used when development tests engine running. note that want immediately require dependencies when engine required, should require them before engine's initialization. example: rails code often referenced load application. rails responsible load order these frameworks, when load frameworks, such activerecord::base, prematurely violating implicit contract your application with rails. moreover, loading code such activerecord::base boot your application loading entire frameworks which slow down your boot time could cause conflicts with load order boot your application. load configuration hooks that allow hook into this initialization process without violating load contract with rails. this will also mitigate boot performance degradation avoid conflicts."},{"id":1310,"title":"Introdução às Engines","heading":"7 Load and Configuration Hooks","subheading":"7.1 Avoid loading Rails Frameworks","content":"since ruby dynamic language, some code will cause different rails frameworks load. take this snippet instance: this snippet means that when this file loaded, will encounter activerecord::base. this encounter causes ruby look definition that constant will require this causes entire active record framework loaded boot. activesupport.on_load mechanism that used defer loading code until actually needed. snippet above changed this snippet will only include myactiverecordhelper when activerecord::base loaded."},{"id":1311,"title":"Introdução às Engines","heading":"7 Load and Configuration Hooks","subheading":"7.2 When are Hooks called?","content":"rails framework these hooks called when specific library loaded. example, when actioncontroller::base loaded, :action_controller_base hook called. this means that activesupport.on_load calls with :action_controller_base hooks will called context actioncontroller::base (that means self will actioncontroller::base)."},{"id":1312,"title":"Introdução às Engines","heading":"7 Load and Configuration Hooks","subheading":"7.3 Modifying Code to use Load Hooks","content":"modifying code generally straightforward. have line code that refers rails framework such activerecord::base wrap that code load hook. modifying calls include becomes modifying calls prepend becomes modifying calls class methods becomes"},{"id":1313,"title":"Introdução às Engines","heading":"7 Load and Configuration Hooks","subheading":"7.4 Available Load Hooks","content":"these load hooks your code. hook into initialization process following classes available hook."},{"id":1314,"title":"Introdução às Engines","heading":"7 Load and Configuration Hooks","subheading":"7.5 Available Configuration Hooks","content":"configuration hooks hook into particular framework, instead they context entire application. configuration hooks called engine class. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1315,"title":"Active Record Encryption","heading":null,"subheading":null,"content":"active record supports application-level encryption. works declaring which attributes should encrypted seamlessly encrypting decrypting them when necessary. encryption layer sits between database application. application will access unencrypted data, database will store encrypted. active record encryption exists protect sensitive information your application. typical example personally identifiable information from users. would want application-level encryption already encrypting your database rest? immediate practical benefit, encrypting sensitive attributes adds additional security layer. example, attacker gained access your database, snapshot your application logs, they wouldn't able make sense encrypted information. additionally, encryption prevent developers from unintentionally exposing users' sensitive data application logs. more importantly, using active record encryption, define what constitutes sensitive information your application code level. active record encryption enables granular control data access your application services consuming data from your application. example, consider auditable rails consoles that protect encrypted data check built-in system filter controller params automatically."},{"id":1316,"title":"Active Record Encryption","heading":"2 Basic Usage","subheading":"2.1 Setup","content":"first, need some keys your rails credentials. bin/rails db:encryption:init generate random set:"},{"id":1317,"title":"Active Record Encryption","heading":"2 Basic Usage","subheading":"2.2 Declaration of Encrypted Attributes","content":"encryptable attributes defined model level. these regular active record attributes backed column with same name. library will transparently encrypt these attributes before saving them database will decrypt them upon retrieval: but, under hood, executed looks like this: because base encoding metadata stored with values, encryption requires extra space column. estimate worst-case overload around bytes when built-in envelope encryption provider used. this overload negligible medium large text columns, string columns bytes, should increase their limit accordingly (510 bytes recommended)."},{"id":1318,"title":"Active Record Encryption","heading":"2 Basic Usage","subheading":"2.3 Deterministic and Non-deterministic Encryption","content":"default, active record encryption uses non-deterministic approach encryption. non-deterministic, this context, means that encrypting same content with same password twice will result different ciphertexts. this approach improves security making crypto-analysis ciphertexts harder, querying database impossible. deterministic: option generate initialization vectors deterministic way, effectively enabling querying encrypted data. non-deterministic approach recommended unless need query data."},{"id":1319,"title":"Active Record Encryption","heading":"3 Features","subheading":"3.1 Action Text","content":"encrypt action text attributes passing encrypted: true their declaration."},{"id":1320,"title":"Active Record Encryption","heading":"3 Features","subheading":"3.2 Fixtures","content":"rails fixtures encrypted automatically adding this option your test.rb: when enabled, encryptable attributes will encrypted according encryption settings defined model. encrypt action text fixtures, should place them fixtures/action_text/encrypted_rich_texts.yml."},{"id":1321,"title":"Active Record Encryption","heading":"3 Features","subheading":"3.3 Supported Types","content":"active_record.encryption will serialize values using underlying type before encrypting them, they must serializable strings. structured types like serialized supported box. need support custom type, recommended using serialized attribute. declaration serialized attribute should before encryption declaration:"},{"id":1322,"title":"Active Record Encryption","heading":"3 Features","subheading":"3.4 Ignoring Case","content":"might need ignore casing when querying deterministically encrypted data. approaches make accomplishing this easier: :downcase option when declaring encrypted attribute downcase content before encryption occurs. when using :downcase, original case lost. some situations, might want ignore case only when querying while also storing original case. those situations, option :ignore_case. this requires column named original_<column_name> store content with case unchanged:"},{"id":1323,"title":"Active Record Encryption","heading":"3 Features","subheading":"3.5 Support for Unencrypted Data","content":"ease migrations unencrypted data, library includes option config.active_record.encryption.support_unencrypted_data. when true: this option meant used during transition periods while clear data encrypted data must coexist. both false default, which recommended goal application: errors will raised when working with unencrypted data."},{"id":1324,"title":"Active Record Encryption","heading":"3 Features","subheading":"3.6 Support for Previous Encryption Schemes","content":"changing encryption properties attributes break existing data. example, imagine want make deterministic attribute non-deterministic. just change declaration model, reading existing ciphertexts will fail because encryption method different now. support these situations, declare previous encryption schemes that will used scenarios: configure previous encryption schemes: previous encryption schemes adding them list properties using previous config property your application.rb: :previous when declaring attribute: when adding previous encryption schemes: typically, with deterministic encryption, want ciphertexts remain constant. change this behavior setting deterministic: fixed: false that case, will newest encryption scheme encrypting data."},{"id":1325,"title":"Active Record Encryption","heading":"3 Features","subheading":"3.7 Unique Constraints","content":"unique validations supported normally long extended queries enabled (config.active_record.encryption.extend_queries true). they will also work when combining encrypted unencrypted data,git when configuring previous encryption schemes. support unique indexes deterministically-encrypted columns, need ensure their ciphertext doesn't ever change. encourage this, deterministic attributes will always oldest available encryption scheme default when multiple encryption schemes configured. otherwise, it's your ensure encryption properties don't change these attributes, unique indexes won't work."},{"id":1326,"title":"Active Record Encryption","heading":"3 Features","subheading":"3.8 Filtering Params Named as Encrypted Columns","content":"default, encrypted columns configured automatically filtered rails logs. disable this behavior adding following your application.rb: case want exclude specific columns from this automatic filtering, them config.active_record.encryption.excluded_from_filter_parameters."},{"id":1327,"title":"Active Record Encryption","heading":"3 Features","subheading":"3.9 Encoding","content":"library will preserve encoding string values encrypted non-deterministically. because encoding stored along with encrypted payload, values encrypted deterministically will force utf-8 encoding default. therefore same value with different encoding will result different ciphertext when encrypted. usually want avoid this keep queries uniqueness constraints working, library will perform conversion automatically your behalf. configure desired default encoding deterministic encryption with: disable this behavior preserve encoding cases with: providers implement management strategies. configure providers globally, attribute basis."},{"id":1328,"title":"Active Record Encryption","heading":"4 Key Management","subheading":"4.1 Built-in Key Providers","content":"provider that will serve keys derived from provided passwords using pbkdf2. implements simple envelope encryption strategy: configure active record this provider adding this your application.rb: with other built-in providers, provide list primary keys active_record.encryption.primary_key implement key-rotation schemes."},{"id":1329,"title":"Active Record Encryption","heading":"4 Key Management","subheading":"4.2 Custom Key Providers","content":"more advanced key-management schemes, configure custom provider initializer: provider must implement this interface: both methods return activerecord::encryption::key objects: include arbitrary tags that will stored unencrypted with message. activerecord::encryption::message#headers examine those values when decrypting."},{"id":1330,"title":"Active Record Encryption","heading":"4 Key Management","subheading":"4.3 Model-specific Key Providers","content":"configure provider per-class basis with :key_provider option:"},{"id":1331,"title":"Active Record Encryption","heading":"4 Key Management","subheading":"4.4 Model-specific Keys","content":"configure given per-class basis with :key option: active record uses derive used encrypt decrypt data."},{"id":1332,"title":"Active Record Encryption","heading":"4 Key Management","subheading":"4.5 Rotating Keys","content":"active_record.encryption work with lists keys support implementing key-rotation schemes: this enables workflows which keep short list keys adding keys, re-encrypting content, deleting keys."},{"id":1333,"title":"Active Record Encryption","heading":"4 Key Management","subheading":"4.6 Storing Key References","content":"configure active_record.encryption.store_key_references make active_record.encryption store reference encryption encrypted message itself. doing makes more performant decryption because system locate keys directly instead trying lists keys. price storage: encrypted data will bigger."},{"id":1334,"title":"Active Record Encryption","heading":"5 API","subheading":"5.1 Basic API","content":"activerecord encryption meant used declaratively, offers advanced usage scenarios."},{"id":1335,"title":"Active Record Encryption","heading":"6 Configuration","subheading":"6.1 Configuration Options","content":"configure active record encryption options your application.rb (most common scenario) specific environment config file config/environments/<env name>.rb want them per-environment basis. config options namespaced active_record.encryption.config. example: available config options are:"},{"id":1336,"title":"Active Record Encryption","heading":"6 Configuration","subheading":"6.2 Encryption Contexts","content":"encryption context defines encryption components that used given moment. there default encryption context based your global configuration, configure custom context given attribute when running specific block code. main components encryption contexts are: global encryption context used default configured other configuration properties your application.rb environment config files. override encryption context params passing them attribute declaration: activerecord::encryption.with_encryption_context encryption context given block code: code without encryption: this means that reading encrypted text will return ciphertext, saved content will stored unencrypted. code without encryption prevent overwriting encrypted content: this handy want protect encrypted data while still running arbitrary code against (e.g. rails console). você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1337,"title":"Rails on Rack","heading":"1 Introduction to Rack","subheading":"1 Introduction to Rack","content":"rack provides minimal, modular, adaptable interface developing applications ruby. wrapping http requests responses simplest possible, unifies distills servers, frameworks, software between (the so-called middleware) into single method call. explaining rack works really scope this guide. case familiar with rack's basics, should check resources section below."},{"id":1338,"title":"Rails on Rack","heading":"2 Rails on Rack","subheading":"2.1 Rails Application's Rack Object","content":"rails.application primary rack application object rails application. rack compliant server should using rails.application object serve rails application."},{"id":1339,"title":"Rails on Rack","heading":"2 Rails on Rack","subheading":"2.2 bin/rails server","content":"bin/rails server does basic creating rack::server object starting server. here's bin/rails server creates instance rack::server rails::server inherits from rack::server calls rack::server#start method this way:"},{"id":1340,"title":"Rails on Rack","heading":"2 Rails on Rack","subheading":"2.3 rackup","content":"rackup instead rails' bin/rails server, following inside config.ru your rails application's root directory: start server: find more about different rackup options, run:"},{"id":1341,"title":"Rails on Rack","heading":"2 Rails on Rack","subheading":"2.4 Development and auto-reloading","content":"middlewares loaded once monitored changes. will have restart server changes reflected running application. many action dispatcher's internal components implemented rack middlewares. rails::application uses actiondispatch::middlewarestack combine various internal external middlewares form complete rails rack application."},{"id":1342,"title":"Rails on Rack","heading":"3 Action Dispatcher Middleware Stack","subheading":"3.1 Inspecting Middleware Stack","content":"rails handy command inspecting middleware stack use: freshly generated rails application, this might produce something like: default middlewares shown here (and some others) each summarized internal middlewares section, below."},{"id":1343,"title":"Rails on Rack","heading":"3 Action Dispatcher Middleware Stack","subheading":"3.2 Configuring Middleware Stack","content":"rails provides simple configuration interface config.middleware adding, removing, modifying middlewares middleware stack application.rb environment specific configuration file environments/<environment>.rb. middleware middleware stack using following methods: swap existing middleware middleware stack using config.middleware.swap. following lines your application configuration: inspect middleware stack, you'll find that rack::runtime part want remove session related middleware, following: remove browser related middleware, want error raised when delete non-existent item, delete! instead."},{"id":1344,"title":"Rails on Rack","heading":"3 Action Dispatcher Middleware Stack","subheading":"3.3 Internal Middleware Stack","content":"much action controller's functionality implemented middlewares. following list explains purpose each them: rack::sendfile actiondispatch::static rack::lock actiondispatch::executor activesupport::cache::strategy::localcache::middleware rack::runtime rack::methodoverride actiondispatch::requestid actiondispatch::remoteip sprockets::rails::quietassets rails::rack::logger actiondispatch::showexceptions actiondispatch::debugexceptions actiondispatch::actionableexceptions actiondispatch::reloader actiondispatch::callbacks activerecord::migration::checkpending actiondispatch::cookies actiondispatch::session::cookiestore actiondispatch::flash actiondispatch::contentsecuritypolicy::middleware rack::head rack::conditionalget rack::etag rack::tempfilereaper"},{"id":1345,"title":"Rails on Rack","heading":"4 Resources","subheading":"4.1 Learning Rack","content":""},{"id":1346,"title":"Rails on Rack","heading":"4 Resources","subheading":"4.2 Understanding Middlewares","content":"você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1347,"title":"Action View Form Helpers","heading":"1 Trabalhando com formulários básicos.","subheading":"1 Trabalhando com formulários básicos.","content":"principal auxiliar formulário (form helper) form_with. quando chamado nenhum argumento como este, criado formulário que, quando enviado, fará requisição http usando verbo post página atual. exemplo, supondo página atual seja inicial, html gerado terá seguinte aparência: note html contém elemento input tipo hidden. este input importante porque formulários podem enviados sucesso ele, exceto formulários método get. esse elemento oculto nome authenticity_token recurso segurança rails chamado proteção contra falsificação solicitação entre sites (cross-site request forgery protection), helpers formulário geram todos formulários (desde esse recurso segurança esteja ativado). você poderá mais sobre isso guia segurança aplicações rails."},{"id":1348,"title":"Action View Form Helpers","heading":"1 Trabalhando com formulários básicos.","subheading":"1.1 Formulário de pesquisa genérica","content":"formulários mais básicos você formulário pesquisa. este formulário contém: criar este formulário você usará form_with objeto contrução formulário método como exemplo abaixo: isso gerar seguinte html:"},{"id":1349,"title":"Action View Form Helpers","heading":"1 Trabalhando com formulários básicos.","subheading":"1.2 Helpers para gerar elementos de formulário","content":"objeto construtor formulário gerado pelo form_with fornece vários métodos auxiliares gerar elementos formulário, como campos texto, caixas seleção (checkboxes) botões rádio (radio buttons). primeiro parâmetro esses métodos sempre nome input. quando formulário enviado, nome será passado junto dados formulário será direcionado params controlador valor inserido pelo usuário esse campo. exemplo, formulário contiver form.text_field :query podendo obter valor deste campo controlador params[:query] nomear entradas, rails certas convenções possibilitam enviar parâmetros valores escalares, como matrizes hashes, também estarão acessíveis params. poderá lido mais sobre eles capítulo noções básicas sobre convenções nomenclatura parâmetros deste guia. detalhes como usar precisão esses auxiliares, consulte documentação api. caixas seleção controles formulário fornecem usuário conjunto opções podem ativados desativados pelo usuário. isso gera seguinte: primeiro parâmetro check_box, nome entrada. segundo parâmetro, valor entrada. este valor será incluído dados formulário está presente params) quando caixa seleção estiver marcada. botões opção embora semelhantes caixas seleção, controles especificam conjunto opções mutuamente exclusivos seja, usuário pode escolher apenas uma). resultado: assim como check_box, segundo parâmetro radio_button valor entrada. como esses dois botões compartilham mesmo nome (age), usuário poderá selecionar apenas deles, params[:age] receberá \"child\" \"adult\"."},{"id":1350,"title":"Action View Form Helpers","heading":"1 Trabalhando com formulários básicos.","subheading":"1.3 Outros auxiliares interessantes","content":"outros controles formulários valem pena falar áreas texto, campos ocultos, campos senha, campos número, campos data hora muitos outros: resultado: entradas ocultas exibidas usuário, retêm dados como qualquer entrada texto. valores dentro deles podem alterados javascript."},{"id":1351,"title":"Action View Form Helpers","heading":"2 Trabalhando com Objetos Model","subheading":"2.1 Vinculando um Formulário a um Objeto","content":"argumento :model form_with permite ligar objeto construtor formulário objeto model. isso significa escopo formulário será aquele objeto model campos formulário serão preenchidos valores desse objeto. exemplo, temos objeto model como @article: seguinte formulário: cria seguinte código: existem algumas coisas serem observadas aqui: você pode criar vinculação semelhante realmente criar <form> helper fields_for. isso útil editar objetos model adicionais mesmo formulário. exemplo, você model person vinculado model contactdetail, você pode criar formulário criar dois, assim: produz seguinte saída: objeto produzido fields_for construtor formulário igual produzido form_with."},{"id":1352,"title":"Action View Form Helpers","heading":"2 Trabalhando com Objetos Model","subheading":"2.2 Confiando na Identificação de Registro","content":"model article está disponível usuários aplicação, portanto seguindo melhores praticas desenvolvimento rails você deve declará-lo recurso (resource): lidar recursos restful, chamadas form_with ficam significativamente mais fáceis você contar identificação registros. resumindo, você pode apenas passar instância modelo fazer rails descubra nome modelo resto. ambos exemplos, estilo longo curto mesmo resultado: observe como chamada estilo abreviado form_with convenientemente mesma, independentemente registro novo existente. identificação registros inteligente suficiente descobrir registro novo, chamando record.persisted?. também seleciona caminho correto enviar nome base classe objeto. você tiver singular resource, precisará chamar resource resolve funcione form_with: você criou rotas namespaces, form_with abreviatura bacana isso também. aplicativo tiver namespace administrador, criar formulário submete articlescontroller dentro namespace administrador (submetendo admin_article_path(@article) caso atualização). você tiver vários níveis namespacing, sintaxe será semelhante: mais informações sobre sistema roteamento rails convenções associadas, consulte guia rotas rails fora dentro."},{"id":1353,"title":"Action View Form Helpers","heading":"2 Trabalhando com Objetos Model","subheading":"2.3 Como os formulários funcionam com os métodos PATCH, PUT, ou DELETE?","content":"framework rails incentiva design restful seus aplicativos, significa você fará muitas requisições \"patch\", \"put\", \"delete\" (além \"get\" \"post\"). entretanto, maioria navegadores suportam métodos diferentes \"get\" \"post\" quando trata envio formulários. rails contorna esse problema emulando outros métodos post entrada oculta \"_method\", definida refletir método desejado: resultado: analisar dados submetidos pelo post, rails levará consideração parâmetro especial _method agirá como método http fosse aquele especificado dentro dele (\"patch\" nesse exemplo). renderizar formulário, botões envio podem substituir atributo method declarado através palavra-chave formmethod:: semelhante elementos <form>, maioria navegadores suporta métodos substituição formulário declarados meio formmethod diferentes \"get\" \"post\". rails resolve esse problema emulando outros métodos post meio combinação atributos formmethod, value name: caixas seleção html requerem quantidade significativa marcação, elemento <option> cada opção escolha. então rails provê métodos auxiliares reduzir esse fardo. exemplo, digamos temos lista cidades usuário escolher. podemos usar auxiliar select assim: gera: também podemos designar valores <option> diferem seus rótulos: gera: desta forma, usuário verá nome completo cidade, params[: city] será tipos \"be\", \"chi\" \"md\". último, podemos especificar escolha padrão caixa seleção argumento :selected: gera:"},{"id":1354,"title":"Action View Form Helpers","heading":"3 Criando Caixas de Seleção (Select Boxes) com Facilidade","subheading":"3.1 Grupos de Opção","content":"alguns casos, podemos querer melhorar experiência usuário agrupando opções relacionadas. podemos fazer isso passando hash array compatível) select: gera:"},{"id":1355,"title":"Action View Form Helpers","heading":"3 Criando Caixas de Seleção (Select Boxes) com Facilidade","subheading":"3.2 Caixas de Seleção (Select Boxes) com Objetos Model","content":"como outros formulários, caixa seleção pode associada atributo model. exemplo, tivermos objeto model @person como: seguinte formulário: produz resultado semelhante observe opção apropriada marcada automaticamente como selected=\" selected\". visto esta caixa seleção estava ligada model, precisamos especificar argumento :selected!"},{"id":1356,"title":"Action View Form Helpers","heading":"3 Criando Caixas de Seleção (Select Boxes) com Facilidade","subheading":"3.3 Fuso horário e Seleção de País","content":"usar suporte fuso horário rails, você perguntar seus usuários fuso horário eles estão. fazer isso exigiria geração opções selecionadas lista objetos activesupport::timezone usando collection_select, você pode simplesmente usar helper time_zone_select resolve isto: rails tinha helper country_select escolher países, extraído plugin country_select. você deseja usar helpers formulário geram campos data hora html5, rails fornece helpers data hora alternativos renderizam formulários texto simples. esses helpers renderizam caixa seleção cada componente tempo (por exemplo, ano, mês, dia, etc.). exemplo, tivermos objeto model @person como: seguinte formulário: gerar algo como: observe que, quando formulário enviado, haverá único valor hash params contenha data completa. disso, haverá vários valores nomes especiais como \"birth_date(1i) active record sabe como reunir esses valores nomes especiais data hora completa, base tipo declarado atributo model. portanto, podemos passar params [:person] para, exemplo, person.new person#update exatamente como faríamos formulário usasse único campo representar data completa. além auxiliar date_select, rails provê auxiliares time_select datetime_select."},{"id":1357,"title":"Action View Form Helpers","heading":"4 Usando Form Helpers para Data e Hora","subheading":"4.1 Caixas de Seleção (Select Boxes) para Componentes Individuais de Tempo","content":"rails também fornece auxiliares renderizar caixas seleção componentes temporais individuais: select_year, select_month, select_day, select_hour, select_minute, select_second. esses auxiliares métodos \"básicos\", significa chamados instância construtor formulários. exemplo: cria caixa seleção como essa: cada desses auxiliares, você pode especificar objeto data hora número como valor padrão componente temporal apropriado será extraído usado. frequentemente desejamos gerar conjunto escolhas formulário partir coleção objetos. exemplo, quando queremos usuário escolha cidades partir nosso banco dados, temos modelo city conforme: rails oferece helpers geram escolhas partir coleção necessário iterar explicitamente sobre ela. esses helpers determinam valor texto descritivo cada escolha chamando métodos especificados cada objeto coleção."},{"id":1358,"title":"Action View Form Helpers","heading":"5 Escolhas a partir de uma Coleção de Objetos Arbitrários","subheading":"5.1 O auxiliar collection_select","content":"gerar caixa seleção (select box) nossas cidades, podemos utilizar collection_select: resultado:"},{"id":1359,"title":"Action View Form Helpers","heading":"5 Escolhas a partir de uma Coleção de Objetos Arbitrários","subheading":"5.2 O auxiliar collection_radio_buttons","content":"gerar conjunto botões rádio (radio buttons) nossas cidades, podemos utilizar collection_radio_buttons: resultado:"},{"id":1360,"title":"Action View Form Helpers","heading":"5 Escolhas a partir de uma Coleção de Objetos Arbitrários","subheading":"5.3 O auxiliar collection_check_boxes","content":"gerar conjunto check boxes nossas cidades (que permite usuários escolham mais opção), podemos utilizar collection_check_boxes: resultado: tarefa muito comum fazer envio arquivos, seja imagem pessoa arquivo contendo dados serem processados. campos upload arquivos podem renderizados auxiliar file_field. mais importante lembrar quando envio arquivos atributo enctype formulário renderizado deve \"multipart/form-data\". isso pode feito automaticamente você usar file_field dentro form_with. você pode definir atributo manualmente: observe que, acordo convenções form_with, nomes campos duas formas acima também serão diferentes. seja, nome campo primeiro formulário será person[picture] (acessível params[:person][:picture]), nome campo segundo formulário será apenas picture (acessível params[:picture])."},{"id":1361,"title":"Action View Form Helpers","heading":"6 Enviando Arquivos","subheading":"6.1 O que é enviado","content":"objeto params instância actiondispatch::http::uploadedfile. trecho código seguir salva arquivo enviado #{rails.root}/public/uploads contendo mesmo nome arquivo original. arquivo enviado, infinidade tarefas potencial, variando entre onde armazenar arquivos disco, amazon etc), associá-lo models, redimensionar arquivos imagem gerar miniaturas, etc. active storage destinado ajudar essas tarefas. objeto dado yield form_with fields_for instância actionview::helpers::formbuilder. construtores formulários encapsulam noção exibir elementos formulário único objeto. enquanto você pode escrever helpers seus formulários forma usual, você também pode criar subclasse actionview::helpers::formbuilder adicionar helpers exemplo, pode substituído meio definição classe labellingformbuilder parecida segue: você reutilizar isso frequentemente, você pode definir helper labeled_form_with automaticamente aplica opção builder: labellingformbuilder: construtor formulários utilizado também determina acontece quando você escreve: instância actionview::helpers::formbuilder, então isso renderizar partial form, passando objeto partial construtor formulários. construtor formulário classe labellingformbuilder então partial labelling_form seria renderizada. valores formulários podem ficar topo hash params aninhados outro hash. exemplo, numa ação create padrão model person, params[:person] normalmente seria hash todos atributos necessários criar pessoa. hash params também pode conter arrays, arrays hashes, vai. fundamentalmente formulários html conhecimento nenhum tipo dado estruturado, tudo eles geram pares nomes valores, onde pares strings simples. arrays hashes você aplicação resultado algumas convenções nomeação rails utiliza."},{"id":1362,"title":"Action View Form Helpers","heading":"8 Entendendo Convenções de Nomeação de Parâmetros","subheading":"8.1 Estruturas Básicas","content":"duas estruturas básicas arrays hashes. hashes copiam sintaxe utilizada acessar valor params. exemplo, formulário contém: hash params conterá params[:person][:name] buscará valor enviado dentro controller. hashes podem aninhados quantos níveis necessário, exemplo: resultará hash params como normalmente rails ignora nomes parâmetros duplicados. parâmetro name termina conjunto vazio colchetes então eles serão acumulados array. você queria usuários pudessem informar vários números telefone, você poderia colocar isto formulário: isto resultará params[:person][:phone_number] como array contendo números telefone informados."},{"id":1363,"title":"Action View Form Helpers","heading":"8 Entendendo Convenções de Nomeação de Parâmetros","subheading":"8.2 Combinando os Conceitos","content":"podemos combinar estes dois conceitos. elemento hash pode array como exemplo anterior, você pode array hashes. exemplo, formulário pode permitir criação número arbitrário addresses repetir fragmento formulário seguinte isto resultará params[:person][:addresses] como array hashes chaves line1, line2, city. porém, restrição. enquanto hashes podem aninhados forma arbitrária, permitido nível \"arrayness\". arrays normalmente podem trocados hashes; exemplo, invés usar array model objects, possível usar hash model objects distinguidos pelo índice array, algum outro parâmetro."},{"id":1364,"title":"Action View Form Helpers","heading":"8 Entendendo Convenções de Nomeação de Parâmetros","subheading":"8.3 Utilizando o auxiliar fields_for Helper","content":"digamos queremos renderizar formulário conjunto campos cada endereço pessoa. auxiliar fields_for argumento: index podem ajudar isso: você pode querer renderizar formulário conjunto campos edição cada address person. exemplo: presumindo pessoa (person) tenha dois endereços (addresses), isto trará resultado similar este: isto resultará hash params parecido rails sabe todos estes inputs devem parte hash person porque você chamou fields_for primeiro builder formulário. especificar opção :index você rails invés nomear inputs person[address][city] deve inserir aquele índice dentro entre address city. isso geralmente útil porque deixa mais fácil saber qual registro address deve modificado. você pode passar números algum outro significado, strings mesmo (que resultará array parâmetros sendo criado). criar aninhamentos mais complexos, você pode especificar primeira parte nome input (person[address] exemplo anterior) forma explícita: criará inputs como como regra geral nome final input concatenação nome passado fields_for/form_with, valor índice, nome atributo. você também pode passar opção :index diretamente helpers como text_field, normalmente menos repetitivo especificar isto dentro builder formulário invés especificar controles individuais input. como atalho você pode adicionar nome omitir opção :index. isto mesmo especificar index: address.id portanto produz exatamente mesmo resultado exemplo anterior. helpers formulários rails também podem usados construir formulários enviar dados recursos externos. entretanto alguns momentos pode necessário definir authenticity_token recurso; isso pode feito passando parâmetro authenticity_token: 'your_external_token' opções form_with vezes submeter dados recurso externo, como gateway pagamento, campos podem usado formulário limitados externa pode indesejável gerar authenticity_token. enviar token, simplesmente passe false parâmetro :authenticity_token: muitas aplicações além edição único objeto formulário simples. exemplo, quando estamos criando model person você pode querer usuário permita mesmo formulário) criar múltiplos registros endereços (casa, trabalho, etc.). mais tarde, quando estivesse editando este formulário, seria possível adicionar, remover, corrigir endereços relacionados caso fosse necessário."},{"id":1365,"title":"Action View Form Helpers","heading":"10 Trabalhando com Formulários Complexos","subheading":"10.1 Configurando o Model","content":"active record fornece suporte níveis modelo através método accepts_nested_attributes_for: isso criará método chamado addresses_attributes= model person permitir criar, atualizar (opcionalmente) destruir endereços."},{"id":1366,"title":"Action View Form Helpers","heading":"10 Trabalhando com Formulários Complexos","subheading":"10.2 Formulários Aninhados","content":"formulário seguir permite usuário criar pessoa seus endereços associados. quando associação aceita atributos aninhados, método fields_for renderiza esse bloco cada elemento associação. particular, pessoa tiver endereços nada será renderizado. padrão comum controller criar mais filhos vazios pelo menos bloco campos seja exibido usuário. exemplo seguir resultar dois blocos campos endereços formulário nova pessoa. métodofields_for produz construtor formulário. nomes parâmetros serão accepts_nested_attributes_for espera. exemplo, quando criamos pessoa dois endereços, parâmetros enviados serão: chaves hash :addresses_attributes importantes, eles apenas precisam diferentes cada endereço. objeto associado estiver salvo, método fields_for gerá automaticamente entrada oculta registro salvo. você pode desabilitar isso passando include_id: false fields_for."},{"id":1367,"title":"Action View Form Helpers","heading":"10 Trabalhando com Formulários Complexos","subheading":"10.3 O Controller","content":"como costume, você precisa declarar parâmetros permitidos dentro controller antes enviá-los model:"},{"id":1368,"title":"Action View Form Helpers","heading":"10 Trabalhando com Formulários Complexos","subheading":"10.4 Removendo objetos","content":"você pode permitir usuários deletarem objetos associados passar parâmetro allow_destroy: true accepts_nested_attributes_for hash atributos objeto contém chave _destroy valor representa true (ex: '1', true 'true'), então objeto será destruído. formulário seguir permite usuário remover endereços: esqueça atualizar lista parâmetros permitidos controller incluir também campo _destroy:"},{"id":1369,"title":"Action View Form Helpers","heading":"10 Trabalhando com Formulários Complexos","subheading":"10.5 Prevenindo Registros Vazios","content":"pode útil ignorar conjunto campos usuário preencheu. você pode controlar isso passar proc :reject_if accepts_nested_attributes_for. essa proc será chamada cada hash atributos enviados pelo formulário. proc retornar true então active record construir objeto associado essa hash. exemplo abaixo tenta construir endereço apenas campo kind informado. facilitar, você pode passar symbol :all_blank lugar, criar proc rejeitar registros onde todos atributos vazios, excluindo qualquer valor _destroy."},{"id":1370,"title":"Action View Form Helpers","heading":"10 Trabalhando com Formulários Complexos","subheading":"10.6 Adicionando campos dinamicamente","content":"lugar renderizar múltiplos blocos campos antecipadamente, você pode desejar adicioná-los apenas quando usuário clicar botão \"adicionar novo endereço\". rails possui nenhum suporte nativo isso. quando geramos novo bloco campos, devemos garantir chave array associado único utilizar data atual javascript milissegundos unix, bastante comum. caso você precise renderizar campos formulário fora contexto construtor formulário, rails oferece tags auxiliares elementos comuns formulário. exemplo, check_box_tag: resultado: geralmente, esses helpers mesmo nome helpers construtor formulários, porém adicionando sufixo _tag. lista completa, consulte documentação formtaghelper. antes form_with introduzido rails funcionalidade costumava divida entre form_tag form_for. ambos estão agora depreciados (soft-deprecated). documentação sobre pode encontrada versão antiga deste guia. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1371,"title":"Active Storage Overview","heading":"1 O que é Active Storage?","subheading":"1 O que é Active Storage?","content":"active storage facilita upload arquivos serviço armazenamento como amazon google cloud storage, microsoft azure storage anexa esses arquivos objetos active record. serviço local baseado disco desenvolvimento teste oferece suporte espelhamento arquivos serviços destinados backups migrations. usando active storage, aplicação pode transformar uploads imagens gerar representações uploads imagens, como pdfs vídeos, extrair metadados arquivos arbitrários."},{"id":1372,"title":"Active Storage Overview","heading":"1 O que é Active Storage?","subheading":"1.1 Requirements","content":"vários recursos active storage dependem softwares terceiros rails instala deve instalado separadamente: análise transformações imagem também requerem image_processing. descomente-a gemfile adicione-a necessário: active storage três tabelas banco dados aplicação chamadas active_storage_blobs, active_storage_variant_records active_storage_attachments. depois criar nova aplicação atualizar aplicação rails 5.2), execute bin/rails active_storage:install gerar migration cria essas tabelas. bin/rails db:migrate executar migration. declare serviços active storage config/storage.yml. cada serviço aplicação usa, forneça nome configuração necessária. exemplo abaixo declara três serviços chamados local, test amazon: tell active storage which service setting rails.application.config.active_storage.service. because each environment will likely different service, recommended this per-environment basis. disk service from previous example development environment, would following config/environments/development.rb: usar serviço produção, você adiciona seguinte config/environments/production.rb: usar serviço test durante teste, você adiciona seguinte config/environments/test.rb: continue lendo obter mais informações sobre adaptadores serviço integrados (por exemplo, disk configurações exigem. recomendado usar rails.env nomes buckets reduzir ainda mais risco destruição acidental dados produção."},{"id":1373,"title":"Active Storage Overview","heading":"2 Configuração","subheading":"2.1 Serviço Disk","content":"declare serviço disk config/storage.yml:"},{"id":1374,"title":"Active Storage Overview","heading":"2 Configuração","subheading":"2.2 Serviço S3 (Amazon S3 e APIs compatíveis com S3)","content":"conectar amazon declare serviço config/storage.yml: opcionalmente, você pode fornecer opções cliente upload: adicione aws-sdk-s3 gemfile: conectar armazenamento objetos compatíveis como digitalocean spaces, forneça endpoint: existem muitas outras opções disponíveis. você pode verificá-los documentação client."},{"id":1375,"title":"Active Storage Overview","heading":"2 Configuração","subheading":"2.3 Serviço Armazenamento da Microsoft Azure","content":"declare serviço azure storage config/storage.yml: adicione azure-storage-blob gemfile:"},{"id":1376,"title":"Active Storage Overview","heading":"2 Configuração","subheading":"2.4 Serviço Google Cloud Storage","content":"declare serviço google cloud storage service config/storage.yml: opcionalmente forneça hash credenciais caminho arquivo chave: opcionalmente, forneça metadados cache-control serem definidos recursos enviados: opcionalmente, credentials assinar urls. isso útil você estiver autenticando suas aplicações workload identity. consulte esta postagem blog google cloud obter mais informações. opcionalmente, específico assinar urls. usar iam, servidor metadados será contatado obter e-mail gsa, esse servidor metadados sempre está presente (por exemplo, ambientes locais testes) você pode querer usar padrão. adicione google-cloud-storage gemfile:"},{"id":1377,"title":"Active Storage Overview","heading":"2 Configuração","subheading":"2.5 Serviço Espelho","content":"você pode manter múltiplos serviços sincronizados definindo serviço espelho. quando arquivo carregado deletado, isso feito todos serviços espelhados. serviços espelhados podem usados facilitar migração entre serviços produção. você pode começar espelhar novo serviço, copiar arquivos existentes antigo serviço novo, então muda novo serviço. defina cada serviços você gostaria usar conforme descrito acima faça referência serviço espelhado. embora todos serviços secundários recebam uploads, downloads sempre tratados pelo serviço principal. serviços espelho compatíveis uploads diretos. novos arquivos diretamente carregados serviço principal. quando arquivo enviado anexado registro, segundo plano enfileirado copiá-lo serviços secundários."},{"id":1378,"title":"Active Storage Overview","heading":"2 Configuração","subheading":"2.6 Acesso público","content":"padrão, active storage assume acesso privado serviços. isso significa gerar urls assinadas único blobs. você preferir tornar blobs acessíveis publicamente, especifique public: true config/storage.yml aplicação: tenha certeza seus buckets estão configurados acesso público. veja documentação sobre como ativar permissão leitura pública serviços amazon google cloud storage, microsoft azure. amazon requer também você tenha permissão `s3:putobjectacl. converter aplicação existente usar public: true, certifique-se atualizar cada arquivo individual bucket lido publicamente antes alternar."},{"id":1379,"title":"Active Storage Overview","heading":"3 Anexar Arquivos a Registros","subheading":"3.1 has_one_attached","content":"macro has_one_attached configura mapeamento um-para-um entre registros arquivos. cada registro pode arquivo anexado ele. exemplo, imagine aplicação tenha model user. você quiser cada usuário tenha avatar, defina model user seguinte forma: você estiver usando rails 6.0+, você pode executar comando gerador model como este: você pode criar usuário avatar: chamar avatar.attach anexar avatar usuário existente: chamar avatar.attached? determinar usuário particular avatar: alguns casos, você pode querer substituir serviço padrão anexo específico. você pode configurar serviços específicos anexo usando opção service: você pode configurar variantes específicas objeto carregado chamando método variant objeto gerado: chame avatar.variant(:thumb) obter variante thumb avatar:"},{"id":1380,"title":"Active Storage Overview","heading":"3 Anexar Arquivos a Registros","subheading":"3.2 has_many_attached","content":"macro has_many_attached configura relacionamento um-para-muitos entre registros arquivos. cada registro pode muitos arquivos anexados ele. exemplo, imagine aplicação model message. você quiser cada mensagem tenha muitas imagens, defina model message seguinte forma: você estiver usando rails 6.0+, você pode executar comando gerador model como este: você pode criar mensagem images: chamar images.attach adicionar novas imagens mensagem existente: chamar images.attached? determinar mensagem particular alguma imagem: substituir serviço padrão feito mesma maneira has_one_attached, usando opção service: configuração variantes específicas feita mesma forma has_one_attached, chamando método variant objeto gerado:"},{"id":1381,"title":"Active Storage Overview","heading":"3 Anexar Arquivos a Registros","subheading":"3.3 Anexando Objetos File/IO","content":"vezes você precisa anexar arquivo chega meio requisição http. exemplo, você pode querer anexar arquivo você gerou disco baixou enviada pelo usuário. você também pode querer anexar arquivo fixação model test. fazer isso, forneça hash contendo pelo menos objeto open filename: quando possível, forneça tipo conteúdo também. active storage tenta determinar tipo conteúdo arquivo partir seus dados. depende tipo conteúdo você fornece possível. você pode ignorar inferência tipo conteúdo partir dados passando identify: false junto content_type. você fornecer tipo conteúdo active storage puder determinar tipo conteúdo arquivo automaticamente, padrão application/octet-stream. remover arquivo anexado model, método purge anexo. aplicação está configurada usar active job, remoção pode feita maneira assíncrona chamando purge_later. purge remove blob arquivo versão binaria salvo banco dados) arquivo serviço armazenamento. active storage supports ways serve files: redirecting proxying."},{"id":1382,"title":"Active Storage Overview","heading":"5 Serving Files","subheading":"5.1 Redirect mode","content":"generate permanent blob, pass blob url_for view helper. this generates with blob's signed_id that routed blob's redirectcontroller redirectcontroller redirects actual service endpoint. this indirection decouples service from actual one, allows, example, mirroring attachments different services high-availability. redirection http expiration minutes. create download link, rails_blob_{path|url} helper. using this helper allows disposition. need create link from outside controller/view context (background jobs, cronjobs, etc.), access rails_blob_path like this:"},{"id":1383,"title":"Active Storage Overview","heading":"5 Serving Files","subheading":"5.2 Proxy mode","content":"optionally, files proxied instead. this means that your application servers will download file data from storage service response requests. this useful serving files from cdn. configure active storage proxying default: want explicitly proxy specific attachments there helpers form rails_storage_proxy_path rails_storage_proxy_url. additionally, order active storage attachments, will need generate urls with proxy mode that they served your will cache attachment without extra configuration. this works because default active storage proxy controller sets http header indicating cache response. should also make sure that generated urls host instead your host. there multiple ways achieve this, general involves tweaking your config/routes.rb file that generate proper urls attachments their variations. example, could this: then generate routes like this:"},{"id":1384,"title":"Active Storage Overview","heading":"5 Serving Files","subheading":"5.3 Authenticated Controllers","content":"active storage controllers publicly accessible default. generated urls plain signed_id, making them hard guess permanent. anyone that knows blob will able access even before_action your applicationcontroller would otherwise require login. your files require higher level protection, implement your authenticated controllers, based activestorage::blobs::redirectcontroller, activestorage::blobs::proxycontroller, activestorage::representations::redirectcontroller activestorage::representations::proxycontroller only allow account access their logo could following: then might want disable active storage default routes with: prevent files being accessed with publicly accessible urls. algumas vezes você precisar processar blob depois dele sido uploaded (transferir arquivo maquina cliente servidor aplicação) para, exemplo, converte-lo formato diferente. download conteúdo binário blob memória: caso deseje baixar blob arquivo disco programa externo antivírus, exemplo) possa operar nele. método open baixar blob arquivo temporário disco: importante saber arquivo ainda está disponível callback after_create, apenas after_create_commit. active storage analyzes files once they've been uploaded queuing active job. analyzed files will store additional information metadata hash, including analyzed: true. check whether blob been analyzed calling analyzed? image analysis provides width height attributes. video analysis provides these, well duration, angle, display_aspect_ratio, video audio booleans indicate presence those channels. audio analysis provides duration bit_rate attributes. active storage supports representing variety files. call representation attachment display image variant, preview video pdf. before calling representation, check attachment represented calling representable?. some file formats can't previewed active storage (e.g. word documents); representable? returns false want link file instead. internally, representation calls variant images, preview previewable files. also call these methods directly."},{"id":1385,"title":"Active Storage Overview","heading":"8 Displaying Images, Videos, and PDFs","subheading":"8.1 Lazy vs Immediate Loading","content":"default, active storage will process representations lazily. this code: will generate <img> with pointing activestorage::representations::redirectcontroller. browser will make request that controller, which will return redirect file remote service proxy mode, return file contents). loading file lazily allows features like single urls work without slowing down your initial page loads. this works fine most cases. want generate urls images immediately, call .processed.url: active storage variant tracker improves performance this, storing record database requested representation been processed before. thus, above code will only make call remote service (e.g. once, once variant stored, will that. variant tracker runs automatically, disabled through config.active_storage.track_variants. you're rendering lots images page, above example could result queries loading variant records. avoid these queries, named scopes activestorage::attachment."},{"id":1386,"title":"Active Storage Overview","heading":"8 Displaying Images, Videos, and PDFs","subheading":"8.2 Transforming Images","content":"transforming images allows display image your choice dimensions. create variation image, call variant attachment. pass transformation supported variant processor method. when browser hits variant url, active storage will lazily transform original blob into specified format redirect service location. variant requested, active storage will automatically apply transformations depending image's format: default processor active storage minimagick, also vips. switch vips, following config/application.rb: processors fully compatible, when migrating existing application using minimagick vips, some changes have made using options that format specific:"},{"id":1387,"title":"Active Storage Overview","heading":"8 Displaying Images, Videos, and PDFs","subheading":"8.3 Pré-visualização de arquivos","content":"alguns arquivos imagens podem pré-visualizados: isto eles podem apresentados como imagens. exemplo, arquivo vídeo pode pré-visualizado através extração primeiro frame. active storage padrão oferece suporte pré-visualização vídeos documentos pdf. criar link gerar preview método preview: adicionar suporte outros formatos, adicione próprio visualizador. veja documentação activestorage::preview mais informações. active storage biblioteca javascript incluída suporta uploads direto cliente (front-end) nuvem."},{"id":1388,"title":"Active Storage Overview","heading":"9 Uploads Diretos","subheading":"9.1 Uso","content":""},{"id":1389,"title":"Active Storage Overview","heading":"9 Uploads Diretos","subheading":"9.2 Configuração do Cross-Origin Resource Sharing (CORS)","content":"upload direto partir terceiros funcione você precisar configurar serviço nuvem aceitar requisições múltiplas origens. consulte documentação sobre cors serviço: tome cuidado permitir: você utilizar disco como armazenamento compartilhar mesma origem aplicação necessário configurar cors."},{"id":1390,"title":"Active Storage Overview","heading":"9 Uploads Diretos","subheading":"9.3 Eventos de upload do JavaScript","content":""},{"id":1391,"title":"Active Storage Overview","heading":"9 Uploads Diretos","subheading":"9.4 Exemplo","content":"você pode usar esses eventos exibir progresso upload.  mostrar arquivos enviados formulário: adicionar estilos:"},{"id":1392,"title":"Active Storage Overview","heading":"9 Uploads Diretos","subheading":"9.5 Integrando com Bibliotecas ou Frameworks","content":"você quer utilizar funcionalidade upload direto partir framework javascript, você quiser integrar funcionalidade drag drop (arrastar soltar), você poderá utilizar classe directupload fazer integração. receber arquivo biblioteca escolha, instancie directupload chame método criação. método criação recebe callback executada quando upload concluído. você precisa acompanhar progresso upload arquivo, você pode passar quinto parâmetro construtor directupload. durante upload, directupload chamar método directuploadwillstorefilewithxhr objeto. você poderá então vincular manipulador progresso xhr. nota: uploads diretos vezes pode resultar arquivo carregado, nunca anexado registro. considere limpar uploads anexados. fixture_file_upload testar upload arquivo teste integração controller. rails lida arquivos como qualquer outro parâmetro."},{"id":1393,"title":"Active Storage Overview","heading":"10 Testando","subheading":"10.1 Descartando arquivos criados durante os testes","content":"testes sistema limpam dados testes revertendo transação. como destroy nunca chamado objeto, arquivos anexados nunca limpos. quiser limpar arquivos, podemos usar callback after_teardown. fazendo isso garantimos todas conexões criadas durante teste sejam concluídas recebamos erro active storage informando possível encontrar arquivo. você estiver usando [testes paralelos][] diskservice, você deve configurar cada processo usar própria pasta active storage. dessa forma, retorno chamada teardown excluirá arquivos processo teste relevante. testes sistema verificarem exclusão model anexos estivermos usando active job, configure ambiente testes usar adaptador fila trabalho limpeza seja executado imediatamente, momento desconhecido futuro. similar testes sistema, arquivos enviados durante testes integração serão automaticamente descartados. você deseja limpar esses arquivos, você pode fazer isso usando callback teardown. você estiver usando [testes paralelos][] serviço disco, deverá configurar cada processo usar própria pasta active storage. dessa forma, retorno chamada teardown excluirá arquivos processo teste relevante."},{"id":1394,"title":"Active Storage Overview","heading":"10 Testando","subheading":"10.2 Adicionando arquivos em fixtures","content":"você pode adicionar anexos suas fixtures. primeiro, você desejará criar serviço armazenamento separado: isso informa active storage onde \"carregar\" arquivos fixture, então deve diretório temporário. fazê-lo diretório diferente serviço test regular, você pode separar arquivos fixtures arquivos carregados durante teste. seguida, crie arquivos fixture classes active storage: seguida, coloque arquivo diretório fixtures caminho padrão test/fixtures/files) nome arquivo correspondente. veja documentação activestorage::fixtureset mais informações. depois tudo estiver configurado, você poderá acessar anexos seus testes: enquanto arquivos enviados testes limpos final cada teste, você precisa limpar arquivos fixtures vez: quando todos seus testes forem concluídos. você estiver usando testes paralelos, chame parallelize_teardown: você estiver executando testes paralelos, minitest.after_run equivalente teste framework (por exemplo, after(:suite) rspec): necessário suporte algum outro serviço cloud além desses, você precisa implementá-lo. cada serviço estende activestorage::service implementando métodos necessários fazer upload download arquivos nuvem. there cases where file uploaded never attached record. this happen when using direct uploads. query unattached records using unattached scope. below example using custom rake task. você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."},{"id":1395,"title":"Trabalhando com JavaScript no Rails","heading":"1 Uma introdução ao Ajax","subheading":"1 Uma introdução ao Ajax","content":"entender ajax, você precisa entender primeiro navegador normalmente. quando você digita http://localhost:3000 barra endereço navegador clica enter, navegador (seu 'cliente') requisição servidor. analisa resposta, traz todos assets associados, como arquivos javascript, stylesheets imagens. então monta página. você clica link, repete mesmo processo: encontra página, encontra assets, coloca eles juntos mostra resultado. isso chamado 'ciclo requisição resposta'. javascript também pode fazer requisições servidor, analisar resposta. também habilidade atualizar informações página. combinando esses dois poderes, javascript permite página atualize partes próprio conteúdo, precisar pegar página inteira servidor. essa técnica poderosa chamamos ajax. como exemplo, aqui está código javascript requisição ajax: este código pega dados \"/test\", então anexa resultado elemento results. rails fornece muito suporte interno criação páginas essa técnica. você raramente terá escrever esse código. resto deste guia mostrar como rails pode ajudar escrever páginas desse modo, tudo isso feito partir dessa técnica muito simples. rails técnica chamada \"javascript discreto (unobtrusive)\" lidar junção javascript dom. essa costuma considerada melhor prática entre comunidade frontend, você pode ocasionalmente tutoriais demonstram outras formas. aqui está modo mais simples escrever javascript. você pode sendo referido como 'inline javascript': clicar link, ficará vermelho. aqui está problema: acontece quando queremos mais javascript seja executado clique? estranho, certo? poderíamos retirar definição função manipulador cliques, transformar função: então nossa página: esse pouco melhor, múltiplos links mesmo efeito? muito dry, ahn? podemos corrigir usando eventos. vamos adicionar atributo data-* nossos links, então vincular manipulador evento clique cada link tenha esse atributo: chamamos isso javascript 'discreto (unobtrusive)' porque estamos mais misturando nosso javascript dentro html. estamos separando propriamente nossos interesses, facilitando mudanças futuras. podemos facilmente adicionar comportamentos qualquer link adicionando atributo data. podemos rodar todo nosso javascript através minimizador concatenador. podemos entregar todo nosso pacote javascript cada página, significa terá baixado quando primeira página carregar então será salvo memória cache (cached) todas páginas depois disso. muitos pequenos benefícios realmente somam."},{"id":1396,"title":"Trabalhando com JavaScript no Rails","heading":"3 Helpers Internos","subheading":"3.1 Elementos Remotos","content":"rails fornece grupo métodos view helper escritos ruby ajudar você criação html. vezes, você quer adicionar pouco ajax esses elementos, rails cobertura nesses casos. causa javascript obtrusivo (unobtrusive), \"ajax helpers\" rails estão atualmente duas partes: metade javascript metade rails. você desabilite asset pipeline, rails-ujs fornece metade javascript, view helpers regulares ruby adicionam tags apropriadas dom. você pode abaixo sobre diferença eventos disparados lidando elementos remotos dentro aplicação. form_with helper auxilia escrita formulários. usar ajax formulários você pode passar opção :local form_with. isso gerar seguinte html: veja data-remote=\"true\". agora, formulário será enviado ajax invés mecanismo normal envio browser. você provavelmente quer ficar sentado <form> preenchido, entretanto. você provavelmente quer algo aconteça após envio bem-sucedido. fazer isso, vincule evento ajax:success. caso falha, ajax:error. confira: obviamente, você querer pouco mais sofisticado isso, começo. link_to helper ajuda geração links. opção :remote você pode usar assim: gera você pode vincular mesmos eventos ajax form_with. aqui está exemplo. vamos assumir temos lista artigos podem deletadas apenas clique. iríamos gerar html como este: escrever pouco javascript como este: button_to helper ajuda você criar botões. opção :remote você pode chamar assim: isso gera apenas <form>, todas informações form_with também aplicam."},{"id":1397,"title":"Trabalhando com JavaScript no Rails","heading":"3 Helpers Internos","subheading":"3.2 Personalize Elementos Remotos","content":"possível personalizar comportamento elementos atributo data-remote escrever linha javascript. você pode especificar extras atributos data- fazer isso. ativando hyperlinks sempre resultam requisição http get. seja como for, aplicação restful, alguns links verdade ações mudam dados servidor, devem executados requisições diferentes get. esse atributo permite mudar tais links método explícito tais como \"post\", \"put\" \"delete\". modo como isso funciona que, quando link ativado, constrói formulário escondido documento atributo \"action\" correspondendo valor \"href\" link, método corresponde valor data-method, envia esse formulário. certos elementos página estão atualmente referenciando alguma url, você pode querer eles acionem chamadas ajax. especificando atributo data-url juntamente data-remote disparar chamada ajax dada. você pode também especificar parâmetros extras através atributo data-params. isso pode útil disparar ação check-boxes exemplo: também possível definir ajax datatype explicitamente enquanto desempenha requisições elementos data-remote, meio atributo data-type"},{"id":1398,"title":"Trabalhando com JavaScript no Rails","heading":"3 Helpers Internos","subheading":"3.3 Confirmations","content":"você pode pedir confirmação extra usuário adicionando atributo data-confirm links formulários. usuário verá caixa diálogo confirm() javascript contendo texto atributo. usuário escolher cancelar, ação acontece. adicionando esse atributo links, será disparado mensagem clique, adicionando formulários, será disparado submit. exemplo: isso gera: atributo também está disponível botão submit formulário. isso permite você customizar mensagem aviso dependendo botão ativado. nesse caso, você deve data-confirm formulário"},{"id":1399,"title":"Trabalhando com JavaScript no Rails","heading":"3 Helpers Internos","subheading":"3.4 Desativando Automaticamente","content":"também possível desabilitar automaticamente input enquanto formulário está sendo enviado usando atributo data-disable-with. isso evita acidentes duplo cliques usuário, qual resultaria dupla requisição http backend pode detectar como tal. valor atributo texto tornará novo valor botão quando está estado desabilitado. isso também funciona links atributo data-method. exemplo: isso gera formulário com:"},{"id":1400,"title":"Trabalhando com JavaScript no Rails","heading":"3 Helpers Internos","subheading":"3.5 Manipuladores de eventos Rails-ujs","content":"rails introduziu rails-ujs removeram jquery como dependência. como resultado javascript discreto (unobtrusive (ujs)) reescrito operar jquery. estas introduções causam pequenas mudanças eventos personalizados executados durante requisição: exemplo uso:"},{"id":1401,"title":"Trabalhando com JavaScript no Rails","heading":"3 Helpers Internos","subheading":"3.6 Eventos Paravéis","content":"você pode parar execução requisição ajax executando event.preventdefault() partir métodos ajax:before ajax:beforesend. evento ajax:before pode manipular dados formulário antes serialização evento ajax:beforesend útil adicionar headers personalizados. você parar evento ajax:aborted:file, comportamento padrão permitir navegador envie formulário meios normais (i.e. requisição ajax) será cancelada, formulário será enviado nenhuma forma. isso útil implementar próprio ambiente upload arquivos ajax. observação, você deveria usar return false prevenir evento jquery-ujs event.preventdefault() rails-ujs. ajax lado cliente, você também precisa trabalhar lado servidor oferecer suporte, geralmente, pessoas gostam suas requisições retornem json mais html. vamos discutir preciso fazer isso acontecer."},{"id":1402,"title":"Trabalhando com JavaScript no Rails","heading":"4 Preocupações Do Lado Do Servidor","subheading":"4.1 Um Exemplo Simples","content":"imagine você tenha série usuários você gostaria mostrar fornecer formulário nessa mesma página criar novo usuário. ação index controller parece isso: view index (app/views/users/index.html.erb) contém: partial app/views/users/_user.html.erb contém seguinte: parte cima página index mostra usuários. parte baixo fornece formulário criar novo usuário. formulário baixo chamará ação create userscontroller. causa opção remote definida como true, requisição será enviada userscontroller como requisição ajax, procurando javascript. afim atender requisição, ação create controller ficaria assim: observe format.js bloco respond_to: permite controller responder requisição ajax. então você correspondente arquivo view app/views/users/create.js.erb gera atual código javascript será enviado executado lado cliente. rails biblioteca turbolinks, utiliza ajax acelerar renderização maioria aplicações."},{"id":1403,"title":"Trabalhando com JavaScript no Rails","heading":"5 Turbolinks","subheading":"5.1 Como o Turbolinks Funciona","content":"turbolinks anexa manipulador cliques todas tags página. navegador tiver suporte pushstate, turbolinks fará requisição página, analisará resposta, trocará <body> inteiro página <body> resposta. então usará pushstate mudar correta, preservando semântica atualização retornando urls bonitas. você quiser desabilitar turbolinks certos links, adicione atributo data-turbolinks=\"false\" tag:"},{"id":1404,"title":"Trabalhando com JavaScript no Rails","heading":"5 Turbolinks","subheading":"5.2 Eventos de Mudança de Página","content":"muitas vezes você querer fazer algum tipo mudança carregamento página. usando dom, você escreveria algo assim: contudo, como turbolinks sobreescreve processo padrão carregamento página, evento qual depende será disparado. você código parece isso, você deve mudar código fazer isso lugar: mais detalhes, incluindo outros eventos você pode disparar, veja readme turbolinks usar outra biblioteca fazer chamadas ajax, necessário adicionar token segurança como header padrão chamadas ajax biblioteca. pegar token: você pode então enviar esse token como x-csrf-token header requisições ajax. você precisa adicionar token csrf requisições get, apenas requisições \"não get\". você pode mais sobre falsa requisição entre sites (csrf) guia segurança. aqui estão alguns links úteis ajudar aprender mais: você incentivado ajudar melhorar qualidade deste guia. favor, contribua caso veja quaisquer erros, inclusive erros digitação. começar, você pode nossa sessão contribuindo documentação. você também pode encontrar conteúdo incompleto coisas estão atualizadas. favor, adicione qualquer documentação falta main rails. certifique-se checar edge guides (en-us) primeiro verificar problema resolvido branch main. verifique diretrizes guia ruby rails estilo convenções. qualquer motivo, você encontrar algo consertar, conseguir consertá-lo, favor abra issue nosso guia. último, menos importante, qualquer tipo discussão sobre documentação ruby rails muito vinda lista discussão rubyonrails-docs issues guia português."}];var linkMap = {"0":"command_line.html","1":"command_line.html#rails-new","2":"command_line.html#bin-rails-server","3":"command_line.html#bin-rails-generate","4":"command_line.html#bin-rails-console","5":"command_line.html#bin-rails-dbconsole","6":"command_line.html#bin-rails-runner","7":"command_line.html#bin-rails-destroy","8":"command_line.html#bin-rails-about","9":"command_line.html#bin-rails-assets","10":"command_line.html#bin-rails-db","11":"command_line.html#bin-rails-notes","12":"command_line.html#bin-rails-routes","13":"command_line.html#bin-rails-test","14":"command_line.html#bin-rails-tmp","15":"command_line.html#miscellaneous","16":"command_line.html#custom-rake-tasks","17":"command_line.html#rails-with-databases-and-scm","18":"action_view_helpers.html","19":"action_view_helpers.html#assettaghelper","20":"action_view_helpers.html#atomfeedhelper","21":"action_view_helpers.html#benchmarkhelper","22":"action_view_helpers.html#cachehelper","23":"action_view_helpers.html#capturehelper","24":"action_view_helpers.html#datehelper","25":"action_view_helpers.html#debughelper","26":"action_view_helpers.html#formhelper","27":"action_view_helpers.html#javascripthelper","28":"action_view_helpers.html#numberhelper","29":"action_view_helpers.html#sanitizehelper","30":"action_view_helpers.html#urlhelper","31":"action_view_helpers.html#csrfhelper","32":"6_0_release_notes.html","33":"6_0_release_notes.html#action-mailbox","34":"6_0_release_notes.html#action-text","35":"6_0_release_notes.html#parallel-testing","36":"6_0_release_notes.html#action-cable-testing","37":"6_0_release_notes.html#railties-removals","38":"6_0_release_notes.html#railties-deprecations","39":"6_0_release_notes.html#railties-notable-changes","40":"6_0_release_notes.html#action-cable-removals","41":"6_0_release_notes.html#action-cable-deprecations","42":"6_0_release_notes.html#action-cable-notable-changes","43":"6_0_release_notes.html#action-pack-removals","44":"6_0_release_notes.html#action-pack-deprecations","45":"6_0_release_notes.html#action-pack-notable-changes","46":"6_0_release_notes.html#action-view-removals","47":"6_0_release_notes.html#action-view-deprecations","48":"6_0_release_notes.html#action-view-notable-changes","49":"6_0_release_notes.html#action-mailer-removals","50":"6_0_release_notes.html#action-mailer-deprecations","51":"6_0_release_notes.html#action-mailer-notable-changes","52":"6_0_release_notes.html#active-record-removals","53":"6_0_release_notes.html#active-record-deprecations","54":"6_0_release_notes.html#active-record-notable-changes","55":"6_0_release_notes.html#active-storage-removals","56":"6_0_release_notes.html#active-storage-deprecations","57":"6_0_release_notes.html#active-storage-notable-changes","58":"6_0_release_notes.html#active-model-removals","59":"6_0_release_notes.html#active-model-deprecations","60":"6_0_release_notes.html#active-model-notable-changes","61":"6_0_release_notes.html#active-support-removals","62":"6_0_release_notes.html#active-support-deprecations","63":"6_0_release_notes.html#active-support-notable-changes","64":"6_0_release_notes.html#active-job-removals","65":"6_0_release_notes.html#active-job-deprecations","66":"6_0_release_notes.html#active-job-notable-changes","67":"6_0_release_notes.html#notable-changes","68":"maintenance_policy.html","69":"configuring.html","70":"configuring.html#configuracao-geral-do-rails","71":"configuring.html#configuring-assets","72":"configuring.html#configuring-generators","73":"configuring.html#configuring-middleware","74":"configuring.html#configuring-i18n","75":"configuring.html#configuring-active-model","76":"configuring.html#configuring-active-record","77":"configuring.html#configuring-action-controller","78":"configuring.html#configuring-action-dispatch","79":"configuring.html#configuring-action-view","80":"configuring.html#configuring-action-mailbox","81":"configuring.html#configuring-action-mailer","82":"configuring.html#configuring-active-support","83":"configuring.html#configuring-active-job","84":"configuring.html#configuring-action-cable","85":"configuring.html#configuring-active-storage","86":"configuring.html#configuring-action-text","87":"configuring.html#results-of-config-load-defaults","88":"configuring.html#configuring-a-database","89":"configuring.html#connection-preference","90":"configuring.html#creating-rails-environments","91":"configuring.html#deploy-to-a-subdirectory-relative-url-root","92":"configuring.html#rails-railtie-initializer","93":"configuring.html#initializers","94":"autoloading_and_reloading_constants.html","95":"autoloading_and_reloading_constants.html#reloading-and-stale-objects","96":"autoloading_and_reloading_constants.html#use-case-1-during-boot-load-reloadable-code","97":"autoloading_and_reloading_constants.html#use-case-2-during-boot-load-code-that-remains-cached","98":"autoloading_and_reloading_constants.html#manual-testing","99":"autoloading_and_reloading_constants.html#automated-testing","100":"5_0_release_notes.html","101":"5_0_release_notes.html#action-cable","102":"5_0_release_notes.html#api-applications","103":"5_0_release_notes.html#active-record-attributes-api","104":"5_0_release_notes.html#test-runner","105":"5_0_release_notes.html#railties-removals","106":"5_0_release_notes.html#railties-deprecations","107":"5_0_release_notes.html#railties-notable-changes","108":"5_0_release_notes.html#action-pack-removals","109":"5_0_release_notes.html#action-pack-deprecations","110":"5_0_release_notes.html#action-pack-notable-changes","111":"5_0_release_notes.html#action-view-removals","112":"5_0_release_notes.html#action-view-notable-changes","113":"5_0_release_notes.html#action-mailer-removals","114":"5_0_release_notes.html#action-mailer-notable-changes","115":"5_0_release_notes.html#active-record-removals","116":"5_0_release_notes.html#active-record-deprecations","117":"5_0_release_notes.html#active-record-notable-changes","118":"5_0_release_notes.html#active-model-removals","119":"5_0_release_notes.html#active-model-deprecations","120":"5_0_release_notes.html#active-model-notable-changes","121":"5_0_release_notes.html#active-job-notable-changes","122":"5_0_release_notes.html#removals","123":"5_0_release_notes.html#deprecations","124":"5_0_release_notes.html#active-support-notable-changes","125":"action_text_overview.html","126":"action_text_overview.html#rendering-attachments","127":"active_model_basics.html","128":"active_model_basics.html#api","129":"active_model_basics.html#metodos-de-atributo","130":"active_model_basics.html#callbacks","131":"active_model_basics.html#conversao","132":"active_model_basics.html#sujeira","133":"active_model_basics.html#validacoes","134":"active_model_basics.html#nomeacao","135":"active_model_basics.html#model","136":"active_model_basics.html#serializacao","137":"active_model_basics.html#traducao","138":"active_model_basics.html#testes-de-lint","139":"active_model_basics.html#securepassword","140":"action_mailer_basics.html","141":"action_mailer_basics.html#mailers-sao-semelhantes-a-controllers","142":"action_mailer_basics.html#passo-a-passo-para-gerar-um-mailer","143":"action_mailer_basics.html#codificacao-automatica","144":"action_mailer_basics.html#lista-completa-de-metodos-do-action-mailer","145":"action_mailer_basics.html#views-de-mailer","146":"action_mailer_basics.html#layouts-de-action-mailer","147":"action_mailer_basics.html#pre-visualizando-emails","148":"action_mailer_basics.html#gerando-urls-no-action-mailer-views","149":"action_mailer_basics.html#adicionando-imagens-no-action-mailer-views","150":"action_mailer_basics.html#enviando-emails-multipart","151":"action_mailer_basics.html#enviando-emails-com-opcoes-de-entrega-dinamicas","152":"action_mailer_basics.html#enviando-emails-sem-renderizar-um-template","153":"action_mailer_basics.html#exemplo-de-configuracao-do-action-mailer","154":"action_mailer_basics.html#configuracao-do-action-mailer-para-gmail","155":"action_mailer_basics.html#interceptando-emails","156":"action_mailer_basics.html#observando-emails","157":"plugins.html","158":"plugins.html#generate-a-gemified-plugin","159":"plugins.html#add-a-class-method","160":"plugins.html#add-an-instance-method","161":"plugins.html#references","162":"testing.html","163":"testing.html#configuracoes-para-testes-em-aplicacoes-rails","164":"testing.html#o-ambiente-de-teste","165":"testing.html#rails-conhece-minitest","166":"testing.html#assercoes-disponiveis","167":"testing.html#assercoes-especificas-do-rails","168":"testing.html#uma-breve-nota-sobre-os-casos-de-testes","169":"testing.html#o-teste-runner-do-rails","170":"testing.html#testes-em-paralelo-com-processos","171":"testing.html#testes-em-paralelo-com-threads","172":"testing.html#testando-transacoes-em-paralelo","173":"testing.html#limite-para-paralelizar-testes","174":"testing.html#mantendo-o-esquema-do-banco-de-dados-de-teste","175":"testing.html#o-essencial-sobre-fixtures","176":"testing.html#mudando-as-configuracoes-padrao","177":"testing.html#helper-de-capturas-de-tela","178":"testing.html#implementando-um-teste-de-sistema","179":"testing.html#helpers-available-for-integration-tests","180":"testing.html#implementing-an-integration-test","181":"testing.html#what-to-include-in-your-functional-tests","182":"testing.html#available-request-types-for-functional-tests","183":"testing.html#testing-xhr-ajax-requests","184":"testing.html#the-three-hashes-of-the-apocalypse","185":"testing.html#instance-variables-available","186":"testing.html#setting-headers-and-cgi-variables","187":"testing.html#testing-flash-notices","188":"testing.html#putting-it-together","189":"testing.html#test-helpers","190":"testing.html#assercoes-adicionais-para-views","191":"testing.html#keeping-the-postman-in-check","192":"testing.html#unit-testing","193":"testing.html#functional-and-system-testing","194":"testing.html#um-caso-de-teste-basico","195":"testing.html#assercoes-personalizadas-e-testando-jobs-dentro-de-outros-componentes","196":"testing.html#connection-test-case","197":"testing.html#channel-test-case","198":"testing.html#custom-assertions-and-testing-broadcasts-inside-other-components","199":"testing.html#testando-codigo-dependente-de-data-horario","200":"testing.html#continuous-integration","201":"testing.html#bare-test-suites","202":"testing.html#testing-time-dependent-code","203":"3_1_release_notes.html","204":"3_1_release_notes.html#rails-3-1-requires-at-least-ruby-1-8-7","205":"3_1_release_notes.html#what-to-update-in-your-apps","206":"3_1_release_notes.html#vendoring-gems","207":"3_1_release_notes.html#living-on-the-edge","208":"3_1_release_notes.html#assets-pipeline","209":"3_1_release_notes.html#http-streaming","210":"3_1_release_notes.html#default-js-library-is-now-jquery","211":"3_1_release_notes.html#identity-map","212":"3_1_release_notes.html#action-controller","213":"3_1_release_notes.html#action-dispatch","214":"3_1_release_notes.html#action-view","215":"api_app.html","216":"api_app.html#criando-uma-nova-aplicacao","217":"api_app.html#alterando-uma-aplicacao-existente","218":"api_app.html#usando-o-middleware-de-cache","219":"api_app.html#usando-rack-sendfile","220":"api_app.html#usando-actiondispatch-request","221":"api_app.html#usando-middlewares-de-sessao-session","222":"api_app.html#outros-middleware","223":"api_app.html#removendo-middleware","224":"api_app.html#adicionando-outros-modulos","225":"routing.html","226":"routing.html#conectando-urls-ao-codigo","227":"routing.html#gerando-caminhos-e-urls-a-partir-do-codigo","228":"routing.html#configurando-o-roteador-do-rails","229":"routing.html#resources-na-web","230":"routing.html#crud-verbos-e-actions","231":"routing.html#helpers-path-e-url","232":"routing.html#definindo-multiplos-resources-ao-mesmo-tempo","233":"routing.html#resources-no-singular","234":"routing.html#controller-namespaces-e-routing","235":"routing.html#nested-resources-recursos-aninhados","236":"routing.html#roteamento-com-metodo-concerns","237":"routing.html#criando-paths-e-urls-de-objetos","238":"routing.html#adicionando-mais-restful-actions","239":"routing.html#parametros-vinculados","240":"routing.html#segmentos-dinamicos","241":"routing.html#segmentos-estaticos","242":"routing.html#usando-query-string","243":"routing.html#definindo-padroes","244":"routing.html#nomeando-rotas","245":"routing.html#restringindo-verbos-http","246":"routing.html#restricoes-de-segmento","247":"routing.html#restricoes-baseadas-em-requisicoes","248":"routing.html#restricoes-avancadas","249":"routing.html#rotas-englobadas-glob-e-segmentos-curinga","250":"routing.html#redirecionamento","251":"routing.html#roteamento-para-aplicacoes-rack","252":"routing.html#usando-root","253":"routing.html#rotas-com-caracteres-unicode","254":"routing.html#rotas-diretas","255":"routing.html#usando-resolve","256":"routing.html#especificando-um-controller-para-usar","257":"routing.html#especificando-restricoes","258":"routing.html#sobrescrevendo-helpers-de-nome-de-rota","259":"routing.html#sobrescrevendo-os-segmentos-new-e-edit","260":"routing.html#prefixando-os-helpers-de-nome-de-rota","261":"routing.html#restringindo-as-rotas-criadas","262":"routing.html#traduzindo-caminhos","263":"routing.html#sobrescrevendo-a-forma-singular","264":"routing.html#usando-as-em-recursos-aninhados","265":"routing.html#sobrescrevendo-parametros-de-nome-de-rota","266":"routing.html#nao-use-este-recurso-a-menos-que-voce-realmente-precise-dele","267":"routing.html#listando-rotas-existentes","268":"routing.html#testando-rotas","269":"rails_application_templates.html","270":"rails_application_templates.html#gem-args","271":"rails_application_templates.html#gem-group-names-block","272":"rails_application_templates.html#add-source-source-options-block","273":"rails_application_templates.html#environment-application-data-nil-options-block","274":"rails_application_templates.html#vendor-lib-file-initializer-filename-data-nil-block","275":"rails_application_templates.html#rakefile-filename-data-nil-block","276":"rails_application_templates.html#generate-what-args","277":"rails_application_templates.html#run-command","278":"rails_application_templates.html#rails-command-command-options","279":"rails_application_templates.html#route-routing-code","280":"rails_application_templates.html#inside-dir","281":"rails_application_templates.html#ask-question","282":"rails_application_templates.html#yes-questionmark-question-or-no-questionmark-question","283":"rails_application_templates.html#git-command","284":"rails_application_templates.html#after-bundle-block","285":"active_record_migrations.html","286":"active_record_migrations.html#criando-uma-migration-independente","287":"active_record_migrations.html#model-generators","288":"active_record_migrations.html#usando-modificadores","289":"active_record_migrations.html#criando-uma-tabela","290":"active_record_migrations.html#criando-uma-tabela-de-juncao-join-table","291":"active_record_migrations.html#mudando-tabelas","292":"active_record_migrations.html#mudando-colunas","293":"active_record_migrations.html#modificadores-de-coluna","294":"active_record_migrations.html#references","295":"active_record_migrations.html#foreign-keys-chaves-estrangeiras","296":"active_record_migrations.html#quando-os-helpers-nao-sao-suficientes","297":"active_record_migrations.html#usando-o-metodo-change","298":"active_record_migrations.html#usando-reversible","299":"active_record_migrations.html#usando-os-metodos-up-down","300":"active_record_migrations.html#revertendo-migrations-anteriores","301":"active_record_migrations.html#revertendo-a-migration","302":"active_record_migrations.html#setup-do-banco-de-dados","303":"active_record_migrations.html#reinicializando-o-banco-de-dados","304":"active_record_migrations.html#executando-migrations-especificas","305":"active_record_migrations.html#executando-migrations-em-ambientes-diferentes","306":"active_record_migrations.html#alterando-o-output-saida-de-migrations-em-execucao","307":"active_record_migrations.html#para-que-servem-arquivos-de-schema-questionmark","308":"active_record_migrations.html#tipos-de-schema-dumps","309":"active_record_migrations.html#schema-dumps-e-o-controle-de-versao","310":"4_1_release_notes.html","311":"4_1_release_notes.html#spring-application-preloader","312":"4_1_release_notes.html#config-secrets-yml","313":"4_1_release_notes.html#action-pack-variants","314":"4_1_release_notes.html#action-mailer-previews","315":"4_1_release_notes.html#active-record-enums","316":"4_1_release_notes.html#message-verifiers","317":"4_1_release_notes.html#module-concerning","318":"4_1_release_notes.html#csrf-protection-from-remote-script-tags","319":"4_1_release_notes.html#railties-removals","320":"4_1_release_notes.html#railties-notable-changes","321":"4_1_release_notes.html#action-pack-removals","322":"4_1_release_notes.html#action-pack-notable-changes","323":"4_1_release_notes.html#action-mailer-notable-changes","324":"4_1_release_notes.html#active-record-removals","325":"4_1_release_notes.html#active-record-deprecations","326":"4_1_release_notes.html#active-record-notable-changes","327":"4_1_release_notes.html#active-model-deprecations","328":"4_1_release_notes.html#active-model-notable-changes","329":"4_1_release_notes.html#active-support-removals","330":"4_1_release_notes.html#deprecations","331":"4_1_release_notes.html#active-support-notable-changes","332":"6_1_release_notes.html","333":"6_1_release_notes.html#per-database-connection-switching","334":"6_1_release_notes.html#horizontal-sharding","335":"6_1_release_notes.html#strict-loading-associations","336":"6_1_release_notes.html#delegated-types","337":"6_1_release_notes.html#destroy-associations-async","338":"6_1_release_notes.html#railties-removals","339":"6_1_release_notes.html#railties-deprecations","340":"6_1_release_notes.html#railties-notable-changes","341":"6_1_release_notes.html#action-cable-removals","342":"6_1_release_notes.html#action-cable-deprecations","343":"6_1_release_notes.html#action-cable-notable-changes","344":"6_1_release_notes.html#action-pack-removals","345":"6_1_release_notes.html#action-pack-deprecations","346":"6_1_release_notes.html#action-pack-notable-changes","347":"6_1_release_notes.html#action-view-removals","348":"6_1_release_notes.html#action-view-deprecations","349":"6_1_release_notes.html#action-view-notable-changes","350":"6_1_release_notes.html#action-mailer-removals","351":"6_1_release_notes.html#action-mailer-deprecations","352":"6_1_release_notes.html#action-mailer-notable-changes","353":"6_1_release_notes.html#active-record-removals","354":"6_1_release_notes.html#active-record-deprecations","355":"6_1_release_notes.html#active-record-notable-changes","356":"6_1_release_notes.html#active-storage-removals","357":"6_1_release_notes.html#active-storage-deprecations","358":"6_1_release_notes.html#active-storage-notable-changes","359":"6_1_release_notes.html#active-model-removals","360":"6_1_release_notes.html#active-model-deprecations","361":"6_1_release_notes.html#active-model-notable-changes","362":"6_1_release_notes.html#active-support-removals","363":"6_1_release_notes.html#active-support-deprecations","364":"6_1_release_notes.html#active-support-notable-changes","365":"6_1_release_notes.html#active-job-removals","366":"6_1_release_notes.html#active-job-deprecations","367":"6_1_release_notes.html#active-job-notable-changes","368":"6_1_release_notes.html#action-text-removals","369":"6_1_release_notes.html#action-text-deprecations","370":"6_1_release_notes.html#action-text-notable-changes","371":"6_1_release_notes.html#action-mailbox-removals","372":"6_1_release_notes.html#action-mailbox-deprecations","373":"6_1_release_notes.html#action-mailbox-notable-changes","374":"6_1_release_notes.html#notable-changes","375":"active_record_validations.html","376":"active_record_validations.html#por-que-usar-validacoes-questionmark","377":"active_record_validations.html#quando-as-validacoes-ocorrem-questionmark","378":"active_record_validations.html#pulando-validacoes","379":"active_record_validations.html#valid-questionmark-e-invalid-questionmark","380":"active_record_validations.html#resumo-das-validacoes-errors","381":"active_record_validations.html#acceptance","382":"active_record_validations.html#validates-associated","383":"active_record_validations.html#confirmation","384":"active_record_validations.html#comparison","385":"active_record_validations.html#exclusion","386":"active_record_validations.html#format","387":"active_record_validations.html#inclusion","388":"active_record_validations.html#length","389":"active_record_validations.html#numericality","390":"active_record_validations.html#presence","391":"active_record_validations.html#absence","392":"active_record_validations.html#uniqueness","393":"active_record_validations.html#validates-with","394":"active_record_validations.html#validates-each","395":"active_record_validations.html#allow-nil","396":"active_record_validations.html#allow-blank","397":"active_record_validations.html#message","398":"active_record_validations.html#on","399":"active_record_validations.html#usando-um-symbol-com-if-e-unless","400":"active_record_validations.html#usando-uma-proc-com-if-e-unless","401":"active_record_validations.html#agrupando-validacoes-com-condicionais","402":"active_record_validations.html#combinando-validacoes-com-condicionais","403":"active_record_validations.html#validadores-customizados","404":"active_record_validations.html#metodos-customizados","405":"active_record_validations.html#trabalhando-com-erros-de-validacao-errors","406":"active_record_validations.html#errors","407":"active_record_validations.html#errors-where-e-objetos-de-erro","408":"active_record_validations.html#errors-add","409":"active_record_validations.html#errors-base","410":"active_record_validations.html#errors-clear","411":"active_record_validations.html#errors-size","412":"active_job_basics.html","413":"active_job_basics.html#crie-o-job","414":"active_job_basics.html#enfileirar-o-job","415":"active_job_basics.html#backends","416":"active_job_basics.html#configurando-o-backend","417":"active_job_basics.html#iniciando-o-backend","418":"active_job_basics.html#callbacks-disponiveis","419":"active_job_basics.html#globalid","420":"active_job_basics.html#serializers","421":"active_job_basics.html#reexecucao-ou-descarte-de-jobs-falhos","422":"active_job_basics.html#desserializacao","423":"7_0_release_notes.html","424":"7_0_release_notes.html#railties-removals","425":"7_0_release_notes.html#railties-deprecations","426":"7_0_release_notes.html#railties-notable-changes","427":"7_0_release_notes.html#action-cable-removals","428":"7_0_release_notes.html#action-cable-deprecations","429":"7_0_release_notes.html#action-cable-notable-changes","430":"7_0_release_notes.html#action-pack-removals","431":"7_0_release_notes.html#action-pack-deprecations","432":"7_0_release_notes.html#action-pack-notable-changes","433":"7_0_release_notes.html#action-view-removals","434":"7_0_release_notes.html#action-view-deprecations","435":"7_0_release_notes.html#action-view-notable-changes","436":"7_0_release_notes.html#action-mailer-removals","437":"7_0_release_notes.html#action-mailer-deprecations","438":"7_0_release_notes.html#action-mailer-notable-changes","439":"7_0_release_notes.html#active-record-removals","440":"7_0_release_notes.html#active-record-deprecations","441":"7_0_release_notes.html#active-record-notable-changes","442":"7_0_release_notes.html#active-storage-removals","443":"7_0_release_notes.html#active-storage-deprecations","444":"7_0_release_notes.html#active-storage-notable-changes","445":"7_0_release_notes.html#active-model-removals","446":"7_0_release_notes.html#active-model-deprecations","447":"7_0_release_notes.html#active-model-notable-changes","448":"7_0_release_notes.html#active-support-removals","449":"7_0_release_notes.html#active-support-deprecations","450":"7_0_release_notes.html#active-support-notable-changes","451":"7_0_release_notes.html#active-job-removals","452":"7_0_release_notes.html#active-job-deprecations","453":"7_0_release_notes.html#active-job-notable-changes","454":"7_0_release_notes.html#action-text-removals","455":"7_0_release_notes.html#action-text-deprecations","456":"7_0_release_notes.html#action-text-notable-changes","457":"7_0_release_notes.html#action-mailbox-removals","458":"7_0_release_notes.html#action-mailbox-deprecations","459":"7_0_release_notes.html#action-mailbox-notable-changes","460":"7_0_release_notes.html#notable-changes","461":"debugging_rails_applications.html","462":"debugging_rails_applications.html#debug","463":"debugging_rails_applications.html#to-yaml","464":"debugging_rails_applications.html#inspect","465":"debugging_rails_applications.html#o-que-e-o-logger-questionmark","466":"debugging_rails_applications.html#niveis-de-log","467":"debugging_rails_applications.html#enviando-mensagens","468":"debugging_rails_applications.html#verbose-query-logs","469":"debugging_rails_applications.html#tagged-log","470":"debugging_rails_applications.html#impacto-dos-logs-no-desempenho","471":"debugging_rails_applications.html#entering-a-debugging-session","472":"debugging_rails_applications.html#the-context","473":"debugging_rails_applications.html#console","474":"debugging_rails_applications.html#inspecionando-variaveis","475":"debugging_rails_applications.html#configuracoes","476":"debugging_rails_applications.html#valgrind","477":"debugging_rails_applications.html#encontrando-um-vazamento-de-memoria","478":"2_3_release_notes.html","479":"2_3_release_notes.html#rack-integration","480":"2_3_release_notes.html#renewed-support-for-rails-engines","481":"2_3_release_notes.html#nested-attributes","482":"2_3_release_notes.html#nested-transactions","483":"2_3_release_notes.html#dynamic-scopes","484":"2_3_release_notes.html#default-scopes","485":"2_3_release_notes.html#batch-processing","486":"2_3_release_notes.html#multiple-conditions-for-callbacks","487":"2_3_release_notes.html#find-with-having","488":"2_3_release_notes.html#reconnecting-mysql-connections","489":"2_3_release_notes.html#other-active-record-changes","490":"2_3_release_notes.html#unified-rendering","491":"2_3_release_notes.html#application-controller-renamed","492":"2_3_release_notes.html#http-digest-authentication-support","493":"2_3_release_notes.html#more-efficient-routing","494":"2_3_release_notes.html#rack-based-lazy-loaded-sessions","495":"2_3_release_notes.html#mime-type-handling-changes","496":"2_3_release_notes.html#optimization-of-respond-to","497":"2_3_release_notes.html#improved-caching-performance","498":"2_3_release_notes.html#localized-views","499":"2_3_release_notes.html#partial-scoping-for-translations","500":"2_3_release_notes.html#other-action-controller-changes","501":"2_3_release_notes.html#nested-object-forms","502":"2_3_release_notes.html#smart-rendering-of-partials","503":"2_3_release_notes.html#prompts-for-date-select-helpers","504":"2_3_release_notes.html#assettag-timestamp-caching","505":"2_3_release_notes.html#asset-hosts-as-objects","506":"2_3_release_notes.html#grouped-options-for-select-helper-method","507":"2_3_release_notes.html#disabled-option-tags-for-form-select-helpers","508":"2_3_release_notes.html#a-note-about-template-loading","509":"2_3_release_notes.html#other-action-view-changes","510":"2_3_release_notes.html#object-try","511":"2_3_release_notes.html#object-tap-backport","512":"2_3_release_notes.html#swappable-parsers-for-xmlmini","513":"2_3_release_notes.html#fractional-seconds-for-timewithzone","514":"2_3_release_notes.html#json-key-quoting","515":"2_3_release_notes.html#other-active-support-changes","516":"2_3_release_notes.html#rails-metal","517":"2_3_release_notes.html#application-templates","518":"2_3_release_notes.html#quieter-backtraces","519":"2_3_release_notes.html#faster-boot-time-in-development-mode-with-lazy-loading-autoload","520":"2_3_release_notes.html#rake-gem-task-rewrite","521":"2_3_release_notes.html#other-railties-changes","522":"4_0_release_notes.html","523":"4_0_release_notes.html#vendoring-gems","524":"4_0_release_notes.html#living-on-the-edge","525":"4_0_release_notes.html#upgrade","526":"4_0_release_notes.html#actionpack","527":"4_0_release_notes.html#general","528":"4_0_release_notes.html#security","529":"4_0_release_notes.html#railties-notable-changes","530":"4_0_release_notes.html#railties-deprecations","531":"4_0_release_notes.html#action-mailer-notable-changes","532":"4_0_release_notes.html#action-mailer-deprecations","533":"4_0_release_notes.html#active-model-notable-changes","534":"4_0_release_notes.html#active-model-deprecations","535":"4_0_release_notes.html#active-support-notable-changes","536":"4_0_release_notes.html#active-support-deprecations","537":"4_0_release_notes.html#action-pack-notable-changes","538":"4_0_release_notes.html#action-pack-deprecations","539":"4_0_release_notes.html#active-record-notable-changes","540":"4_0_release_notes.html#active-record-deprecations","541":"getting_started.html","542":"getting_started.html#criando-um-novo-projeto-em-rails-instalando-o-rails","543":"getting_started.html#criando-a-aplicacao-blog","544":"getting_started.html#inicializando-o-servidor-web","545":"getting_started.html#diga-ola-rails","546":"getting_started.html#configuracao-da-pagina-inicial-da-aplicacao","547":"getting_started.html#mvc-e-voce-gerando-um-model","548":"getting_started.html#migracoes-de-banco-de-dados","549":"getting_started.html#utilizando-um-model-para-interagir-com-o-banco-de-dados","550":"getting_started.html#exibindo-uma-lista-de-artigos","551":"getting_started.html#exibindo-um-unico-artigo","552":"getting_started.html#roteamento-de-resources-recursos","553":"getting_started.html#criando-um-novo-artigo","554":"getting_started.html#atualizando-um-artigo","555":"getting_started.html#deletando-um-artigo","556":"getting_started.html#adicionando-um-segundo-model-gerando-um-model","557":"getting_started.html#associando-models","558":"getting_started.html#adicionando-a-rota-para-comentarios","559":"getting_started.html#gerando-um-controller","560":"getting_started.html#renderizando-colecoes-de-partials","561":"getting_started.html#renderizando-um-formulario-com-partial","562":"getting_started.html#usando-concerns","563":"getting_started.html#excluindo-objetos-associados","564":"getting_started.html#autenticacao-basica","565":"getting_started.html#outras-consideracoes-de-seguranca","566":"active_record_callbacks.html","567":"active_record_callbacks.html#registro-de-callback","568":"active_record_callbacks.html#criando-um-objeto","569":"active_record_callbacks.html#atualizando-um-objeto","570":"active_record_callbacks.html#destruindo-um-objeto","571":"active_record_callbacks.html#after-initialize-e-after-find","572":"active_record_callbacks.html#after-touch","573":"active_record_callbacks.html#utilizando-if-e-unless-com-um-symbol","574":"active_record_callbacks.html#utilizando-if-e-unless-com-uma-proc","575":"active_record_callbacks.html#usando-if-e-unless-juntos","576":"active_record_callbacks.html#multiplas-condicoes-de-callback","577":"asset_pipeline.html","578":"asset_pipeline.html#principais-caracteristicas","579":"asset_pipeline.html#o-que-e-impressao-digital-e-por-que-eu-deveria-me-importar-questionmark","580":"asset_pipeline.html#assets-especificos-de-controllers","581":"asset_pipeline.html#organizacao-dos-assets","582":"asset_pipeline.html#codificando-links-para-assets","583":"asset_pipeline.html#arquivos-de-manifesto-e-diretivas","584":"asset_pipeline.html#pre-processamento","585":"asset_pipeline.html#raise-an-error-when-an-asset-is-not-found","586":"asset_pipeline.html#turning-digests-off","587":"asset_pipeline.html#turning-source-maps-on","588":"asset_pipeline.html#precompiling-assets","589":"asset_pipeline.html#local-precompilation","590":"asset_pipeline.html#live-compilation","591":"asset_pipeline.html#cdns","592":"asset_pipeline.html#css-compression","593":"asset_pipeline.html#javascript-compression","594":"asset_pipeline.html#gzipping-your-assets","595":"asset_pipeline.html#using-your-own-compressor","596":"asset_pipeline.html#changing-the-assets-path","597":"asset_pipeline.html#x-sendfile-headers","598":"caching_with_rails.html","599":"caching_with_rails.html#page-caching","600":"caching_with_rails.html#action-caching","601":"caching_with_rails.html#fragment-caching","602":"caching_with_rails.html#russian-doll-caching","603":"caching_with_rails.html#shared-partial-caching","604":"caching_with_rails.html#managing-dependencies","605":"caching_with_rails.html#low-level-caching","606":"caching_with_rails.html#sql-caching","607":"caching_with_rails.html#configuration","608":"caching_with_rails.html#activesupport-cache-store","609":"caching_with_rails.html#activesupport-cache-memorystore","610":"caching_with_rails.html#activesupport-cache-filestore","611":"caching_with_rails.html#activesupport-cache-memcachestore","612":"caching_with_rails.html#activesupport-cache-rediscachestore","613":"caching_with_rails.html#activesupport-cache-nullstore","614":"caching_with_rails.html#strong-v-s-weak-etags","615":"association_basics.html","616":"association_basics.html#a-associacao-belongs-to","617":"association_basics.html#a-associacao-has-one","618":"association_basics.html#a-associacao-has-many","619":"association_basics.html#a-associacao-has-many-through","620":"association_basics.html#a-associacao-has-one-through","621":"association_basics.html#a-associacao-has-and-belongs-to-many","622":"association_basics.html#escolhendo-entre-belongs-to-and-has-one","623":"association_basics.html#escolhendo-entre-has-many-through-e-has-and-belongs-to-many","624":"association_basics.html#associacoes-polimorficas","625":"association_basics.html#self-joins","626":"association_basics.html#controlando-o-caching","627":"association_basics.html#evitando-colisoes-de-nome","628":"association_basics.html#atualizando-o-schema","629":"association_basics.html#controlando-o-escopo-de-associacao","630":"association_basics.html#associacoes-bidirecionais","631":"association_basics.html#referencia-da-associacao-belongs-to","632":"association_basics.html#referencia-da-associacao-has-one","633":"association_basics.html#referencia-da-associacao-has-many","634":"association_basics.html#referencia-da-associacao-has-and-belongs-to-many","635":"association_basics.html#callbacks-de-associacao","636":"association_basics.html#association-extensions","637":"security.html","638":"security.html#o-que-sao-sessoes-questionmark","639":"security.html#sequestro-de-sessao","640":"security.html#armazenamento-de-sessao","641":"security.html#configuracoes-de-rotacao-de-cookies-assinados-e-encriptados","642":"security.html#replay-attacks-for-cookiestore-sessions","643":"security.html#session-fixation","644":"security.html#session-fixation-countermeasures","645":"security.html#session-expiry","646":"security.html#csrf-countermeasures","647":"security.html#redirection","648":"security.html#file-uploads","649":"security.html#executable-code-in-file-uploads","650":"security.html#file-downloads","651":"security.html#additional-precautions","652":"security.html#brute-forcing-accounts","653":"security.html#account-hijacking","654":"security.html#captchas","655":"security.html#logging","656":"security.html#regular-expressions","657":"security.html#privilege-escalation","658":"security.html#permitted-lists-versus-restricted-lists","659":"security.html#sql-injection","660":"security.html#cross-site-scripting-xss","661":"security.html#css-injection","662":"security.html#textile-injection","663":"security.html#ajax-injection","664":"security.html#command-line-injection","665":"security.html#header-injection","666":"security.html#content-security-policy","667":"security.html#custom-credentials","668":"webpacker.html","669":"webpacker.html#what-is-webpack-questionmark","670":"webpacker.html#how-is-webpacker-different-from-sprockets-questionmark","671":"webpacker.html#using-webpacker-for-javascript","672":"webpacker.html#using-webpacker-for-css","673":"webpacker.html#using-webpacker-for-static-assets","674":"webpacker.html#webpacker-in-rails-engines","675":"webpacker.html#hot-module-replacement-hmr","676":"webpacker.html#deploying-webpacker","677":"contributing_to_ruby_on_rails.html","678":"contributing_to_ruby_on_rails.html#criando-um-aviso-de-bug","679":"contributing_to_ruby_on_rails.html#crie-um-caso-de-teste-executavel","680":"contributing_to_ruby_on_rails.html#tratamento-especial-para-questoes-de-seguranca","681":"contributing_to_ruby_on_rails.html#e-quanto-as-solicitacoes-de-funcionalidade-feature-requests-questionmark","682":"contributing_to_ruby_on_rails.html#verificar-bug-reports","683":"contributing_to_ruby_on_rails.html#testar-patches","684":"contributing_to_ruby_on_rails.html#setting-up-a-development-environment","685":"contributing_to_ruby_on_rails.html#clone-the-rails-repository","686":"contributing_to_ruby_on_rails.html#bundle-install","687":"contributing_to_ruby_on_rails.html#running-an-application-against-your-local-branch","688":"contributing_to_ruby_on_rails.html#write-your-code","689":"contributing_to_ruby_on_rails.html#benchmark-your-code","690":"contributing_to_ruby_on_rails.html#running-tests","691":"contributing_to_ruby_on_rails.html#warnings","692":"contributing_to_ruby_on_rails.html#updating-the-documentation","693":"contributing_to_ruby_on_rails.html#updating-the-changelog","694":"contributing_to_ruby_on_rails.html#ignoring-files-created-by-your-editor-ide","695":"contributing_to_ruby_on_rails.html#updating-the-gemfile-lock","696":"contributing_to_ruby_on_rails.html#commit-your-changes","697":"contributing_to_ruby_on_rails.html#update-your-branch","698":"contributing_to_ruby_on_rails.html#fork","699":"contributing_to_ruby_on_rails.html#issue-a-pull-request","700":"contributing_to_ruby_on_rails.html#get-some-feedback","701":"contributing_to_ruby_on_rails.html#iterate-as-necessary","702":"contributing_to_ruby_on_rails.html#older-versions-of-ruby-on-rails","703":"action_mailbox_basics.html","704":"action_mailbox_basics.html#exim","705":"action_mailbox_basics.html#mailgun","706":"action_mailbox_basics.html#mandrill","707":"action_mailbox_basics.html#postfix","708":"action_mailbox_basics.html#postmark","709":"action_mailbox_basics.html#qmail","710":"action_mailbox_basics.html#sendgrid","711":"action_cable_overview.html","712":"action_cable_overview.html#terminologia-conexoes","713":"action_cable_overview.html#consumidores","714":"action_cable_overview.html#canais","715":"action_cable_overview.html#assinantes","716":"action_cable_overview.html#pub-sub","717":"action_cable_overview.html#terminologia-broadcastings","718":"action_cable_overview.html#connections","719":"action_cable_overview.html#channels","720":"action_cable_overview.html#componentes-client-side-conexoes","721":"action_cable_overview.html#streams","722":"action_cable_overview.html#interacoes-cliente-servidor-broadcastings","723":"action_cable_overview.html#interacoes-cliente-servidor-subscriptions","724":"action_cable_overview.html#passando-parametros-para-channel","725":"action_cable_overview.html#retransmitindo-uma-mensagem","726":"action_cable_overview.html#exemplo-1-aspectos-do-usuario","727":"action_cable_overview.html#exemplo-2-recebendo-novas-notificacoes-da-web","728":"action_cable_overview.html#exemplos-mais-completos","729":"action_cable_overview.html#adaptador-de-assinatura","730":"action_cable_overview.html#origens-de-requisicao-permitidas","731":"action_cable_overview.html#configuracao-do-consumidor","732":"action_cable_overview.html#configuracao-do-worker-pool","733":"action_cable_overview.html#log-no-lado-do-client","734":"action_cable_overview.html#outras-configuracoes","735":"action_cable_overview.html#na-aplicacao","736":"action_cable_overview.html#autonomo","737":"action_cable_overview.html#notas","738":"layouts_and_rendering.html","739":"layouts_and_rendering.html#renderizacao-por-padrao-convencao-sobre-configuracao-em-acao","740":"layouts_and_rendering.html#usando-render","741":"layouts_and_rendering.html#usando-redirect-to","742":"layouts_and_rendering.html#usando-head-para-criar-respostas-com-apenas-o-cabecalho-header-only","743":"layouts_and_rendering.html#helpers-de-asset-tags","744":"layouts_and_rendering.html#entendendo-yield","745":"layouts_and_rendering.html#usando-o-metodo-content-for","746":"layouts_and_rendering.html#usando-partials","747":"layouts_and_rendering.html#usando-layouts-aninhados","748":"active_record_querying.html","749":"active_record_querying.html#retornando-um-unico-objeto","750":"active_record_querying.html#retornando-multiplos-objetos-em-lotes","751":"active_record_querying.html#condicoes-de-strings-puras","752":"active_record_querying.html#condicoes-de-array","753":"active_record_querying.html#condicoes-de-hash","754":"active_record_querying.html#condicoes-not","755":"active_record_querying.html#condicoes-or","756":"active_record_querying.html#condicoes-and","757":"active_record_querying.html#total-de-itens-agrupados","758":"active_record_querying.html#unscope","759":"active_record_querying.html#only","760":"active_record_querying.html#reselect","761":"active_record_querying.html#reorder","762":"active_record_querying.html#reverse-order","763":"active_record_querying.html#rewhere","764":"active_record_querying.html#bloqueio-otimista","765":"active_record_querying.html#bloqueio-pessimista","766":"active_record_querying.html#joins","767":"active_record_querying.html#left-outer-joins","768":"active_record_querying.html#includes","769":"active_record_querying.html#preload","770":"active_record_querying.html#eager-load","771":"active_record_querying.html#transmitindo-argumentos","772":"active_record_querying.html#usando-condicionais","773":"active_record_querying.html#aplicando-um-escopo-padrao","774":"active_record_querying.html#mesclagem-de-escopos","775":"active_record_querying.html#removendo-todo-o-escopo","776":"active_record_querying.html#buscando-dados-filtrados-de-multiplas-tabelas","777":"active_record_querying.html#buscando-dados-especificos-de-multiplas-tabelas","778":"active_record_querying.html#find-or-create-by","779":"active_record_querying.html#find-or-create-by-bang","780":"active_record_querying.html#find-or-initialize-by","781":"active_record_querying.html#select-all","782":"active_record_querying.html#pluck","783":"active_record_querying.html#ids","784":"active_record_querying.html#contar-count","785":"active_record_querying.html#media-average","786":"active_record_querying.html#minimo-minimum","787":"active_record_querying.html#maximo-maximum","788":"active_record_querying.html#soma-sum","789":"active_record_querying.html#interpretando-o-explain","790":"4_2_release_notes.html","791":"4_2_release_notes.html#active-job","792":"4_2_release_notes.html#asynchronous-mails","793":"4_2_release_notes.html#adequate-record","794":"4_2_release_notes.html#web-console","795":"4_2_release_notes.html#foreign-key-support","796":"4_2_release_notes.html#render-with-a-string-argument","797":"4_2_release_notes.html#respond-with-class-level-respond-to","798":"4_2_release_notes.html#default-host-for-rails-server","799":"4_2_release_notes.html#changed-status-option-symbols-for-render","800":"4_2_release_notes.html#html-sanitizer","801":"4_2_release_notes.html#assert-select","802":"4_2_release_notes.html#railties-removals","803":"4_2_release_notes.html#railties-deprecations","804":"4_2_release_notes.html#railties-notable-changes","805":"4_2_release_notes.html#action-pack-removals","806":"4_2_release_notes.html#action-pack-deprecations","807":"4_2_release_notes.html#action-pack-notable-changes","808":"4_2_release_notes.html#action-view-deprecations","809":"4_2_release_notes.html#action-view-notable-changes","810":"4_2_release_notes.html#action-mailer-deprecations","811":"4_2_release_notes.html#action-mailer-notable-changes","812":"4_2_release_notes.html#active-record-removals","813":"4_2_release_notes.html#active-record-deprecations","814":"4_2_release_notes.html#active-record-notable-changes","815":"4_2_release_notes.html#active-model-removals","816":"4_2_release_notes.html#active-model-deprecations","817":"4_2_release_notes.html#active-model-notable-changes","818":"4_2_release_notes.html#removals","819":"4_2_release_notes.html#deprecations","820":"4_2_release_notes.html#notable-changes","821":"generators.html","822":"generators.html#gem","823":"generators.html#gem-group","824":"generators.html#add-source","825":"generators.html#inject-into-file","826":"generators.html#gsub-file","827":"generators.html#application","828":"generators.html#git","829":"generators.html#vendor","830":"generators.html#lib","831":"generators.html#rakefile","832":"generators.html#initializer","833":"generators.html#generate","834":"generators.html#rake","835":"generators.html#route","836":"generators.html#readme","837":"api_documentation_guidelines.html","838":"api_documentation_guidelines.html#fixed-width-font","839":"api_documentation_guidelines.html#regular-font","840":"initialization.html","841":"initialization.html#bin-rails","842":"initialization.html#config-boot-rb","843":"initialization.html#rails-commands-rb","844":"initialization.html#rails-command-rb","845":"initialization.html#actionpack-lib-action-dispatch-rb","846":"initialization.html#rails-commands-server-server-command-rb","847":"initialization.html#launch-bang-rack-lib-rack-server-rb","848":"initialization.html#config-application","849":"initialization.html#rails-server-start","850":"initialization.html#config-environment-rb","851":"initialization.html#config-application-rb","852":"initialization.html#railties-lib-rails-all-rb","853":"initialization.html#back-to-config-environment-rb","854":"initialization.html#railties-lib-rails-application-rb","855":"initialization.html#loading-rails-rack-lib-rack-server-rb","856":"5_2_release_notes.html","857":"5_2_release_notes.html#active-storage","858":"5_2_release_notes.html#redis-cache-store","859":"5_2_release_notes.html#http-2-early-hints","860":"5_2_release_notes.html#credentials","861":"5_2_release_notes.html#content-security-policy","862":"5_2_release_notes.html#railties-deprecations","863":"5_2_release_notes.html#railties-notable-changes","864":"5_2_release_notes.html#action-cable-removals","865":"5_2_release_notes.html#action-cable-notable-changes","866":"5_2_release_notes.html#action-pack-removals","867":"5_2_release_notes.html#action-pack-deprecations","868":"5_2_release_notes.html#action-pack-notable-changes","869":"5_2_release_notes.html#action-view-removals","870":"5_2_release_notes.html#action-view-deprecations","871":"5_2_release_notes.html#action-view-notable-changes","872":"5_2_release_notes.html#action-mailer-notable-changes","873":"5_2_release_notes.html#active-record-removals","874":"5_2_release_notes.html#active-record-deprecations","875":"5_2_release_notes.html#active-record-notable-changes","876":"5_2_release_notes.html#active-model-notable-changes","877":"5_2_release_notes.html#removals","878":"5_2_release_notes.html#deprecations","879":"5_2_release_notes.html#active-support-notable-changes","880":"5_2_release_notes.html#active-job-notable-changes","881":"5_2_release_notes.html#ruby-on-rails-guides-notable-changes","882":"threading_and_code_execution.html","883":"threading_and_code_execution.html#default-callbacks","884":"threading_and_code_execution.html#wrapping-application-code","885":"threading_and_code_execution.html#executor-concurrency","886":"threading_and_code_execution.html#callbacks","887":"threading_and_code_execution.html#class-unload","888":"threading_and_code_execution.html#reloader-concurrency","889":"threading_and_code_execution.html#configuration","890":"threading_and_code_execution.html#permit-concurrent-loads","891":"threading_and_code_execution.html#actiondispatch-debuglocks","892":"active_support_core_extensions.html#active-support-stand-alone","893":"active_support_core_extensions.html#active-support-em-uma-aplicacao-ruby-on-rails","894":"active_support_core_extensions.html#blank-questionmark-e-present-questionmark","895":"active_support_core_extensions.html#presence","896":"active_support_core_extensions.html#duplicable-questionmark","897":"active_support_core_extensions.html#deep-dup","898":"active_support_core_extensions.html#try","899":"active_support_core_extensions.html#class-eval-args-block","900":"active_support_core_extensions.html#acts-like-questionmark-duck","901":"active_support_core_extensions.html#to-param","902":"active_support_core_extensions.html#to-query","903":"active_support_core_extensions.html#with-options","904":"active_support_core_extensions.html#suporte-ao-json","905":"active_support_core_extensions.html#variaveis-de-instancia","906":"active_support_core_extensions.html#silenciando-warnings-e-excecoes","907":"active_support_core_extensions.html#in-questionmark","908":"active_support_core_extensions.html#atributos","909":"active_support_core_extensions.html#parents","910":"active_support_core_extensions.html#anonimo","911":"active_support_core_extensions.html#delegacao-de-metodo","912":"active_support_core_extensions.html#redefinindo-metodos","913":"active_support_core_extensions.html#atributos-de-classe","914":"active_support_core_extensions.html#subclasses-e-descendentes","915":"active_support_core_extensions.html#seguranca-de-saida","916":"active_support_core_extensions.html#remove","917":"active_support_core_extensions.html#squish","918":"active_support_core_extensions.html#truncate","919":"active_support_core_extensions.html#truncate-bytes","920":"active_support_core_extensions.html#truncate-words","921":"active_support_core_extensions.html#inquiry","922":"active_support_core_extensions.html#extensoes-para-string-starts-with-questionmark-e-ends-with-questionmark","923":"active_support_core_extensions.html#strip-heredoc","924":"active_support_core_extensions.html#indent","925":"active_support_core_extensions.html#acesso","926":"active_support_core_extensions.html#inflexoes","927":"active_support_core_extensions.html#conversoes","928":"active_support_core_extensions.html#extensoes-para-symbol-starts-with-questionmark-e-ends-with-questionmark","929":"active_support_core_extensions.html#bytes","930":"active_support_core_extensions.html#extensoes-para-numeric-time","931":"active_support_core_extensions.html#formatacao","932":"active_support_core_extensions.html#multiple-of-questionmark","933":"active_support_core_extensions.html#ordinal","934":"active_support_core_extensions.html#ordinalize","935":"active_support_core_extensions.html#extensoes-para-integer-time","936":"active_support_core_extensions.html#extensoes-para-bigdecimal-to-s","937":"active_support_core_extensions.html#sum","938":"active_support_core_extensions.html#index-by","939":"active_support_core_extensions.html#index-with","940":"active_support_core_extensions.html#many-questionmark","941":"active_support_core_extensions.html#exclude-questionmark","942":"active_support_core_extensions.html#including","943":"active_support_core_extensions.html#excluding","944":"active_support_core_extensions.html#pluck","945":"active_support_core_extensions.html#pick","946":"active_support_core_extensions.html#accessing","947":"active_support_core_extensions.html#extensions-to-array-extracting","948":"active_support_core_extensions.html#options-extraction","949":"active_support_core_extensions.html#extensions-to-array-conversions","950":"active_support_core_extensions.html#wrapping","951":"active_support_core_extensions.html#duplicating","952":"active_support_core_extensions.html#grouping","953":"active_support_core_extensions.html#extensions-to-hash-conversions","954":"active_support_core_extensions.html#merging","955":"active_support_core_extensions.html#deep-duplicating","956":"active_support_core_extensions.html#working-with-keys","957":"active_support_core_extensions.html#working-with-values","958":"active_support_core_extensions.html#slicing","959":"active_support_core_extensions.html#extensions-to-hash-extracting","960":"active_support_core_extensions.html#indifferent-access","961":"active_support_core_extensions.html#multiline-questionmark","962":"active_support_core_extensions.html#extensions-to-range-to-s","963":"active_support_core_extensions.html#and-include-questionmark","964":"active_support_core_extensions.html#overlaps-questionmark","965":"active_support_core_extensions.html#extensions-to-date-calculations","966":"active_support_core_extensions.html#conversions","967":"active_support_core_extensions.html#extensions-to-datetime-calculations","968":"active_support_core_extensions.html#calculations","969":"active_support_core_extensions.html#time-constructors","970":"active_support_core_extensions.html#atomic-write","971":"active_support_core_extensions.html#existence","972":"classic_to_zeitwerk_howto.html","973":"classic_to_zeitwerk_howto.html#applications-running-rails-5-x-or-less","974":"classic_to_zeitwerk_howto.html#applications-running-rails-6-x","975":"classic_to_zeitwerk_howto.html#applications-running-rails-7","976":"classic_to_zeitwerk_howto.html#config-eager-load-paths","977":"classic_to_zeitwerk_howto.html#zeitwerk-check","978":"classic_to_zeitwerk_howto.html#acronyms","979":"classic_to_zeitwerk_howto.html#concerns","980":"classic_to_zeitwerk_howto.html#having-app-in-the-autoload-paths","981":"classic_to_zeitwerk_howto.html#autoloaded-constants-and-explicit-namespaces","982":"classic_to_zeitwerk_howto.html#one-file-one-constant-at-the-same-top-level","983":"classic_to_zeitwerk_howto.html#globs-in-config-autoload-paths","984":"classic_to_zeitwerk_howto.html#spring-and-the-test-environment","985":"classic_to_zeitwerk_howto.html#bootsnap","986":"classic_to_zeitwerk_howto.html#continuous-integration","987":"classic_to_zeitwerk_howto.html#bare-test-suites","988":"classic_to_zeitwerk_howto.html#delete-require-dependency-calls","989":"classic_to_zeitwerk_howto.html#qualified-names-in-class-and-module-definitions-are-now-possible","990":"classic_to_zeitwerk_howto.html#thread-safety-everywhere","991":"classic_to_zeitwerk_howto.html#eager-loading-and-autoloading-are-consistent","992":"active_record_multiple_databases.html","993":"active_record_multiple_databases.html#manipulando-associacoes-com-join-entre-bancos-de-dados","994":"active_record_multiple_databases.html#cache-de-schema","995":"active_record_multiple_databases.html#load-balancing-replicas","996":"active_record_postgresql.html","997":"active_record_postgresql.html#bytea","998":"active_record_postgresql.html#array","999":"active_record_postgresql.html#hstore","1000":"active_record_postgresql.html#json-and-jsonb","1001":"active_record_postgresql.html#range-types","1002":"active_record_postgresql.html#composite-types","1003":"active_record_postgresql.html#enumerated-types","1004":"active_record_postgresql.html#uuid","1005":"active_record_postgresql.html#bit-string-types","1006":"active_record_postgresql.html#network-address-types","1007":"active_record_postgresql.html#geometric-types","1008":"active_record_postgresql.html#interval","1009":"upgrading_ruby_on_rails.html","1010":"upgrading_ruby_on_rails.html#cobertura-de-testes","1011":"upgrading_ruby_on_rails.html#versoes-ruby","1012":"upgrading_ruby_on_rails.html#o-processo-de-atualizacao","1013":"upgrading_ruby_on_rails.html#a-tarefa-de-atualizacao","1014":"upgrading_ruby_on_rails.html#configurar-padroes-de-framework","1015":"upgrading_ruby_on_rails.html#actionview-helpers-urlhelper-button-to-changed-behavior","1016":"upgrading_ruby_on_rails.html#upgrading-from-rails-6-1-to-rails-7-0-spring","1017":"upgrading_ruby_on_rails.html#sprockets-is-now-an-optional-dependency","1018":"upgrading_ruby_on_rails.html#applications-need-to-run-in-zeitwerk-mode","1019":"upgrading_ruby_on_rails.html#the-setter-config-autoloader-has-been-deleted","1020":"upgrading_ruby_on_rails.html#activesupport-dependencies-private-api-has-been-deleted","1021":"upgrading_ruby_on_rails.html#autoloading-during-initialization","1022":"upgrading_ruby_on_rails.html#ability-to-configure-config-autoload-once-paths","1023":"upgrading_ruby_on_rails.html#actiondispatch-request-content-type-now-returned-content-type-header-as-it-is","1024":"upgrading_ruby_on_rails.html#key-generator-digest-class-changing-to-use-sha256","1025":"upgrading_ruby_on_rails.html#digest-class-for-activesupport-digest-changing-to-sha256","1026":"upgrading_ruby_on_rails.html#new-activesupport-cache-serialization-format","1027":"upgrading_ruby_on_rails.html#active-storage-video-preview-image-generation","1028":"upgrading_ruby_on_rails.html#active-storage-default-variant-processor-changed-to-vips","1029":"upgrading_ruby_on_rails.html#rails-application-config-for-o-valor-de-retorno-nao-oferece-mais-suporte-para-acesso-com-chaves-string","1030":"upgrading_ruby_on_rails.html#respostas-do-tipo-de-conteudo-ao-utilizar-respond-to-any","1031":"upgrading_ruby_on_rails.html#activesupport-callbacks-halted-callback-hook-agora-recebe-um-segundo-argumento","1032":"upgrading_ruby_on_rails.html#o-metodo-de-classe-helper-nos-controllers-usa-string-constantize","1033":"upgrading_ruby_on_rails.html#redirecionamento-para-https-vindo-de-http-agora-usara-o-codigo-de-status-308-http","1034":"upgrading_ruby_on_rails.html#active-storage-agora-requer-processamento-de-imagem","1035":"upgrading_ruby_on_rails.html#usando-webpacker","1036":"upgrading_ruby_on_rails.html#forcar-ssl","1037":"upgrading_ruby_on_rails.html#proposito-purpose-e-metadados-de-expiracao-agora-estao-incorporados-em-cookies-assinados-e-criptografados-para-maior-seguranca","1038":"upgrading_ruby_on_rails.html#todos-os-pacotes-npm-foram-movidos-para-o-escopo-rails","1039":"upgrading_ruby_on_rails.html#mudancas-na-api-do-action-cable-javascript","1040":"upgrading_ruby_on_rails.html#actiondispatch-response-content-type-agora-retorna-o-cabecalho-header-do-tipo-de-conteudo-content-type-sem-modificacao","1041":"upgrading_ruby_on_rails.html#carregamento-automatico","1042":"upgrading_ruby_on_rails.html#alteracao-de-comportamento-de-atribuicao-do-active-storage","1043":"upgrading_ruby_on_rails.html#atualizando-do-rails-5-1-para-o-rails-5-2-bootsnap","1044":"upgrading_ruby_on_rails.html#a-expiracao-em-cookies-assinados-ou-criptografados-esta-agora-incorporada-nos-valores-dos-cookies","1045":"upgrading_ruby_on_rails.html#hashwithindifferentaccess-de-nivel-superior-esta-descontinuado","1046":"upgrading_ruby_on_rails.html#application-secrets-agora-e-carregado-com-todas-as-chaves-como-simbolos","1047":"upgrading_ruby_on_rails.html#removido-suporte-obsoleto-para-text-e-nothing-em-render","1048":"upgrading_ruby_on_rails.html#removido-suporte-obsoleto-para-redirect-to-back","1049":"upgrading_ruby_on_rails.html#necessario-ruby-2-2-2","1050":"upgrading_ruby_on_rails.html#active-record-models-agora-herdam-de-applicationrecord-por-padrao","1051":"upgrading_ruby_on_rails.html#interrompendo-sequencias-de-callback-via-throw-abort","1052":"upgrading_ruby_on_rails.html#activejob-agora-herda-de-applicationjob-por-padrao","1053":"upgrading_ruby_on_rails.html#testando-rails-controller","1054":"upgrading_ruby_on_rails.html#carregamento-automatico-e-desabilitado-apos-a-inicializacao-no-ambiente-de-producao","1055":"upgrading_ruby_on_rails.html#serializacao-xml","1056":"upgrading_ruby_on_rails.html#removido-o-suporte-para-o-antigo-adaptador-de-banco-de-dados-mysql","1057":"upgrading_ruby_on_rails.html#removido-suporte-para-o-debugger","1058":"upgrading_ruby_on_rails.html#use-bin-rails-para-executar-tarefas-e-testes","1059":"upgrading_ruby_on_rails.html#actioncontroller-parameters-nao-herda-mais-de-hashwithindifferentaccess","1060":"upgrading_ruby_on_rails.html#protect-from-forgery-agora-assume-como-padrao-prepend-false","1061":"upgrading_ruby_on_rails.html#o-template-handler-padrao-agora-e-raw","1062":"upgrading_ruby_on_rails.html#adicionada-correspondencia-de-curinga-wildcard-para-template-dependencies","1063":"upgrading_ruby_on_rails.html#actionview-helpers-recordtaghelper-movido-para-a-gem-externa-record-tag-helper","1064":"upgrading_ruby_on_rails.html#removido-suporte-para-a-gem-protected-attributes","1065":"upgrading_ruby_on_rails.html#removido-o-suporte-para-a-gem-activerecord-deprecated-finders","1066":"upgrading_ruby_on_rails.html#a-ordem-do-teste-padrao-activesupport-testcase-agora-e-aleatoria","1067":"upgrading_ruby_on_rails.html#actioncontroller-live-tornou-se-uma-concern","1068":"upgrading_ruby_on_rails.html#novos-padroes-do-framework","1069":"upgrading_ruby_on_rails.html#mudancas-na-serializacao-json-jsonb","1070":"upgrading_ruby_on_rails.html#web-console","1071":"upgrading_ruby_on_rails.html#responders","1072":"upgrading_ruby_on_rails.html#tratamento-de-erros-em-transaction-callbacks","1073":"upgrading_ruby_on_rails.html#ordenando-os-casos-de-teste","1074":"upgrading_ruby_on_rails.html#atributos-serializados","1075":"upgrading_ruby_on_rails.html#nivel-de-log-em-producao","1076":"upgrading_ruby_on_rails.html#after-bundle-em-rails-templates","1077":"upgrading_ruby_on_rails.html#rails-html-sanitizer","1078":"upgrading_ruby_on_rails.html#testando-rails-dom","1079":"upgrading_ruby_on_rails.html#tokens-de-autenticidade-mascarados","1080":"upgrading_ruby_on_rails.html#action-mailer","1081":"upgrading_ruby_on_rails.html#suporte-para-chave-estrangeira","1082":"upgrading_ruby_on_rails.html#csrf-protection-from-remote-script-tags","1083":"upgrading_ruby_on_rails.html#upgrading-from-rails-4-0-to-rails-4-1-spring","1084":"upgrading_ruby_on_rails.html#config-secrets-yml","1085":"upgrading_ruby_on_rails.html#changes-to-test-helper","1086":"upgrading_ruby_on_rails.html#cookies-serializer","1087":"upgrading_ruby_on_rails.html#flash-structure-changes","1088":"upgrading_ruby_on_rails.html#changes-in-json-handling","1089":"upgrading_ruby_on_rails.html#usage-of-return-within-inline-callback-blocks","1090":"upgrading_ruby_on_rails.html#methods-defined-in-active-record-fixtures","1091":"upgrading_ruby_on_rails.html#i18n-enforcing-available-locales","1092":"upgrading_ruby_on_rails.html#mutator-methods-called-on-relation","1093":"upgrading_ruby_on_rails.html#changes-on-default-scopes","1094":"upgrading_ruby_on_rails.html#rendering-content-from-string","1095":"upgrading_ruby_on_rails.html#postgresql-json-and-hstore-datatypes","1096":"upgrading_ruby_on_rails.html#explicit-block-use-for-activesupport-callbacks","1097":"upgrading_ruby_on_rails.html#http-patch","1098":"upgrading_ruby_on_rails.html#atualizando-do-rails-3-2-para-o-rails-4-0-gemfile","1099":"upgrading_ruby_on_rails.html#atualizando-do-rails-3-2-para-o-rails-4-0-vendor-plugins","1100":"upgrading_ruby_on_rails.html#atualizando-do-rails-3-2-para-o-rails-4-0-active-record","1101":"upgrading_ruby_on_rails.html#active-resource","1102":"upgrading_ruby_on_rails.html#active-model","1103":"upgrading_ruby_on_rails.html#action-pack","1104":"upgrading_ruby_on_rails.html#active-support","1105":"upgrading_ruby_on_rails.html#ordem-de-carregamento-de-helpers","1106":"upgrading_ruby_on_rails.html#active-record-observer-e-action-controller-sweeper","1107":"upgrading_ruby_on_rails.html#sprockets-rails","1108":"upgrading_ruby_on_rails.html#sass-rails","1109":"upgrading_ruby_on_rails.html#atualizando-do-rails-3-1-para-o-rails-3-2-gemfile","1110":"upgrading_ruby_on_rails.html#atualizando-do-rails-3-1-para-o-rails-3-2-config-environments-development-rb","1111":"upgrading_ruby_on_rails.html#atualizando-do-rails-3-1-para-o-rails-3-2-config-environments-test-rb","1112":"upgrading_ruby_on_rails.html#atualizando-do-rails-3-1-para-o-rails-3-2-vendor-plugins","1113":"upgrading_ruby_on_rails.html#atualizando-do-rails-3-1-para-o-rails-3-2-active-record","1114":"upgrading_ruby_on_rails.html#gemfile","1115":"upgrading_ruby_on_rails.html#config-application-rb","1116":"upgrading_ruby_on_rails.html#atualizando-do-rails-3-0-para-o-rails-3-1-config-environments-development-rb","1117":"upgrading_ruby_on_rails.html#config-environments-production-rb","1118":"upgrading_ruby_on_rails.html#atualizando-do-rails-3-0-para-o-rails-3-1-config-environments-test-rb","1119":"upgrading_ruby_on_rails.html#config-initializers-wrap-parameters-rb","1120":"upgrading_ruby_on_rails.html#config-initializers-session-store-rb","1121":"upgrading_ruby_on_rails.html#remover-opcoes-de-cache-e-concat-em-referencias-de-helpers-para-assets-em-views","1122":"action_view_overview.html","1123":"action_view_overview.html#templates","1124":"action_view_overview.html#partials","1125":"action_view_overview.html#layouts","1126":"action_view_overview.html#pre-anexando-caminho-das-views","1127":"action_view_overview.html#anexando-caminho-das-views","1128":"active_record_basics.html","1129":"active_record_basics.html#o-padrao-active-record","1130":"active_record_basics.html#mapeamento-objeto-relacional-object-relational-mapping","1131":"active_record_basics.html#active-record-como-um-framework-orm","1132":"active_record_basics.html#convencoes-para-nomeacao","1133":"active_record_basics.html#convencoes-de-schema-esquema","1134":"active_record_basics.html#create","1135":"active_record_basics.html#read","1136":"active_record_basics.html#update","1137":"active_record_basics.html#delete","1138":"action_controller_overview.html","1139":"action_controller_overview.html#hash-e-parametros-de-array","1140":"action_controller_overview.html#parametros-json","1141":"action_controller_overview.html#parametros-de-rota","1142":"action_controller_overview.html#default-url-options","1143":"action_controller_overview.html#parametros-fortes","1144":"action_controller_overview.html#acessando-a-sessao","1145":"action_controller_overview.html#o-flash","1146":"action_controller_overview.html#filtros-after-e-around","1147":"action_controller_overview.html#outras-formas-de-usar-filtros","1148":"action_controller_overview.html#o-objeto-request","1149":"action_controller_overview.html#o-objeto-response","1150":"action_controller_overview.html#autenticacao-http-basic","1151":"action_controller_overview.html#autenticacao-http-digest","1152":"action_controller_overview.html#autenticacao-http-token","1153":"action_controller_overview.html#enviando-arquivos","1154":"action_controller_overview.html#restful-downloads","1155":"action_controller_overview.html#transmissao-ao-vivo-de-dado-arbitrarios","1156":"action_controller_overview.html#filtrando-parametros","1157":"action_controller_overview.html#filtrando-redirecionamentos","1158":"action_controller_overview.html#os-templates-404-e-500-padrao","1159":"action_controller_overview.html#rescue-from","1160":"3_2_release_notes.html","1161":"3_2_release_notes.html#rails-3-2-requires-at-least-ruby-1-8-7","1162":"3_2_release_notes.html#what-to-update-in-your-apps","1163":"3_2_release_notes.html#what-to-update-in-your-engines","1164":"3_2_release_notes.html#vendoring-gems","1165":"3_2_release_notes.html#living-on-the-edge","1166":"3_2_release_notes.html#faster-development-mode-routing","1167":"3_2_release_notes.html#automatic-query-explains","1168":"3_2_release_notes.html#tagged-logging","1169":"3_2_release_notes.html#railties-deprecations","1170":"3_2_release_notes.html#action-controller","1171":"3_2_release_notes.html#action-dispatch","1172":"3_2_release_notes.html#action-view","1173":"3_2_release_notes.html#sprockets","1174":"3_2_release_notes.html#active-record-deprecations","1175":"3_2_release_notes.html#active-model-deprecations","1176":"3_2_release_notes.html#deprecations","1177":"active_support_instrumentation.html","1178":"active_support_instrumentation.html#action-controller","1179":"active_support_instrumentation.html#action-dispatch","1180":"active_support_instrumentation.html#action-view","1181":"active_support_instrumentation.html#active-record","1182":"active_support_instrumentation.html#action-mailer","1183":"active_support_instrumentation.html#active-support","1184":"active_support_instrumentation.html#active-job","1185":"active_support_instrumentation.html#action-cable","1186":"active_support_instrumentation.html#active-storage","1187":"active_support_instrumentation.html#railties","1188":"active_support_instrumentation.html#rails","1189":"2_2_release_notes.html","1190":"2_2_release_notes.html#internationalization","1191":"2_2_release_notes.html#compatibility-with-ruby-1-9-and-jruby","1192":"2_2_release_notes.html#transactional-migrations","1193":"2_2_release_notes.html#connection-pooling","1194":"2_2_release_notes.html#hashes-for-join-table-conditions","1195":"2_2_release_notes.html#new-dynamic-finders","1196":"2_2_release_notes.html#associations-respect-private-protected-scope","1197":"2_2_release_notes.html#other-active-record-changes","1198":"2_2_release_notes.html#shallow-route-nesting","1199":"2_2_release_notes.html#method-arrays-for-member-or-collection-routes","1200":"2_2_release_notes.html#resources-with-specific-actions","1201":"2_2_release_notes.html#other-action-controller-changes","1202":"2_2_release_notes.html#memoization","1203":"2_2_release_notes.html#each-with-object","1204":"2_2_release_notes.html#delegates-with-prefixes","1205":"2_2_release_notes.html#other-active-support-changes","1206":"2_2_release_notes.html#config-gems","1207":"2_2_release_notes.html#other-railties-changes","1208":"5_1_release_notes.html","1209":"5_1_release_notes.html#yarn-support","1210":"5_1_release_notes.html#optional-webpack-support","1211":"5_1_release_notes.html#jquery-no-longer-a-default-dependency","1212":"5_1_release_notes.html#system-tests","1213":"5_1_release_notes.html#encrypted-secrets","1214":"5_1_release_notes.html#parameterized-mailers","1215":"5_1_release_notes.html#direct-resolved-routes","1216":"5_1_release_notes.html#unification-of-form-for-and-form-tag-into-form-with","1217":"5_1_release_notes.html#transactional-tests-with-multiple-connections","1218":"5_1_release_notes.html#railties-removals","1219":"5_1_release_notes.html#railties-notable-changes","1220":"5_1_release_notes.html#action-cable-notable-changes","1221":"5_1_release_notes.html#action-pack-removals","1222":"5_1_release_notes.html#action-pack-deprecations","1223":"5_1_release_notes.html#action-pack-notable-changes","1224":"5_1_release_notes.html#action-view-removals","1225":"5_1_release_notes.html#action-view-deprecations","1226":"5_1_release_notes.html#action-view-notable-changes","1227":"5_1_release_notes.html#action-mailer-notable-changes","1228":"5_1_release_notes.html#active-record-removals","1229":"5_1_release_notes.html#active-record-deprecations","1230":"5_1_release_notes.html#active-record-notable-changes","1231":"5_1_release_notes.html#active-model-removals","1232":"5_1_release_notes.html#active-model-notable-changes","1233":"5_1_release_notes.html#active-job-removals","1234":"5_1_release_notes.html#active-job-notable-changes","1235":"5_1_release_notes.html#removals","1236":"5_1_release_notes.html#active-support-deprecations","1237":"5_1_release_notes.html#notable-changes","1238":"ruby_on_rails_guides_guidelines.html","1239":"ruby_on_rails_guides_guidelines.html#html-guides-generation","1240":"ruby_on_rails_guides_guidelines.html#validation","1241":"ruby_on_rails_guides_guidelines.html#kindle-guides-generation","1242":"i18n.html","1243":"i18n.html#the-overall-architecture-of-the-library","1244":"i18n.html#the-public-i18n-api","1245":"i18n.html#configure-the-i18n-module","1246":"i18n.html#managing-the-locale-across-requests","1247":"i18n.html#abstracting-localized-code","1248":"i18n.html#providing-translations-for-internationalized-strings","1249":"i18n.html#passing-variables-to-translations","1250":"i18n.html#adding-date-time-formats","1251":"i18n.html#inflection-rules-for-other-locales","1252":"i18n.html#localized-views","1253":"i18n.html#organization-of-locale-files","1254":"i18n.html#looking-up-translations","1255":"i18n.html#pluralization","1256":"i18n.html#setting-and-passing-a-locale","1257":"i18n.html#using-safe-html-translations","1258":"i18n.html#translations-for-active-record-models","1259":"i18n.html#translations-for-action-mailer-e-mail-subjects","1260":"i18n.html#overview-of-other-built-in-methods-that-provide-i18n-support","1261":"i18n.html#using-different-backends","1262":"i18n.html#using-different-exception-handlers","1263":"3_0_release_notes.html","1264":"3_0_release_notes.html#rails-3-requires-at-least-ruby-1-8-7","1265":"3_0_release_notes.html#rails-application-object","1266":"3_0_release_notes.html#script-replaced-by-script-rails","1267":"3_0_release_notes.html#dependencies-and-config-gem","1268":"3_0_release_notes.html#upgrade-process","1269":"3_0_release_notes.html#vendoring-gems","1270":"3_0_release_notes.html#living-on-the-edge","1271":"3_0_release_notes.html#railties-restrung","1272":"3_0_release_notes.html#all-rails-core-components-are-decoupled","1273":"3_0_release_notes.html#active-model-abstraction","1274":"3_0_release_notes.html#controller-abstraction","1275":"3_0_release_notes.html#arel-integration","1276":"3_0_release_notes.html#mail-extraction","1277":"3_0_release_notes.html#abstract-controller","1278":"3_0_release_notes.html#action-controller","1279":"3_0_release_notes.html#action-dispatch","1280":"3_0_release_notes.html#action-view","1281":"3_0_release_notes.html#orm-abstraction-and-action-pack-interface","1282":"3_0_release_notes.html#validations","1283":"3_0_release_notes.html#query-interface","1284":"3_0_release_notes.html#enhancements","1285":"3_0_release_notes.html#patches-and-deprecations","1286":"development_dependencies_install.html","1287":"development_dependencies_install.html#install-git","1288":"development_dependencies_install.html#clone-the-ruby-on-rails-repository","1289":"development_dependencies_install.html#install-additional-tools-and-services","1290":"development_dependencies_install.html#database-configuration","1291":"development_dependencies_install.html#install-javascript-dependencies","1292":"development_dependencies_install.html#install-bundler-gem","1293":"development_dependencies_install.html#contribute-to-rails","1294":"engines.html","1295":"engines.html#inside-an-engine","1296":"engines.html#generating-an-article-resource","1297":"engines.html#generating-a-comments-resource","1298":"engines.html#mounting-the-engine","1299":"engines.html#engine-setup","1300":"engines.html#using-a-class-provided-by-the-application","1301":"engines.html#configuring-an-engine","1302":"engines.html#functional-tests","1303":"engines.html#overriding-models-and-controllers","1304":"engines.html#autoloading-and-engines","1305":"engines.html#overriding-views","1306":"engines.html#routes","1307":"engines.html#assets","1308":"engines.html#separate-assets-and-precompiling","1309":"engines.html#other-gem-dependencies","1310":"engines.html#avoid-loading-rails-frameworks","1311":"engines.html#when-are-hooks-called-questionmark","1312":"engines.html#modifying-code-to-use-load-hooks","1313":"engines.html#available-load-hooks","1314":"engines.html#available-configuration-hooks","1315":"active_record_encryption.html","1316":"active_record_encryption.html#setup","1317":"active_record_encryption.html#declaration-of-encrypted-attributes","1318":"active_record_encryption.html#deterministic-and-non-deterministic-encryption","1319":"active_record_encryption.html#action-text","1320":"active_record_encryption.html#fixtures","1321":"active_record_encryption.html#supported-types","1322":"active_record_encryption.html#ignoring-case","1323":"active_record_encryption.html#support-for-unencrypted-data","1324":"active_record_encryption.html#support-for-previous-encryption-schemes","1325":"active_record_encryption.html#unique-constraints","1326":"active_record_encryption.html#filtering-params-named-as-encrypted-columns","1327":"active_record_encryption.html#encoding","1328":"active_record_encryption.html#built-in-key-providers","1329":"active_record_encryption.html#custom-key-providers","1330":"active_record_encryption.html#model-specific-key-providers","1331":"active_record_encryption.html#model-specific-keys","1332":"active_record_encryption.html#rotating-keys","1333":"active_record_encryption.html#storing-key-references","1334":"active_record_encryption.html#basic-api","1335":"active_record_encryption.html#configuration-options","1336":"active_record_encryption.html#encryption-contexts","1337":"rails_on_rack.html","1338":"rails_on_rack.html#rails-application-s-rack-object","1339":"rails_on_rack.html#bin-rails-server","1340":"rails_on_rack.html#rackup","1341":"rails_on_rack.html#development-and-auto-reloading","1342":"rails_on_rack.html#inspecting-middleware-stack","1343":"rails_on_rack.html#configuring-middleware-stack","1344":"rails_on_rack.html#internal-middleware-stack","1345":"rails_on_rack.html#learning-rack","1346":"rails_on_rack.html#understanding-middlewares","1347":"form_helpers.html","1348":"form_helpers.html#formulario-de-pesquisa-generica","1349":"form_helpers.html#helpers-para-gerar-elementos-de-formulario","1350":"form_helpers.html#outros-auxiliares-interessantes","1351":"form_helpers.html#vinculando-um-formulario-a-um-objeto","1352":"form_helpers.html#confiando-na-identificacao-de-registro","1353":"form_helpers.html#como-os-formularios-funcionam-com-os-metodos-patch-put-ou-delete-questionmark","1354":"form_helpers.html#grupos-de-opcao","1355":"form_helpers.html#caixas-de-selecao-select-boxes-com-objetos-model","1356":"form_helpers.html#fuso-horario-e-selecao-de-pais","1357":"form_helpers.html#caixas-de-selecao-select-boxes-para-componentes-individuais-de-tempo","1358":"form_helpers.html#o-auxiliar-collection-select","1359":"form_helpers.html#o-auxiliar-collection-radio-buttons","1360":"form_helpers.html#o-auxiliar-collection-check-boxes","1361":"form_helpers.html#o-que-e-enviado","1362":"form_helpers.html#estruturas-basicas","1363":"form_helpers.html#combinando-os-conceitos","1364":"form_helpers.html#utilizando-o-auxiliar-fields-for-helper","1365":"form_helpers.html#configurando-o-model","1366":"form_helpers.html#formularios-aninhados","1367":"form_helpers.html#o-controller","1368":"form_helpers.html#removendo-objetos","1369":"form_helpers.html#prevenindo-registros-vazios","1370":"form_helpers.html#adicionando-campos-dinamicamente","1371":"active_storage_overview.html","1372":"active_storage_overview.html#requirements","1373":"active_storage_overview.html#servico-disk","1374":"active_storage_overview.html#servico-s3-amazon-s3-e-apis-compativeis-com-s3","1375":"active_storage_overview.html#servico-armazenamento-da-microsoft-azure","1376":"active_storage_overview.html#servico-google-cloud-storage","1377":"active_storage_overview.html#servico-espelho","1378":"active_storage_overview.html#acesso-publico","1379":"active_storage_overview.html#has-one-attached","1380":"active_storage_overview.html#has-many-attached","1381":"active_storage_overview.html#anexando-objetos-file-io","1382":"active_storage_overview.html#redirect-mode","1383":"active_storage_overview.html#proxy-mode","1384":"active_storage_overview.html#authenticated-controllers","1385":"active_storage_overview.html#lazy-vs-immediate-loading","1386":"active_storage_overview.html#transforming-images","1387":"active_storage_overview.html#pre-visualizacao-de-arquivos","1388":"active_storage_overview.html#uso","1389":"active_storage_overview.html#configuracao-do-cross-origin-resource-sharing-cors","1390":"active_storage_overview.html#eventos-de-upload-do-javascript","1391":"active_storage_overview.html#exemplo","1392":"active_storage_overview.html#integrando-com-bibliotecas-ou-frameworks","1393":"active_storage_overview.html#descartando-arquivos-criados-durante-os-testes","1394":"active_storage_overview.html#adicionando-arquivos-em-fixtures","1395":"working_with_javascript_in_rails.html","1396":"working_with_javascript_in_rails.html#elementos-remotos","1397":"working_with_javascript_in_rails.html#personalize-elementos-remotos","1398":"working_with_javascript_in_rails.html#confirmations","1399":"working_with_javascript_in_rails.html#desativando-automaticamente","1400":"working_with_javascript_in_rails.html#manipuladores-de-eventos-rails-ujs","1401":"working_with_javascript_in_rails.html#eventos-paraveis","1402":"working_with_javascript_in_rails.html#um-exemplo-simples","1403":"working_with_javascript_in_rails.html#como-o-turbolinks-funciona","1404":"working_with_javascript_in_rails.html#eventos-de-mudanca-de-pagina"};